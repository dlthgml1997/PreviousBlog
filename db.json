{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/image/2020-08-242.07.26.png","path":"image/2020-08-242.07.26.png","modified":0,"renderable":0},{"_id":"source/image/2020-08-242.10.47.png","path":"image/2020-08-242.10.47.png","modified":0,"renderable":0},{"_id":"source/image/2020-08-242.50.59.png","path":"image/2020-08-242.50.59.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-011.png","path":"image/2020-09-011.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.08.13.png","path":"image/2020-09-015.08.13.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.11.25.png","path":"image/2020-09-015.11.25.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.13.32.png","path":"image/2020-09-015.13.32.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.14.22.png","path":"image/2020-09-015.14.22.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.23.17.png","path":"image/2020-09-015.23.17.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.24.23.png","path":"image/2020-09-015.24.23.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.29.14.png","path":"image/2020-09-015.29.14.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.31.51.png","path":"image/2020-09-015.31.51.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.41.00.png","path":"image/2020-09-015.41.00.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.42.09.png","path":"image/2020-09-015.42.09.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-015.49.10.png","path":"image/2020-09-015.49.10.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-021.20.21.png","path":"image/2020-09-021.20.21.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-086.32.13.png","path":"image/2020-09-086.32.13.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-088.58.10.png","path":"image/2020-09-088.58.10.png","modified":0,"renderable":0},{"_id":"source/image/2020-09-089.00.04.png","path":"image/2020-09-089.00.04.png","modified":0,"renderable":0},{"_id":"source/image/2020-10-0111.04.33.png","path":"image/2020-10-0111.04.33.png","modified":0,"renderable":0},{"_id":"source/image/KakaoTalk_20200323_224007711.png","path":"image/KakaoTalk_20200323_224007711.png","modified":0,"renderable":0},{"_id":"source/image/image-20200804175123560.png","path":"image/image-20200804175123560.png","modified":0,"renderable":0},{"_id":"source/image/image-20201231163725437.png","path":"image/image-20201231163725437.png","modified":0,"renderable":0},{"_id":"source/image/image-20210208224433936.png","path":"image/image-20210208224433936.png","modified":0,"renderable":0},{"_id":"source/image/image-20210208224412843.png","path":"image/image-20210208224412843.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2020-08-04 오후 5.57.11.png","path":"image/스크린샷 2020-08-04 오후 5.57.11.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2020-10-01 오후 11.17.47.png","path":"image/스크린샷 2020-10-01 오후 11.17.47.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2020-10-01 오후 11.23.26.png","path":"image/스크린샷 2020-10-01 오후 11.23.26.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2020-10-01 오후 11.33.07.png","path":"image/스크린샷 2020-10-01 오후 11.33.07.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2020-10-01 오후 11.34.10.png","path":"image/스크린샷 2020-10-01 오후 11.34.10.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2020-10-01 오후 9.31.47.png","path":"image/스크린샷 2020-10-01 오후 9.31.47.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2020-10-31 오전 5.13.17.png","path":"image/스크린샷 2020-10-31 오전 5.13.17.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2020-12-02 오전 1.23.00.png","path":"image/스크린샷 2020-12-02 오전 1.23.00.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2020-12-02 오전 1.28.47.png","path":"image/스크린샷 2020-12-02 오전 1.28.47.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2021-01-06 오후 11.30.50.png","path":"image/스크린샷 2021-01-06 오후 11.30.50.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2021-01-06 오후 11.43.16.png","path":"image/스크린샷 2021-01-06 오후 11.43.16.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2021-01-06 오후 11.52.25.png","path":"image/스크린샷 2021-01-06 오후 11.52.25.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2021-01-10 오후 3.07.46.png","path":"image/스크린샷 2021-01-10 오후 3.07.46.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2021-01-06 오후 11.59.58.png","path":"image/스크린샷 2021-01-06 오후 11.59.58.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2021-01-10 오후 3.18.56.png","path":"image/스크린샷 2021-01-10 오후 3.18.56.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2021-01-10 오후 9.04.40.png","path":"image/스크린샷 2021-01-10 오후 9.04.40.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2021-01-13 오전 10.48.29.png","path":"image/스크린샷 2021-01-13 오전 10.48.29.png","modified":0,"renderable":0},{"_id":"source/image/스크린샷 2021-01-13 오전 11.04.56.png","path":"image/스크린샷 2021-01-13 오전 11.04.56.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"1777cb2b2d99d1b223672a0e53ef3f494e76b6aa","modified":1612809072214},{"_id":"source/_posts/SSL01.md","hash":"11ae3ec07143790ef5fcd4caa8c4fd1efaebea02","modified":1612808693720},{"_id":"source/_posts/C++Sort.md","hash":"8ed74ed4929ca7f2fd238367330c1e97bf12ede0","modified":1612808702953},{"_id":"source/_posts/.DS_Store","hash":"5e5c084634677a515ea6cd78321df9dd7e5ce613","modified":1612804492110},{"_id":"source/_posts/algorithm-hash.md","hash":"25f47e83f49436ffae9e70e11b48efdbe793ac2c","modified":1612808717370},{"_id":"source/_posts/android-hash-key.md","hash":"6961debe737468634cb5bf89360aa26fddbf7956","modified":1612808717538},{"_id":"source/_posts/android-base64.md","hash":"aad8ec1b6b4d77b3b779a65b38d515cc3e1031b9","modified":1612808716950},{"_id":"source/_posts/angular-activatedRoute.md","hash":"ad2dcbe4e146e6c5a534f6a4f183d2820329db23","modified":1612808716997},{"_id":"source/_posts/angular-class-binding.md","hash":"e60e50d391c7cc68c29ca7c1e2d963b3fe6a1850","modified":1612808717093},{"_id":"source/_posts/angular-cli-class.md","hash":"ba8e5bbf412223af76aeef428203a41a07f28075","modified":1612808716997},{"_id":"source/_posts/angular-cli-overview.md","hash":"a54a28ae24dc2f6986052274a89fd6dc3d132646","modified":1612808717093},{"_id":"source/_posts/angular-dependency-injection.md","hash":"5885d41ad2e0190eecfd0a501fef3a28f8789450","modified":1612808712592},{"_id":"source/_posts/angular-event-binding.md","hash":"3057de0dd6133d04fb6c15cd228445094ae83a30","modified":1612808712562},{"_id":"source/_posts/angular-ngif.md","hash":"eade272c960b594361099b1e84daac72607290eb","modified":1612808712425},{"_id":"source/_posts/angular-create-approutingmodule.md","hash":"07ae66baea2456f457cd9a6181c4a14ec92d6225","modified":1612808712694},{"_id":"source/_posts/angular-routerlink.md","hash":"8873dc4e999798dfcaa05ccee76f06cba85e9604","modified":1612808712491},{"_id":"source/_posts/angular-sync-to-async-observable.md","hash":"3cc5b38dd358c804dd0a0edda8d3bfc8a2a78727","modified":1612808712592},{"_id":"source/_posts/backjoon-1037.md","hash":"18159d33373894168be11b83f84bae73ec07ca9c","modified":1612808711972},{"_id":"source/_posts/backjoon-11047.md","hash":"d542e044201d902e1932d0b9b3064bc57d2145cb","modified":1612808707572},{"_id":"source/_posts/backjoon-14502.md","hash":"feefbd62170112c14d19fdf1a54a9473f9a0ec99","modified":1612808707078},{"_id":"source/_posts/backjoon-12761.md","hash":"a50ad5aeaf1efea6bb8c4ea3a3d5090f614aa01c","modified":1612808707030},{"_id":"source/_posts/backjoon-15649.md","hash":"01810af3ee73fac908583450698c4f6cbb1a3d8d","modified":1612808707029},{"_id":"source/_posts/backjoon-15651.md","hash":"8fbf942b2c166716a53cf7b095413f42011988b1","modified":1612808706981},{"_id":"source/_posts/backjoon-1912.md","hash":"34ab56e761898b01ed6065317ef0feda08d2b08c","modified":1612808712015},{"_id":"source/_posts/backjoon-2178.md","hash":"fe83eaeb6ebd82491b19c607bcbeb0cd3c134c98","modified":1612808712016},{"_id":"source/_posts/backjoon-1525.md","hash":"b95e6d7cceb8767d184cc07617ea2cc75af6f784","modified":1612808712015},{"_id":"source/_posts/backjoon-15654.md","hash":"b9aad3ebb2c016c482bad49eb919f4cf593af9cb","modified":1612808707243},{"_id":"source/_posts/backjoon-9251.md","hash":"32a451b5eeaecd4e8dbe88d970d9083fb945ffc8","modified":1612808707687},{"_id":"source/_posts/backjoon-9252.md","hash":"d5a77d8b0a178a4181211f7eb1609ab4e46973da","modified":1612808707754},{"_id":"source/_posts/backjoon-9372.md","hash":"ed7b99849324e4dc1252ca1419385f918d2fcc3b","modified":1612808707621},{"_id":"source/_posts/backjoon-dfs-bfs.md","hash":"c44879e706d51553a726abbd2fd5ba87777a6c1a","modified":1612808707030},{"_id":"source/_posts/boj-9657.md","hash":"3dd98d1b8312281f8a4f6ba972a2057608bc7df4","modified":1612808703019},{"_id":"source/_posts/programmers- Immigration.md","hash":"8efb1e951c060122373e3602de05ccc4af500f33","modified":1612808702925},{"_id":"source/_posts/boj-2564.md","hash":"dfbbfbead3b2e68a73d118baaf5127c8f4b9a159","modified":1612809115721},{"_id":"source/_posts/programmers-func-develop.md","hash":"4a50c455c44d2feed3fbdc4243c4630bb37c9a70","modified":1612808702417},{"_id":"source/_posts/programmers-carpet.md","hash":"8a333c667ab5792c36ef7ab371ecf36ba859595c","modified":1612808702857},{"_id":"source/_posts/programmers-kth-number.md","hash":"d79d48456a7dc54606951f69ab336f8ce4e335c2","modified":1612808702416},{"_id":"source/_posts/programmers-clothes.md","hash":"f0e8f66ddbc4a0ef7d8f16f824e5e3322cd0db7e","modified":1612808702568},{"_id":"source/_posts/programmers-network.md","hash":"e71c22bc18e3c93445c1b4d1cb50f1d83aee7484","modified":1612808702416},{"_id":"source/_posts/programmers-n-dp.md","hash":"3e337f8ca60acb1b96b3d8c4bcecd3542026b83e","modified":1612808702349},{"_id":"source/_posts/programmers-phonebook.md","hash":"b00bc7541bb8038572ca906ae1e326ebb6766429","modified":1612808696403},{"_id":"source/_posts/programmers-price-of-stock.md","hash":"bf3d60eb3c52cddd47c5818e2c01f638321ffd8f","modified":1612808696265},{"_id":"source/_posts/programmers-scoville.md","hash":"e28e9dfc287e360b832d298896cab5103a29f46e","modified":1612808696283},{"_id":"source/_posts/programmers-printer.md","hash":"0f7a63fa206004ae2b5adcea6626322c5c47d870","modified":1612808696217},{"_id":"source/_posts/programmers-priority-queue.md","hash":"0d69389c20ea127047d0e97409cb398422202056","modified":1612808696173},{"_id":"source/_posts/programmers-skill-checks-1.md","hash":"0a4249ba9111135dc37891ddcde44dabe11dd0c3","modified":1612808695774},{"_id":"source/_posts/programmers-tile.md","hash":"7ab33bd16683972cf70ccd58574fbd1d04ead3e7","modified":1612808695707},{"_id":"source/_posts/programmers-top.md","hash":"2080347400e7c839a2fd92cdb7cf28370ee73520","modified":1612808695705},{"_id":"source/_posts/programmers-participant-not-completion.md","hash":"7407067dbd2064349f564b78d682ed48cb418358","modified":1612808702417},{"_id":"source/_posts/python-array-sort.md","hash":"94968fd8d73b43b44e80285fc2ce1627ec06c85a","modified":1612808695634},{"_id":"source/_posts/python-array-cutting.md","hash":"800db2268fa74e8c8017c12aefb2c3a968d64b5c","modified":1612808695706},{"_id":"source/_posts/python-ceil.md","hash":"051b9c154c30f111b4e4c8d6886c93fce464e81e","modified":1612808693722},{"_id":"source/_posts/python-combinations.md","hash":"f77f08dc0612da5b8c595470a94fcfbf90eadb0d","modified":1612808693722},{"_id":"source/_posts/python-indexing-slicing.md","hash":"c9cefbcbc01bd30bfe376b7856a13a3cfa511564","modified":1612808693722},{"_id":"source/_posts/swea-2043.md","hash":"650c38b751c10374223f32d30417670c42625c12","modified":1612808693721},{"_id":"source/_posts/python-heapq.md","hash":"7d354ebc51578ad257071331c5a9fbb084c3418f","modified":1612808693721},{"_id":"source/_posts/python-underbar.md","hash":"db5905be050ce68c5bc478ca7405aac7525535e8","modified":1612808693721},{"_id":"source/_posts/swea-5215.md","hash":"c252a4975146dc7372212fbacc9b796bf6ba4de0","modified":1612808693652},{"_id":"source/_posts/swea-1221.md","hash":"d696f9977dc9339fb57d29e7c918f6104b3452c6","modified":1612808693721},{"_id":"source/_posts/swea-2056.md","hash":"e870113cf377e2dd55cd1771668891075cd5fe7e","modified":1612808690695},{"_id":"source/assets/.DS_Store","hash":"24f747437576ddd5b393ee088e0cd83ed274ffae","modified":1599203094770},{"_id":"source/_images/.sohee.jpg.icloud","hash":"c6ad825e7967edd8279b7012ed4dda041091b24a","modified":1600194852000},{"_id":"source/image/.DS_Store","hash":"3381454cc1af611285c4eec2fd5fed8cc6d1c757","modified":1612809132239},{"_id":"source/image/2020-09-011.png","hash":"ee6ec17eaf72057bc169459a0e5737d3b554c3a8","modified":1598947533726},{"_id":"source/image/2020-09-015.13.32.png","hash":"eab456a7320e27737c15b94555b7ecc74a867c60","modified":1598948018032},{"_id":"source/image/2020-09-015.23.17.png","hash":"c5bb52afdd77b2d879c3ca73256e85e6c360db81","modified":1598948603519},{"_id":"source/image/2020-09-015.24.23.png","hash":"901d910c1d18988d40a67c5c02a729813bf1c4e5","modified":1598948668675},{"_id":"source/image/2020-09-015.29.14.png","hash":"3481a328e3a532a130932677b978597a522b59a4","modified":1598949010260},{"_id":"source/image/2020-09-015.42.09.png","hash":"8aaa8a5fdf2c4ddf05603661d740d85c456797b0","modified":1598949734616},{"_id":"source/image/2020-09-021.20.21.png","hash":"456ccfcf9a0d9ae367ab1994bd5790506feca0d4","modified":1598977226704},{"_id":"source/image/image-20200804175123560.png","hash":"c10829481dfc5c012af5283bc2b3b6c8ea1833f5","modified":1596531083560},{"_id":"source/image/image-20210208224412843.png","hash":"192ddd8f0972d5d05f28d17a731842869f690d94","modified":1612791852844},{"_id":"source/image/image-20210208224433936.png","hash":"989526a5e4f75b81b6f7ffe86d19bb0e3106e06e","modified":1612791873936},{"_id":"source/image/스크린샷 2020-10-01 오후 11.17.47.png","hash":"7af85435abfeb6077e059ff135bd9c005c1f19b8","modified":1601561873024},{"_id":"source/image/스크린샷 2020-10-01 오후 11.23.26.png","hash":"42b852bcdd70dd5c761caadcf8659a06456f021e","modified":1601562212026},{"_id":"source/image/스크린샷 2020-12-02 오전 1.23.00.png","hash":"0088136af689a09fcda12bdeb6d42d5ad7be8251","modified":1606839787885},{"_id":"source/image/스크린샷 2020-10-31 오전 5.13.17.png","hash":"ffe4c4fbe9a7e08fdd442009a17446b33d072624","modified":1604088803459},{"_id":"source/image/스크린샷 2020-12-02 오전 1.28.47.png","hash":"dde102197a4106fb1ffd5e9f326a7cfa7b3075ac","modified":1606840133364},{"_id":"source/assets/images/.cover-v1.2.0.jpg.icloud","hash":"894d43fb7087589c1fef5de53fb53a6a1f8bb1cc","modified":1586813095000},{"_id":"source/assets/images/.logo-algolia-nebula-blue-full.svg.icloud","hash":"53099c543f9fc2e462eb96274b20ae3a8aebb079","modified":1586813095000},{"_id":"source/assets/images/.cover.jpg.icloud","hash":"4cf7c80ad119cb270adf6513af012f28588e8c16","modified":1586813095000},{"_id":"source/image/2020-08-242.07.26.png","hash":"5adf3f5e7db6e72f81da13c1c8ab40c92917f88a","modified":1598202452120},{"_id":"source/image/2020-09-015.08.13.png","hash":"61cdecc8db34977780fada845b3474a972431df5","modified":1598947699489},{"_id":"source/image/2020-08-242.10.47.png","hash":"4bdfe4a5af509ff22849563d69324b7362016e44","modified":1598202740664},{"_id":"source/image/스크린샷 2021-01-06 오후 11.43.16.png","hash":"26c7e9a2771acbc8edd50d17cf5731bf108709d5","modified":1609944201759},{"_id":"source/image/스크린샷 2021-01-06 오후 11.52.25.png","hash":"99b4c73d36b8faee658eeb8c97cb1fe07bee9324","modified":1609944750912},{"_id":"source/image/스크린샷 2021-01-13 오전 11.04.56.png","hash":"8fe0036bfbee1ce7060e7ef23d2f7422122ca9e9","modified":1610503501546},{"_id":"themes/ocean/.._config.yml.icloud","hash":"6468ef5ad186890fa2183469644e59d0732b405c","modified":1581766994000},{"_id":"themes/ocean/.README.md.icloud","hash":"31243a642ca2ea0506a076f12a105ac0ecc8824c","modified":1581765882000},{"_id":"themes/ocean/.DS_Store","hash":"8416793e104378101623338d32cc9f453cd451fe","modified":1612808178689},{"_id":"themes/ocean/.package.json.icloud","hash":"73a1a375b23a9b7a6aa8b188b41c1faa94474757","modified":1581765882000},{"_id":"themes/ocean/languages/.default.yml.icloud","hash":"f60e9fffc0579b50e6d4e53f8e7d4dffd0f3c6d1","modified":1581765882000},{"_id":"themes/ocean/languages/.fr.yml.icloud","hash":"f3c50cadd4eb297f72ebe1bd4351890e0dfbe8df","modified":1581765882000},{"_id":"themes/ocean/languages/.de.yml.icloud","hash":"6ded1f80db3a557d67314a3406fb27a83ed0b616","modified":1581765882000},{"_id":"themes/ocean/languages/.es.yml.icloud","hash":"b52e254c27df4570e42f45a1ba82149a48ca7b1f","modified":1581765882000},{"_id":"themes/ocean/languages/.ja.yml.icloud","hash":"c55b6cb3e00f5dddf8d63e09c93a06d8b9e16b2c","modified":1581765882000},{"_id":"themes/ocean/languages/.ko.yml.icloud","hash":"63e2c8650d1e675eef749dd6a1756aa87277c7fd","modified":1581765882000},{"_id":"themes/ocean/languages/.no.yml.icloud","hash":"80007828b070ff6ec496efbd59c59da733814596","modified":1581765882000},{"_id":"themes/ocean/languages/.pt.yml.icloud","hash":"12e73bd95099ac010ec312641cff96ebcb3bded7","modified":1581765882000},{"_id":"themes/ocean/languages/.ru.yml.icloud","hash":"3617f89b08464d85ccf2b26533c5764c96919b7d","modified":1581765882000},{"_id":"themes/ocean/languages/.zh-TW.yml.icloud","hash":"8324757470e6f11eb627c787f2244da315426210","modified":1581765882000},{"_id":"themes/ocean/languages/.nl.yml.icloud","hash":"5be7b77dbf73b82b4d80b5520c0e33864e126974","modified":1581765882000},{"_id":"themes/ocean/languages/.zh-CN.yml.icloud","hash":"b885d511cc6aa59aa0b31c6bfd6093cc1e99c12e","modified":1581765882000},{"_id":"themes/ocean/layout/.DS_Store","hash":"19bab7d71bb52ac4743202b06e23b480e2e3e1d6","modified":1612806604467},{"_id":"themes/ocean/layout/.archive.ejs.icloud","hash":"9ae0271194f734bc0689ffdada8682c0869a7085","modified":1581765882000},{"_id":"themes/ocean/layout/.categories.ejs.icloud","hash":"e6ffa286e20739ee796b3cc99219823693b17adf","modified":1581765882000},{"_id":"themes/ocean/layout/.index.ejs.icloud","hash":"8aeb86f93f8b2b0958fe7ddaf5ff799f37858ac6","modified":1581765882000},{"_id":"themes/ocean/layout/.layout.ejs.icloud","hash":"74d5ef3ecfc3ed64eb3c5408835380fd55f2332f","modified":1581765882000},{"_id":"themes/ocean/layout/.page.ejs.icloud","hash":"ca08a59d4dde3a26c6c64439654e2d3db6bbdf4b","modified":1581765882000},{"_id":"themes/ocean/layout/.tags.ejs.icloud","hash":"daf18af0a82bcdcef3325e293c1be57d0f2038bd","modified":1581765882000},{"_id":"themes/ocean/layout/.post.ejs.icloud","hash":"06bddbffb775f0942bbc34b35f10bd81337781cd","modified":1581765882000},{"_id":"themes/ocean/source/.404.html.icloud","hash":"42db041efa11d639931114b50f59f59b15a54f0d","modified":1581765882000},{"_id":"themes/ocean/screenshots/.hexo-theme-ocean.jpg.icloud","hash":"01146e361da5f4410e0b78aae75671ca16d8a3db","modified":1581765882000},{"_id":"themes/ocean/source/.favicon.ico.icloud","hash":"7fa7b15fd540ce817b364c7ec05926f3ed23018a","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/.after-footer.ejs.icloud","hash":"68a112e8dd3f4d2a074858f008f8448456f80b4a","modified":1581765882000},{"_id":"themes/ocean/source/.robots.txt.icloud","hash":"dd7c06795e296171de1e7aba67cff3b51ed8ac39","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/.DS_Store","hash":"3f10b5adea130661936d4b620ff321cbcea10071","modified":1612806628844},{"_id":"themes/ocean/layout/_partial/.article.ejs.icloud","hash":"279e52907b7d5c368c4b150b61d49840d60f61a1","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/.archive-post.ejs.icloud","hash":"479481a2c55cdc0d11393e60926924bc2682e452","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/.archive.ejs.icloud","hash":"22696be291b78edc83dbc2786bb6685d9d0cbba4","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/.footer.ejs.icloud","hash":"59182fb973096062645f945c48ef1f1defdc1430","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/.ocean.ejs.icloud","hash":"3503bd0c92ec5d10e548158e4ef445962cc17ae9","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/.head.ejs.icloud","hash":"e8790019b00226f5691271efc1c10a79a022aed2","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/.totop.ejs.icloud","hash":"dcfaca398de5c1115bec2b36b9f26963143314fe","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/.sidebar.ejs.icloud","hash":"aa9fd84e31daad99022b442fbc53476562e30b49","modified":1581765882000},{"_id":"themes/ocean/source/css/.._extend.styl.icloud","hash":"dc51cc1ba37d328ba8a9044f273631c6e0227df0","modified":1581765882000},{"_id":"themes/ocean/source/css/.._feathericon.styl.icloud","hash":"992048836e5445fe1aca715ee24c19b1254b5e7c","modified":1581765882000},{"_id":"themes/ocean/source/css/.._variables.styl.icloud","hash":"55632b4bf3cc55fd3347a863868df433cbdc8d93","modified":1581765882000},{"_id":"themes/ocean/source/css/.._mixins.styl.icloud","hash":"fc21d9e2be0c959607e3ad5e9a3fd89a5fddfbae","modified":1581765882000},{"_id":"themes/ocean/source/css/.style.styl.icloud","hash":"bed26c9f3566d3885ca3150aae4a972d25ef1933","modified":1581765882000},{"_id":"themes/ocean/source/css/.._normalize.styl.icloud","hash":"640db47933d9192f14179703d00a7f180dcb1291","modified":1581765882000},{"_id":"themes/ocean/source/css/.404.styl.icloud","hash":"71679e321293270b862348a62052a4aea007eb40","modified":1581765882000},{"_id":"themes/ocean/source/fancybox/.jquery.fancybox.min.css.icloud","hash":"dc446165d3b21f1e8e6247bab490ea0e8c1bbc36","modified":1581765882000},{"_id":"themes/ocean/source/fancybox/.jquery.fancybox.min.js.icloud","hash":"e1a3728b2d51f9d1c67fc30b22fc3f5fe3347b0c","modified":1581765882000},{"_id":"themes/ocean/source/images/.hexo-inverted.svg.icloud","hash":"efbe1d46a70295a45c7776fc8a43099068ad2a83","modified":1581765882000},{"_id":"themes/ocean/source/images/.hexo.svg.icloud","hash":"0417620a617a765afd6a4c2eb7f732f2a4d75707","modified":1581765882000},{"_id":"themes/ocean/source/images/.forrestgump.png.icloud","hash":"51adf498ec29c508c4c9973cb1a4ae16ec75e78c","modified":1581765882000},{"_id":"themes/ocean/source/js/.busuanzi-2.3.pure.min.js.icloud","hash":"cc228ffb33a2cf8a392f7d9f707f52c8548da7e6","modified":1581765882000},{"_id":"themes/ocean/source/js/.jquery-2.0.3.min.js.icloud","hash":"438393b9c1f1808cb1734e8f12ff4e9c2c20d8ee","modified":1581765882000},{"_id":"themes/ocean/source/js/.ocean.js.icloud","hash":"f7c62f6e8178eb49c62b3e1325528d72d580cbeb","modified":1581765882000},{"_id":"themes/ocean/source/js/.jquery.justifiedGallery.min.js.icloud","hash":"6fb56fe97eb0fc62f27536a96fb8aeba155a057d","modified":1581765882000},{"_id":"themes/ocean/source/js/.lazyload.min.js.icloud","hash":"3bf2263badf61f8aea1f76aa95e6cac640d3eb50","modified":1581765882000},{"_id":"themes/ocean/source/js/.search.js.icloud","hash":"91e5923b1e81e7570e957d486676528a8ae60008","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.albums.ejs.icloud","hash":"ef5ae7f4e9865a3bfe5c5ea00f91ef1b0e53c146","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.category.ejs.icloud","hash":"81c0c537735f23df3051c558138a77c58d0655ab","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.busuanzi.ejs.icloud","hash":"6775d8ec098f9654daf7754f8931d55e569aa3c2","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.date.ejs.icloud","hash":"950c4ad2ae233d6bd06c048b7bd0ec1d7fe7c51d","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.gallery.ejs.icloud","hash":"0529377cad9433b6f16e7745baa9f2ddd09286d5","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.gitalk.ejs.icloud","hash":"63b385848f3674275e1d5a2ce1183914fd88994d","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.justifiedGallery.ejs.icloud","hash":"d739d018c55ac06ecb9dc7cd275e3d432addad1e","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.nav.ejs.icloud","hash":"abd304a192ecabfce647510a2a61d4f792107800","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.search.ejs.icloud","hash":"228807e5558988376bd6879b2ebabe26ec138cdd","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.tag.ejs.icloud","hash":"786238b153ba26ca2e10ef7993fee8fb5b31a2b5","modified":1581765882000},{"_id":"themes/ocean/source/js/.pace.min.js.icloud","hash":"e8a9fc39d687a865c0f855004c96000bbdaa3875","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.title.ejs.icloud","hash":"afca34d8c5ffa053c9edd696c48a4284359277b8","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.topping.ejs.icloud","hash":"4e4eb9a7eed1852ed6339ee19c98262b1d9ab6bc","modified":1581765882000},{"_id":"themes/ocean/source/js/.tocbot.min.js.icloud","hash":"910f4c407383819bea25210d3edf3fcd718b43d2","modified":1581765882000},{"_id":"themes/ocean/layout/_partial/post/.tocbot.ejs.icloud","hash":"7bd304c0951f75880005e4e7074ef43ebac0023b","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.apple.styl.icloud","hash":"849fbc72a36734feb791ee66f712205770d71ece","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.albums.styl.icloud","hash":"3effc08d31f8b4a65bf963def840d5a9899e314f","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.archive.styl.icloud","hash":"86f3944abe16b9b9920448ca59affdb2baeeb1ba","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.article.styl.icloud","hash":"562a727725584427a94b0e10472afca05235dd8f","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.articles.styl.icloud","hash":"61fe7b4d700490ce3b56a1d60037cb19ce80eb24","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.categories.styl.icloud","hash":"689fcd5065edc375aa49cbecdc2028dc53ec0d1b","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.float.styl.icloud","hash":"64c14d1fd3718da525c8299b31ec47c5b2a231f1","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.footer.styl.icloud","hash":"5bacb1caba59576f3b31371ef80e37d6fc2c0019","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.gallery.styl.icloud","hash":"7bd91e3af6f7f6d62810939a1a0b5fa3ce7f0428","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.gitalk.styl.icloud","hash":"4453e7b3b148e41c9990d097153c9d732523c9d4","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.highlight.styl.icloud","hash":"3ccd744dd49223d84c627c3a89fe84bf64fb6d6f","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.justifiedGallery.styl.icloud","hash":"b82fa9e1898ba783965c9e6a2f381f5fe5cac986","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.layou.styl.icloud","hash":"f5aafc9ee9cbd397301aaffa62f249e8cf74e90e","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.lists.styl.icloud","hash":"9b55ea50ec302dbf7a85ebd977bd12a7efc3bfe7","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.navbar.styl.icloud","hash":"d6dd30426c724f05bad53a6d1ab42ed5f141303f","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.ocean.styl.icloud","hash":"54a8be77572eb3647b0a99a01eec6eca7a1b7f0f","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.pace.styl.icloud","hash":"347575b475be3bab95f6f3becf27a9d6819eb8f8","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.search.styl.icloud","hash":"585fa191854cf7bfefa13435b0c968f33b638940","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.tag.styl.icloud","hash":"0a2dbf79a4f74c466b031f21726ba9d6af9ca4c4","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.tocbot.styl.icloud","hash":"40e315a08de8cb71602568cca54726f91e7f0d78","modified":1581765882000},{"_id":"themes/ocean/source/css/_partial/.totop.styl.icloud","hash":"26d72d8a38814379513fee9b7f426ecc134dcf3a","modified":1581765882000},{"_id":"themes/ocean/source/css/feathericon/.feathericon.eot.icloud","hash":"423dd362fd68f4502d1dc9dfd36b2a1d2d2206f6","modified":1581765882000},{"_id":"themes/ocean/source/css/feathericon/.feathericon.svg.icloud","hash":"99a68f9b43a627ccaac1db754e9e11c8eb2e99cb","modified":1581765882000},{"_id":"themes/ocean/source/css/feathericon/.feathericon.ttf.icloud","hash":"87760320f316f9ba8f1baea0bf7dacd3891d5e03","modified":1581765882000},{"_id":"themes/ocean/source/css/feathericon/.feathericon.woff.icloud","hash":"ae15da01944ea2ea3e58f15d94f516ae05398c7c","modified":1581765882000},{"_id":"themes/ocean/source/css/feathericon/.feathericon.woff2.icloud","hash":"8efd7867fed300f1c06fca20f5bbd214361bf3cc","modified":1581765882000},{"_id":"themes/ocean/source/images/ocean/.ocean.mp4.icloud","hash":"0e09059d44b74ca2d841e805c38aaa55f5a9f0a8","modified":1581765882000},{"_id":"themes/ocean/source/images/ocean/.ocean.ogv.icloud","hash":"e8d9124f9e828ff3d3e7f51fce010929765ffdf7","modified":1581765882000},{"_id":"themes/ocean/source/images/ocean/.ocean.png.icloud","hash":"c3458baae71983b1e9574a92233aa22e1cd7b16e","modified":1581765882000},{"_id":"themes/ocean/source/images/ocean/.ocean.webm.icloud","hash":"e2f9f4cd6edaaaa7c574048be2c580736a814263","modified":1581765882000},{"_id":"themes/ocean/source/images/ocean/.overlay-hero.png.icloud","hash":"bd64c5e73ff83b87ddb1cffd4bb7ef9a60152b5b","modified":1581765882000},{"_id":"source/image/2020-09-089.00.04.png","hash":"922d79ce9e5edf85b27e8f8ef97960091012a85a","modified":1599566411677},{"_id":"source/image/스크린샷 2021-01-10 오후 9.04.40.png","hash":"a55c5f04c6466cf375f941f293b58e895cd3e5a3","modified":1610280282697},{"_id":"source/image/2020-09-015.11.25.png","hash":"51b59d44f31cd730cca6485f54a91305ceda855d","modified":1598947890637},{"_id":"source/image/2020-09-015.31.51.png","hash":"c36f45a78fd8405985a217abd0cf09ddbd332e80","modified":1598949117206},{"_id":"source/image/2020-08-242.50.59.png","hash":"79ba767fd557dd0162a5dd53d5381a88d653ff7c","modified":1598205065521},{"_id":"source/image/2020-09-015.49.10.png","hash":"dbebbcb6f60943bfc2a994d7d7d723fe1c7f4e85","modified":1598950156377},{"_id":"source/image/2020-10-0111.04.33.png","hash":"5a30eb814fc8584ead762c5222ad3e576aeef638","modified":1601561079610},{"_id":"source/image/스크린샷 2020-10-01 오후 11.33.07.png","hash":"293411934e2112a86b59004a815bbb4c96d812a6","modified":1601562793060},{"_id":"source/image/스크린샷 2021-01-06 오후 11.30.50.png","hash":"d577b580055e80c4272fd8398aa685392623483e","modified":1609943455835},{"_id":"source/image/스크린샷 2021-01-06 오후 11.59.58.png","hash":"f5fccb6d4b50f5078873fd26cd040fb82c75e744","modified":1609945203859},{"_id":"source/image/스크린샷 2021-01-10 오후 3.18.56.png","hash":"7c06da4a7d0c2039f26b0c13140b702a35a5c41c","modified":1610259541580},{"_id":"source/image/스크린샷 2021-01-10 오후 3.07.46.png","hash":"873d3652c2f7bca6dd5bbf784116109dfb04fcda","modified":1610258872059},{"_id":"source/image/스크린샷 2021-01-13 오전 10.48.29.png","hash":"91708ab9c04f12189d68a5b4428f861b51bc6d9f","modified":1610503542859},{"_id":"source/image/스크린샷 2020-10-01 오후 11.34.10.png","hash":"36b509666f13e87bde582282a26159e9595336d7","modified":1601562855873},{"_id":"source/image/image-20201231163725437.png","hash":"97d3722e2a18bddbd7666c0dc5a424b4b27f17d9","modified":1609400245437},{"_id":"source/image/스크린샷 2020-08-04 오후 5.57.11.png","hash":"f2f963e7e5168406e75a5c801ad4ecf5f4a75f98","modified":1596531437428},{"_id":"source/image/스크린샷 2020-10-01 오후 9.31.47.png","hash":"08b3035f8eeec523827e24558a37c560503cb5b7","modified":1601555561477},{"_id":"source/image/2020-09-088.58.10.png","hash":"e9156e5aa663a51e220f9d2e1f8ff82cb298603b","modified":1599566296199},{"_id":"source/image/2020-09-015.14.22.png","hash":"0e75bf6dc12a5413d2e211192be219bfbda0ba83","modified":1598948067823},{"_id":"source/image/KakaoTalk_20200323_224007711.png","hash":"951d5618f5d64f5cab2c5f076197cf8816671e6c","modified":1584975888000},{"_id":"source/image/2020-09-015.41.00.png","hash":"332126dcdc6cab13abdb9f5d37b632406a81b0d0","modified":1598949666076},{"_id":"source/image/2020-09-086.32.13.png","hash":"1f802aaf14bf600807e09911469e7bc89e332e8d","modified":1599557539498},{"_id":"public/2021/02/09/backjoon-1525/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/02/09/backjoon-15654/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/02/09/backjoon-15649/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/02/09/backjoon-15651/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/02/09/programmers- Immigration/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/02/09/programmers-func-develop/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/02/09/programmers-phonebook/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/02/09/programmers-price-of-stock/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/02/09/python-ceil/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/02/08/boj-2564/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/02/08/swea-5215/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/01/28/boj-9657/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/01/21/swea-1221/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2021/01/16/swea-2056/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/12/30/swea-2043/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/12/10/programmers-skill-checks-1/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/10/22/C++Sort/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/08/27/programmers-priority-queue/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/08/27/python-heapq/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/08/24/android-base64/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/08/19/backjoon-12761/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/08/14/android-hash-key/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/08/11/backjoon-9372/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/08/08/SSL01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/06/15/backjoon-1037/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/05/17/backjoon-9252/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/05/11/backjoon-9251/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/05/09/backjoon-1912/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/05/05/python-combinations/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/05/02/backjoon-14502/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/05/01/programmers-tile/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/04/26/programmers-n-dp/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/04/19/backjoon-11047/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/04/15/programmers-clothes/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/04/13/programmers-network/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/23/python-underbar/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/23/backjoon-2178/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/23/backjoon-dfs-bfs/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/14/algorithm-hash/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/14/programmers-participant-not-completion/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/12/angular-activatedRoute/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/12/angular-routerlink/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/12/angular-create-approutingmodule/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/11/angular-sync-to-async-observable/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/11/angular-cli-class/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/11/angular-dependency-injection/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/11/angular-cli-overview/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/10/angular-class-binding/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/10/angular-ngif/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/10/angular-event-binding/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/07/python-indexing-slicing/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/03/04/programmers-carpet/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/02/25/programmers-scoville/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/02/22/programmers-kth-number/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/02/22/python-array-cutting/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/02/22/python-array-sort/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/02/15/programmers-top/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/2020/02/15/programmers-printer/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/7/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/9/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/10/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/11/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/page/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/page/6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/page/7/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/page/8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/page/9/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/03/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/03/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/03/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/04/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/05/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/05/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/06/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/08/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/08/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/10/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/12/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2021/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2021/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2021/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2021/01/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2021/02/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2021/02/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2021/02/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/02/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/archives/2020/03/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/page/6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/C/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/보안/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/알고리즘설명/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/안드로이드/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/앵귤러/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/앵귤러/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/알고리즘/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/알고리즘/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/알고리즘/page/3/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/알고리즘/page/4/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/알고리즘/page/5/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/알고리즘/page/6/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/알고리즘/page/7/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/알고리즘/page/8/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/파이썬/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/tags/파이썬/page/2/index.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1612810020382},{"_id":"public/image/2020-09-011.png","hash":"ee6ec17eaf72057bc169459a0e5737d3b554c3a8","modified":1612810020382},{"_id":"public/image/2020-09-015.13.32.png","hash":"eab456a7320e27737c15b94555b7ecc74a867c60","modified":1612810020382},{"_id":"public/image/2020-09-015.23.17.png","hash":"c5bb52afdd77b2d879c3ca73256e85e6c360db81","modified":1612810020382},{"_id":"public/image/2020-09-015.24.23.png","hash":"901d910c1d18988d40a67c5c02a729813bf1c4e5","modified":1612810020382},{"_id":"public/image/2020-09-015.29.14.png","hash":"3481a328e3a532a130932677b978597a522b59a4","modified":1612810020382},{"_id":"public/image/2020-09-015.42.09.png","hash":"8aaa8a5fdf2c4ddf05603661d740d85c456797b0","modified":1612810020382},{"_id":"public/image/2020-09-021.20.21.png","hash":"456ccfcf9a0d9ae367ab1994bd5790506feca0d4","modified":1612810020382},{"_id":"public/image/image-20200804175123560.png","hash":"c10829481dfc5c012af5283bc2b3b6c8ea1833f5","modified":1612810020382},{"_id":"public/image/image-20210208224412843.png","hash":"192ddd8f0972d5d05f28d17a731842869f690d94","modified":1612810020382},{"_id":"public/image/스크린샷 2020-10-01 오후 11.17.47.png","hash":"7af85435abfeb6077e059ff135bd9c005c1f19b8","modified":1612810020382},{"_id":"public/image/스크린샷 2020-10-01 오후 11.23.26.png","hash":"42b852bcdd70dd5c761caadcf8659a06456f021e","modified":1612810020382},{"_id":"public/image/image-20210208224433936.png","hash":"989526a5e4f75b81b6f7ffe86d19bb0e3106e06e","modified":1612810020382},{"_id":"public/image/스크린샷 2020-12-02 오전 1.28.47.png","hash":"dde102197a4106fb1ffd5e9f326a7cfa7b3075ac","modified":1612810020382},{"_id":"public/image/스크린샷 2020-10-31 오전 5.13.17.png","hash":"ffe4c4fbe9a7e08fdd442009a17446b33d072624","modified":1612810020382},{"_id":"public/image/스크린샷 2020-12-02 오전 1.23.00.png","hash":"0088136af689a09fcda12bdeb6d42d5ad7be8251","modified":1612810020382},{"_id":"public/image/2020-08-242.07.26.png","hash":"5adf3f5e7db6e72f81da13c1c8ab40c92917f88a","modified":1612810020382},{"_id":"public/image/2020-08-242.10.47.png","hash":"4bdfe4a5af509ff22849563d69324b7362016e44","modified":1612810020382},{"_id":"public/image/2020-09-015.08.13.png","hash":"61cdecc8db34977780fada845b3474a972431df5","modified":1612810020382},{"_id":"public/image/스크린샷 2021-01-06 오후 11.43.16.png","hash":"26c7e9a2771acbc8edd50d17cf5731bf108709d5","modified":1612810020382},{"_id":"public/image/스크린샷 2021-01-06 오후 11.52.25.png","hash":"99b4c73d36b8faee658eeb8c97cb1fe07bee9324","modified":1612810020382},{"_id":"public/image/스크린샷 2021-01-13 오전 11.04.56.png","hash":"8fe0036bfbee1ce7060e7ef23d2f7422122ca9e9","modified":1612810020382},{"_id":"public/image/2020-10-0111.04.33.png","hash":"5a30eb814fc8584ead762c5222ad3e576aeef638","modified":1612810020382},{"_id":"public/image/스크린샷 2021-01-10 오후 9.04.40.png","hash":"a55c5f04c6466cf375f941f293b58e895cd3e5a3","modified":1612810020382},{"_id":"public/image/2020-08-242.50.59.png","hash":"79ba767fd557dd0162a5dd53d5381a88d653ff7c","modified":1612810020382},{"_id":"public/image/2020-09-015.31.51.png","hash":"c36f45a78fd8405985a217abd0cf09ddbd332e80","modified":1612810020382},{"_id":"public/image/2020-09-089.00.04.png","hash":"922d79ce9e5edf85b27e8f8ef97960091012a85a","modified":1612810020382},{"_id":"public/image/image-20201231163725437.png","hash":"97d3722e2a18bddbd7666c0dc5a424b4b27f17d9","modified":1612810020382},{"_id":"public/image/스크린샷 2021-01-06 오후 11.30.50.png","hash":"d577b580055e80c4272fd8398aa685392623483e","modified":1612810020382},{"_id":"public/image/스크린샷 2021-01-10 오후 3.18.56.png","hash":"7c06da4a7d0c2039f26b0c13140b702a35a5c41c","modified":1612810020382},{"_id":"public/image/스크린샷 2021-01-13 오전 10.48.29.png","hash":"91708ab9c04f12189d68a5b4428f861b51bc6d9f","modified":1612810020382},{"_id":"public/image/2020-09-015.11.25.png","hash":"51b59d44f31cd730cca6485f54a91305ceda855d","modified":1612810020382},{"_id":"public/image/2020-09-015.49.10.png","hash":"dbebbcb6f60943bfc2a994d7d7d723fe1c7f4e85","modified":1612810020382},{"_id":"public/image/스크린샷 2020-08-04 오후 5.57.11.png","hash":"f2f963e7e5168406e75a5c801ad4ecf5f4a75f98","modified":1612810020382},{"_id":"public/image/스크린샷 2020-10-01 오후 11.33.07.png","hash":"293411934e2112a86b59004a815bbb4c96d812a6","modified":1612810020382},{"_id":"public/image/스크린샷 2020-10-01 오후 9.31.47.png","hash":"08b3035f8eeec523827e24558a37c560503cb5b7","modified":1612810020382},{"_id":"public/image/스크린샷 2021-01-10 오후 3.07.46.png","hash":"873d3652c2f7bca6dd5bbf784116109dfb04fcda","modified":1612810020382},{"_id":"public/image/스크린샷 2021-01-06 오후 11.59.58.png","hash":"f5fccb6d4b50f5078873fd26cd040fb82c75e744","modified":1612810020382},{"_id":"public/image/스크린샷 2020-10-01 오후 11.34.10.png","hash":"36b509666f13e87bde582282a26159e9595336d7","modified":1612810020382},{"_id":"public/image/2020-09-015.14.22.png","hash":"0e75bf6dc12a5413d2e211192be219bfbda0ba83","modified":1612810020382},{"_id":"public/image/2020-09-088.58.10.png","hash":"e9156e5aa663a51e220f9d2e1f8ff82cb298603b","modified":1612810020382},{"_id":"public/image/2020-09-015.41.00.png","hash":"332126dcdc6cab13abdb9f5d37b632406a81b0d0","modified":1612810020382},{"_id":"public/image/KakaoTalk_20200323_224007711.png","hash":"951d5618f5d64f5cab2c5f076197cf8816671e6c","modified":1612810020382},{"_id":"public/image/2020-09-086.32.13.png","hash":"1f802aaf14bf600807e09911469e7bc89e332e8d","modified":1612810020382}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"C++ STL Sort","date":"2020-10-22T08:29:21.000Z","_content":"\n> 평소 알고리즘 문제를 파이썬으로 푸는데 코딩테스트에서 파이썬을 지원해주지 않아서 급하게 C++을 공부하고 시험을 봤다. 결과는 sort함수 사용법을 잘 몰라서 한문제를 풀지 못했다 ㅠㅠ 그래서 공부 겸 정리 ! \n\n# 정의\n\n알고리즘 헤더파일에서 제공하는 STL로써 범위내에서 주어진 원소들을 정렬한다. 정렬하는 방식은 오름차순, 내림차순 등이 있으며 Default는 오름차순이고, 동일한 원소에 대해서는 순서가 보장되지 않는다. 숫자뿐만 아니라 대소 비교가 가능한 모든 원소(char, string 등)를 정렬할 수 있다.\n\n<br>\n\n# 사용법\n\n```C++\ntemplate <class RandomAccessIterator>\n  void sort (RandomAccessIterator first, RandomAccessIterator last);\ntemplate <class RandomAccessIterator, class Compare>\n  void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp);\n```\n\n* 2개 또는 3개의 argument를 필요로 한다. `first`와 `last`는 iterator로써 범위를 나타낸다. 두 **개의 객체를 비교해서 `first`가 `last`보다 작으면 true 그렇지 않다면 false를 리턴한다.** \n\n* `comp`에는 `greater<>()` 와 `less<>()`가 들어갈 수 있다. (예제는 아래에)\n\n  * `greater<>()`\n\n    ```C++\n    // greater는 첫번째 인자가 두번째 인자보다 크면 true를 반환한다.\n    cout << greater<int>()(10, 20) << endl; // true\n    cout << greater<int>()(20, 10) << endl; // false\n    ```\n\n  * `less<>()`\n\n    ```C++\n    // less는 첫번째 인자가 두번째 인자보다 크면 true를 반환한다.\n    cout << less<int>()(10, 20) << endl; // false\n    cout << less<int>()(20, 10) << endl; // true\n    ```\n\n<br>\n\n# 소스예제\n\n* **기본 정렬 예제**\n\n  ```C++\n  #include <iostream>\n  #include <algorithm>\n  \n  using namespace std;\n  \n  int main(){\n  \n      int arr[5];\n      arr[0] = 0;\n      arr[1] = 4;\n      arr[2] = 3;\n      arr[3] = 1;\n      arr[4] = 5;\n      sort(arr, arr + 5); // Default : 오름차순\n  \n      for (int i = 0; i < 5; i++)\n          cout << arr[i] << endl;\n      return 0;\n  }\n  ```\n\n  결과\n\n  ```C++\n  0\n  1\n  2\n  3\n  4\n  5\n  ```\n\n* **정렬(greater)**\n\n  ```C++\n  #include <iostream>\n  #include <algorithm>\n  \n  using namespace std;\n  \n  int main(){\n  \n      int arr[5];\n      arr[0] = 0;\n      arr[1] = 4;\n      arr[2] = 3;\n      arr[3] = 1;\n      arr[4] = 5;\n      sort(arr, arr + 5, greater<int>());\n  \n      for (int i = 0; i < 5; i++)\n          cout << arr[i] << endl;\n      return 0;\n  }\n  ```\n\n  결과\n\n  ```C++\n  5\n  4\n  3\n  2\n  1\n  0\n  ```\n\n* **정렬(less)**\n\n  ```c++\n  #include <iostream>\n  #include <algorithm>\n  \n  using namespace std;\n  \n  int main(){\n  \n      int arr[5];\n      arr[0] = 0;\n      arr[1] = 4;\n      arr[2] = 3;\n      arr[3] = 1;\n      arr[4] = 5;\n      sort(arr, arr + 5, less<int>());\n  \n      for (int i = 0; i < 5; i++)\n          cout << arr[i] << endl;\n      return 0;\n  ```\n\n  결과\n\n  ```C++\n  0\n  1\n  2\n  3\n  4\n  5\n  ```\n\n* **사용자 정의 정렬 (이름을 기준으로 내림차순 정렬)**\n\n  ```C++\n  #include <iostream>\n  #include <vector>\n  #include <algorithm>\n  #include <string>\n  \n  using namespace std;\n  \n  class Person{\n  public:\n      string name;\n      int age;\n      Person(string name, int age){\n          this->name = name;\n          this->age = age;\n      }\n  };\n  \n  bool cmp(const Person &a, const Person &b){\n      return a.name > b.name; // 부등호를 바꾸면 오름차순 정렬\n  }\n  \n  int main(){\n      vector<Person> v;\n      v.push_back(Person(\"Ace\", 22));\n      v.push_back(Person(\"Luffy\", 28));\n      v.push_back(Person(\"Zoro\", 26));\n      v.push_back(Person(\"Robin\", 25));\n      v.push_back(Person(\"Brook\", 40));\n      sort(v.begin(), v.end(), cmp);\n      for (int i = 0; i < v.size(); i++)\n          cout << v[i].age  << \", \" <<  v[i].name << endl;\n  }\n  ```\n\n  결과\n\n  ```C++\n  26, Zoro\n  25, Robin\n  28, Luffy\n  40, Brook\n  22, Ace\n  ```\n\n* **사용자 정의 정렬(숫자를 기준으로 오름차순 정렬)**\n\n  ```C++\n  #include <iostream>\n  #include <algorithm>\n  \n  using namespace std;\n  \n  bool asc(int a, int b) {\n    return a < b;\n  }\n  \n  int main(void){\n    int data[5] = {2, 3, 4, 1, 5};\n    \n    sort(data, data+5, asc);\n    for(int i=0; i< 5; i++){\n      cout << data[i] << endl;\n    }\n    return 0;\n  }\n  ```\n\n  결과\n\n  ```C++\n  1\n  2\n  3\n  4\n  5\n  ```\n\n  <br>\n\n출처 : (https://www.acmicpc.net/blog/view/22) , (https://hongku.tistory.com/153), (https://hyeonstorage.tistory.com/315)","source":"_posts/C++Sort.md","raw":"---\ntitle: \"C++ STL Sort\"\ndate: 2020-10-22 17:29:21\ntag: C++\n---\n\n> 평소 알고리즘 문제를 파이썬으로 푸는데 코딩테스트에서 파이썬을 지원해주지 않아서 급하게 C++을 공부하고 시험을 봤다. 결과는 sort함수 사용법을 잘 몰라서 한문제를 풀지 못했다 ㅠㅠ 그래서 공부 겸 정리 ! \n\n# 정의\n\n알고리즘 헤더파일에서 제공하는 STL로써 범위내에서 주어진 원소들을 정렬한다. 정렬하는 방식은 오름차순, 내림차순 등이 있으며 Default는 오름차순이고, 동일한 원소에 대해서는 순서가 보장되지 않는다. 숫자뿐만 아니라 대소 비교가 가능한 모든 원소(char, string 등)를 정렬할 수 있다.\n\n<br>\n\n# 사용법\n\n```C++\ntemplate <class RandomAccessIterator>\n  void sort (RandomAccessIterator first, RandomAccessIterator last);\ntemplate <class RandomAccessIterator, class Compare>\n  void sort (RandomAccessIterator first, RandomAccessIterator last, Compare comp);\n```\n\n* 2개 또는 3개의 argument를 필요로 한다. `first`와 `last`는 iterator로써 범위를 나타낸다. 두 **개의 객체를 비교해서 `first`가 `last`보다 작으면 true 그렇지 않다면 false를 리턴한다.** \n\n* `comp`에는 `greater<>()` 와 `less<>()`가 들어갈 수 있다. (예제는 아래에)\n\n  * `greater<>()`\n\n    ```C++\n    // greater는 첫번째 인자가 두번째 인자보다 크면 true를 반환한다.\n    cout << greater<int>()(10, 20) << endl; // true\n    cout << greater<int>()(20, 10) << endl; // false\n    ```\n\n  * `less<>()`\n\n    ```C++\n    // less는 첫번째 인자가 두번째 인자보다 크면 true를 반환한다.\n    cout << less<int>()(10, 20) << endl; // false\n    cout << less<int>()(20, 10) << endl; // true\n    ```\n\n<br>\n\n# 소스예제\n\n* **기본 정렬 예제**\n\n  ```C++\n  #include <iostream>\n  #include <algorithm>\n  \n  using namespace std;\n  \n  int main(){\n  \n      int arr[5];\n      arr[0] = 0;\n      arr[1] = 4;\n      arr[2] = 3;\n      arr[3] = 1;\n      arr[4] = 5;\n      sort(arr, arr + 5); // Default : 오름차순\n  \n      for (int i = 0; i < 5; i++)\n          cout << arr[i] << endl;\n      return 0;\n  }\n  ```\n\n  결과\n\n  ```C++\n  0\n  1\n  2\n  3\n  4\n  5\n  ```\n\n* **정렬(greater)**\n\n  ```C++\n  #include <iostream>\n  #include <algorithm>\n  \n  using namespace std;\n  \n  int main(){\n  \n      int arr[5];\n      arr[0] = 0;\n      arr[1] = 4;\n      arr[2] = 3;\n      arr[3] = 1;\n      arr[4] = 5;\n      sort(arr, arr + 5, greater<int>());\n  \n      for (int i = 0; i < 5; i++)\n          cout << arr[i] << endl;\n      return 0;\n  }\n  ```\n\n  결과\n\n  ```C++\n  5\n  4\n  3\n  2\n  1\n  0\n  ```\n\n* **정렬(less)**\n\n  ```c++\n  #include <iostream>\n  #include <algorithm>\n  \n  using namespace std;\n  \n  int main(){\n  \n      int arr[5];\n      arr[0] = 0;\n      arr[1] = 4;\n      arr[2] = 3;\n      arr[3] = 1;\n      arr[4] = 5;\n      sort(arr, arr + 5, less<int>());\n  \n      for (int i = 0; i < 5; i++)\n          cout << arr[i] << endl;\n      return 0;\n  ```\n\n  결과\n\n  ```C++\n  0\n  1\n  2\n  3\n  4\n  5\n  ```\n\n* **사용자 정의 정렬 (이름을 기준으로 내림차순 정렬)**\n\n  ```C++\n  #include <iostream>\n  #include <vector>\n  #include <algorithm>\n  #include <string>\n  \n  using namespace std;\n  \n  class Person{\n  public:\n      string name;\n      int age;\n      Person(string name, int age){\n          this->name = name;\n          this->age = age;\n      }\n  };\n  \n  bool cmp(const Person &a, const Person &b){\n      return a.name > b.name; // 부등호를 바꾸면 오름차순 정렬\n  }\n  \n  int main(){\n      vector<Person> v;\n      v.push_back(Person(\"Ace\", 22));\n      v.push_back(Person(\"Luffy\", 28));\n      v.push_back(Person(\"Zoro\", 26));\n      v.push_back(Person(\"Robin\", 25));\n      v.push_back(Person(\"Brook\", 40));\n      sort(v.begin(), v.end(), cmp);\n      for (int i = 0; i < v.size(); i++)\n          cout << v[i].age  << \", \" <<  v[i].name << endl;\n  }\n  ```\n\n  결과\n\n  ```C++\n  26, Zoro\n  25, Robin\n  28, Luffy\n  40, Brook\n  22, Ace\n  ```\n\n* **사용자 정의 정렬(숫자를 기준으로 오름차순 정렬)**\n\n  ```C++\n  #include <iostream>\n  #include <algorithm>\n  \n  using namespace std;\n  \n  bool asc(int a, int b) {\n    return a < b;\n  }\n  \n  int main(void){\n    int data[5] = {2, 3, 4, 1, 5};\n    \n    sort(data, data+5, asc);\n    for(int i=0; i< 5; i++){\n      cout << data[i] << endl;\n    }\n    return 0;\n  }\n  ```\n\n  결과\n\n  ```C++\n  1\n  2\n  3\n  4\n  5\n  ```\n\n  <br>\n\n출처 : (https://www.acmicpc.net/blog/view/22) , (https://hongku.tistory.com/153), (https://hyeonstorage.tistory.com/315)","slug":"C++Sort","published":1,"updated":"2021-02-08T18:25:02.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0iw0000f9c9cbiu2oab","content":"<blockquote>\n<p>평소 알고리즘 문제를 파이썬으로 푸는데 코딩테스트에서 파이썬을 지원해주지 않아서 급하게 C++을 공부하고 시험을 봤다. 결과는 sort함수 사용법을 잘 몰라서 한문제를 풀지 못했다 ㅠㅠ 그래서 공부 겸 정리 ! </p>\n</blockquote>\n<h1 id=\"정의\"><a href=\"#정의\" class=\"headerlink\" title=\"정의\"></a>정의</h1><p>알고리즘 헤더파일에서 제공하는 STL로써 범위내에서 주어진 원소들을 정렬한다. 정렬하는 방식은 오름차순, 내림차순 등이 있으며 Default는 오름차순이고, 동일한 원소에 대해서는 순서가 보장되지 않는다. 숫자뿐만 아니라 대소 비교가 가능한 모든 원소(char, string 등)를 정렬할 수 있다.</p>\n<br>\n\n<h1 id=\"사용법\"><a href=\"#사용법\" class=\"headerlink\" title=\"사용법\"></a>사용법</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomAccessIterator</span>&gt;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span> <span class=\"params\">(RandomAccessIterator first, RandomAccessIterator last)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomAccessIterator</span>, <span class=\"keyword\">class</span> <span class=\"title\">Compare</span>&gt;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span> <span class=\"params\">(RandomAccessIterator first, RandomAccessIterator last, Compare comp)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>2개 또는 3개의 argument를 필요로 한다. <code>first</code>와 <code>last</code>는 iterator로써 범위를 나타낸다. 두 <strong>개의 객체를 비교해서 <code>first</code>가 <code>last</code>보다 작으면 true 그렇지 않다면 false를 리턴한다.</strong> </p>\n</li>\n<li><p><code>comp</code>에는 <code>greater&lt;&gt;()</code> 와 <code>less&lt;&gt;()</code>가 들어갈 수 있다. (예제는 아래에)</p>\n<ul>\n<li><p><code>greater&lt;&gt;()</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// greater는 첫번째 인자가 두번째 인자보다 크면 true를 반환한다.</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; greater&lt;<span class=\"keyword\">int</span>&gt;()(<span class=\"number\">10</span>, <span class=\"number\">20</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; greater&lt;<span class=\"keyword\">int</span>&gt;()(<span class=\"number\">20</span>, <span class=\"number\">10</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>less&lt;&gt;()</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// less는 첫번째 인자가 두번째 인자보다 크면 true를 반환한다.</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; less&lt;<span class=\"keyword\">int</span>&gt;()(<span class=\"number\">10</span>, <span class=\"number\">20</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; less&lt;<span class=\"keyword\">int</span>&gt;()(<span class=\"number\">20</span>, <span class=\"number\">10</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<br>\n\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"소스예제\"><a href=\"#소스예제\" class=\"headerlink\" title=\"소스예제\"></a>소스예제</h1><ul>\n<li><p><strong>기본 정렬 예제</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>];</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">4</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">    sort(arr, arr + <span class=\"number\">5</span>); <span class=\"comment\">// Default : 오름차순</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>결과</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>정렬(greater)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>];</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">4</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">    sort(arr, arr + <span class=\"number\">5</span>, greater&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>결과</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>정렬(less)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>];</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">4</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">    sort(arr, arr + <span class=\"number\">5</span>, less&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>결과</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>사용자 정의 정렬 (이름을 기준으로 내림차순 정렬)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    Person(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> Person &amp;a, <span class=\"keyword\">const</span> Person &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.name &gt; b.name; <span class=\"comment\">// 부등호를 바꾸면 오름차순 정렬</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;Person&gt; v;</span><br><span class=\"line\">    v.push_back(Person(<span class=\"string\">&quot;Ace&quot;</span>, <span class=\"number\">22</span>));</span><br><span class=\"line\">    v.push_back(Person(<span class=\"string\">&quot;Luffy&quot;</span>, <span class=\"number\">28</span>));</span><br><span class=\"line\">    v.push_back(Person(<span class=\"string\">&quot;Zoro&quot;</span>, <span class=\"number\">26</span>));</span><br><span class=\"line\">    v.push_back(Person(<span class=\"string\">&quot;Robin&quot;</span>, <span class=\"number\">25</span>));</span><br><span class=\"line\">    v.push_back(Person(<span class=\"string\">&quot;Brook&quot;</span>, <span class=\"number\">40</span>));</span><br><span class=\"line\">    sort(v.begin(), v.end(), cmp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.size(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; v[i].age  &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt;  v[i].name &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>결과</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">26</span>, Zoro</span><br><span class=\"line\"><span class=\"number\">25</span>, Robin</span><br><span class=\"line\"><span class=\"number\">28</span>, Luffy</span><br><span class=\"line\"><span class=\"number\">40</span>, Brook</span><br><span class=\"line\"><span class=\"number\">22</span>, Ace</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>사용자 정의 정렬(숫자를 기준으로 오름차순 정렬)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">asc</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a &lt; b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> data[<span class=\"number\">5</span>] = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  sort(data, data+<span class=\"number\">5</span>, asc);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; data[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>결과</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<br>\n\n</li>\n</ul>\n<p>출처 : (<a href=\"https://www.acmicpc.net/blog/view/22\">https://www.acmicpc.net/blog/view/22</a>) , (<a href=\"https://hongku.tistory.com/153\">https://hongku.tistory.com/153</a>), (<a href=\"https://hyeonstorage.tistory.com/315\">https://hyeonstorage.tistory.com/315</a>)</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>평소 알고리즘 문제를 파이썬으로 푸는데 코딩테스트에서 파이썬을 지원해주지 않아서 급하게 C++을 공부하고 시험을 봤다. 결과는 sort함수 사용법을 잘 몰라서 한문제를 풀지 못했다 ㅠㅠ 그래서 공부 겸 정리 ! </p>\n</blockquote>\n<h1 id=\"정의\"><a href=\"#정의\" class=\"headerlink\" title=\"정의\"></a>정의</h1><p>알고리즘 헤더파일에서 제공하는 STL로써 범위내에서 주어진 원소들을 정렬한다. 정렬하는 방식은 오름차순, 내림차순 등이 있으며 Default는 오름차순이고, 동일한 원소에 대해서는 순서가 보장되지 않는다. 숫자뿐만 아니라 대소 비교가 가능한 모든 원소(char, string 등)를 정렬할 수 있다.</p>\n<br>\n\n<h1 id=\"사용법\"><a href=\"#사용법\" class=\"headerlink\" title=\"사용법\"></a>사용법</h1><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomAccessIterator</span>&gt;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span> <span class=\"params\">(RandomAccessIterator first, RandomAccessIterator last)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RandomAccessIterator</span>, <span class=\"keyword\">class</span> <span class=\"title\">Compare</span>&gt;</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">sort</span> <span class=\"params\">(RandomAccessIterator first, RandomAccessIterator last, Compare comp)</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>2개 또는 3개의 argument를 필요로 한다. <code>first</code>와 <code>last</code>는 iterator로써 범위를 나타낸다. 두 <strong>개의 객체를 비교해서 <code>first</code>가 <code>last</code>보다 작으면 true 그렇지 않다면 false를 리턴한다.</strong> </p>\n</li>\n<li><p><code>comp</code>에는 <code>greater&lt;&gt;()</code> 와 <code>less&lt;&gt;()</code>가 들어갈 수 있다. (예제는 아래에)</p>\n<ul>\n<li><p><code>greater&lt;&gt;()</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// greater는 첫번째 인자가 두번째 인자보다 크면 true를 반환한다.</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; greater&lt;<span class=\"keyword\">int</span>&gt;()(<span class=\"number\">10</span>, <span class=\"number\">20</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; greater&lt;<span class=\"keyword\">int</span>&gt;()(<span class=\"number\">20</span>, <span class=\"number\">10</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></li>\n<li><p><code>less&lt;&gt;()</code></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// less는 첫번째 인자가 두번째 인자보다 크면 true를 반환한다.</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; less&lt;<span class=\"keyword\">int</span>&gt;()(<span class=\"number\">10</span>, <span class=\"number\">20</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">cout</span> &lt;&lt; less&lt;<span class=\"keyword\">int</span>&gt;()(<span class=\"number\">20</span>, <span class=\"number\">10</span>) &lt;&lt; <span class=\"built_in\">endl</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<br>\n\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"소스예제\"><a href=\"#소스예제\" class=\"headerlink\" title=\"소스예제\"></a>소스예제</h1><ul>\n<li><p><strong>기본 정렬 예제</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>];</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">4</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">    sort(arr, arr + <span class=\"number\">5</span>); <span class=\"comment\">// Default : 오름차순</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>결과</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>정렬(greater)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>];</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">4</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">    sort(arr, arr + <span class=\"number\">5</span>, greater&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>결과</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">0</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>정렬(less)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> arr[<span class=\"number\">5</span>];</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">1</span>] = <span class=\"number\">4</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">2</span>] = <span class=\"number\">3</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">3</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    arr[<span class=\"number\">4</span>] = <span class=\"number\">5</span>;</span><br><span class=\"line\">    sort(arr, arr + <span class=\"number\">5</span>, less&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<p>결과</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure></li>\n<li><p><strong>사용자 정의 정렬 (이름을 기준으로 내림차순 정렬)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">string</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> age;</span><br><span class=\"line\">    Person(<span class=\"built_in\">string</span> name, <span class=\"keyword\">int</span> age)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;name = name;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>-&gt;age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">cmp</span><span class=\"params\">(<span class=\"keyword\">const</span> Person &amp;a, <span class=\"keyword\">const</span> Person &amp;b)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.name &gt; b.name; <span class=\"comment\">// 부등호를 바꾸면 오름차순 정렬</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;Person&gt; v;</span><br><span class=\"line\">    v.push_back(Person(<span class=\"string\">&quot;Ace&quot;</span>, <span class=\"number\">22</span>));</span><br><span class=\"line\">    v.push_back(Person(<span class=\"string\">&quot;Luffy&quot;</span>, <span class=\"number\">28</span>));</span><br><span class=\"line\">    v.push_back(Person(<span class=\"string\">&quot;Zoro&quot;</span>, <span class=\"number\">26</span>));</span><br><span class=\"line\">    v.push_back(Person(<span class=\"string\">&quot;Robin&quot;</span>, <span class=\"number\">25</span>));</span><br><span class=\"line\">    v.push_back(Person(<span class=\"string\">&quot;Brook&quot;</span>, <span class=\"number\">40</span>));</span><br><span class=\"line\">    sort(v.begin(), v.end(), cmp);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; v.size(); i++)</span><br><span class=\"line\">        <span class=\"built_in\">cout</span> &lt;&lt; v[i].age  &lt;&lt; <span class=\"string\">&quot;, &quot;</span> &lt;&lt;  v[i].name &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>결과</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">26</span>, Zoro</span><br><span class=\"line\"><span class=\"number\">25</span>, Robin</span><br><span class=\"line\"><span class=\"number\">28</span>, Luffy</span><br><span class=\"line\"><span class=\"number\">40</span>, Brook</span><br><span class=\"line\"><span class=\"number\">22</span>, Ace</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>사용자 정의 정렬(숫자를 기준으로 오름차순 정렬)</strong></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">asc</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a &lt; b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> data[<span class=\"number\">5</span>] = &#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">  </span><br><span class=\"line\">  sort(data, data+<span class=\"number\">5</span>, asc);</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; <span class=\"number\">5</span>; i++)&#123;</span><br><span class=\"line\">    <span class=\"built_in\">cout</span> &lt;&lt; data[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>결과</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span></span><br></pre></td></tr></table></figure>\n<br>\n\n</li>\n</ul>\n<p>출처 : (<a href=\"https://www.acmicpc.net/blog/view/22\">https://www.acmicpc.net/blog/view/22</a>) , (<a href=\"https://hongku.tistory.com/153\">https://hongku.tistory.com/153</a>), (<a href=\"https://hyeonstorage.tistory.com/315\">https://hyeonstorage.tistory.com/315</a>)</p>\n"},{"title":"SSL의 동작 방법","date":"2020-08-08T14:32:00.000Z","_content":"\n# SSL의 동작 방법\n\n생활코딩에서 SSL의 동작 방법을 읽으며 내가 이해하기 쉬우려고 정리하였다.\n\n더 정확하고 자세한 정보를 알고 싶거나 HTTPS와 암호화 방법에 대한 사전지식이 없다면 아래 링크를 참고 ! \n\n[ 출처: https://opentutorials.org/course/228/4894 ]\n\n### 1. 악수 (handshake)\n\n> 실제 데이터를 주고 받기 전 client와 server가 나누는 일종의 인사\n\n이 과정을 통해 서로 상대방이 존재하는지, 데이터를 주고 받기 위해 어떤 방법을 사용할지 파악한다.\n\n1. client hello\n   - client측에서 생성한 랜덤 데이터\n   - client가 지원하는 암호화 방식들\n   - 세션 아이디\n2. server hello \n   - server 측에서 생성한 랜덤 데이터\n   - server가 선택한 client의 암호화 방식\n   - 인증서\n3. client는 server의 인증서가 CA에 의해서 발급된 것인지 확인하기 위해 client에 내장된 CA 리스트를 확인\n   - client에 내장된 CA의 공개키를 이용하여 인증서 복호화 -> 복호화에 성공했다면 인증서는 CA의 개인키로 암호화된 문서임이 암시적으로 보증된다.\n4. client는 client 랜덤 데이터 + server 랜덤 데이터 = pre master secret 생성\n5. client가 server의 공개키를 이용하여 pre master secret값을 암호화하여 server에 전달 (공개키 방식)\n6. server는 비공개키를 이용하여 pre master secret값을 복호화 한 후 master secret값으로 만듬 (공개키 방식)\n   - master secret은 session key를 생성한다.\n   - 이 session key 값을 이용하여 서버와 클라이언트는 데이터를 대칭키 방식으로 암호화 한 후에 주고 받는다.\n7. client와 server는 핸드쉐이크 단계의 종료를 서로에게 알림\n\n\n\n### 2. 세션\n\n> 실제로 서버와 클라이언트가 데이터를 주고 받는 단계\n\n이 단계에서 정보를 상대방에 전송하기 전 session key 값을 이용하여 대칭키 방식으로 암호화 한다. \n\n- 대칭키 방식을 사용하는 이유 \n\n  공개키 방식의 많은 컴퓨터 파워 사용, 공개키 사용시 많은 접속이 몰려 서버의 비용 증가 \n\n- SSL이 대칭키와 공개키를 조합해서 사용하는 이유\n\n  대칭키를 상대에게 전송할 때 암호화 되지 않은 인터넷을 통해서 키를 전송하는 것이 위험하기 때문.\n\n따라서, 속도는 느리지만 데이터를 안전하게 주고 받을 수 있는 **공개키 방식으로 대칭키를 암호화하고, 실제 데이터를 주고 받을 때는 대칭키를 이용해서 데이터를 주고 받는다.**\n\n\n\n### 3. 세션종료\n\n데이터의 전송이 끝나면 SSL 통신이 끝났음을 서로에게 알려준다. 이 때 통신에서 사용한 대칭키인 **session key를 폐기**한다.","source":"_posts/SSL01.md","raw":"---\ntitle: \"SSL의 동작 방법\"\ndate: 2020-08-08 23:32:00\ntags: 보안\n---\n\n# SSL의 동작 방법\n\n생활코딩에서 SSL의 동작 방법을 읽으며 내가 이해하기 쉬우려고 정리하였다.\n\n더 정확하고 자세한 정보를 알고 싶거나 HTTPS와 암호화 방법에 대한 사전지식이 없다면 아래 링크를 참고 ! \n\n[ 출처: https://opentutorials.org/course/228/4894 ]\n\n### 1. 악수 (handshake)\n\n> 실제 데이터를 주고 받기 전 client와 server가 나누는 일종의 인사\n\n이 과정을 통해 서로 상대방이 존재하는지, 데이터를 주고 받기 위해 어떤 방법을 사용할지 파악한다.\n\n1. client hello\n   - client측에서 생성한 랜덤 데이터\n   - client가 지원하는 암호화 방식들\n   - 세션 아이디\n2. server hello \n   - server 측에서 생성한 랜덤 데이터\n   - server가 선택한 client의 암호화 방식\n   - 인증서\n3. client는 server의 인증서가 CA에 의해서 발급된 것인지 확인하기 위해 client에 내장된 CA 리스트를 확인\n   - client에 내장된 CA의 공개키를 이용하여 인증서 복호화 -> 복호화에 성공했다면 인증서는 CA의 개인키로 암호화된 문서임이 암시적으로 보증된다.\n4. client는 client 랜덤 데이터 + server 랜덤 데이터 = pre master secret 생성\n5. client가 server의 공개키를 이용하여 pre master secret값을 암호화하여 server에 전달 (공개키 방식)\n6. server는 비공개키를 이용하여 pre master secret값을 복호화 한 후 master secret값으로 만듬 (공개키 방식)\n   - master secret은 session key를 생성한다.\n   - 이 session key 값을 이용하여 서버와 클라이언트는 데이터를 대칭키 방식으로 암호화 한 후에 주고 받는다.\n7. client와 server는 핸드쉐이크 단계의 종료를 서로에게 알림\n\n\n\n### 2. 세션\n\n> 실제로 서버와 클라이언트가 데이터를 주고 받는 단계\n\n이 단계에서 정보를 상대방에 전송하기 전 session key 값을 이용하여 대칭키 방식으로 암호화 한다. \n\n- 대칭키 방식을 사용하는 이유 \n\n  공개키 방식의 많은 컴퓨터 파워 사용, 공개키 사용시 많은 접속이 몰려 서버의 비용 증가 \n\n- SSL이 대칭키와 공개키를 조합해서 사용하는 이유\n\n  대칭키를 상대에게 전송할 때 암호화 되지 않은 인터넷을 통해서 키를 전송하는 것이 위험하기 때문.\n\n따라서, 속도는 느리지만 데이터를 안전하게 주고 받을 수 있는 **공개키 방식으로 대칭키를 암호화하고, 실제 데이터를 주고 받을 때는 대칭키를 이용해서 데이터를 주고 받는다.**\n\n\n\n### 3. 세션종료\n\n데이터의 전송이 끝나면 SSL 통신이 끝났음을 서로에게 알려준다. 이 때 통신에서 사용한 대칭키인 **session key를 폐기**한다.","slug":"SSL01","published":1,"updated":"2021-02-08T18:24:53.720Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0j50001f9c98yyca79q","content":"<h1 id=\"SSL의-동작-방법\"><a href=\"#SSL의-동작-방법\" class=\"headerlink\" title=\"SSL의 동작 방법\"></a>SSL의 동작 방법</h1><p>생활코딩에서 SSL의 동작 방법을 읽으며 내가 이해하기 쉬우려고 정리하였다.</p>\n<p>더 정확하고 자세한 정보를 알고 싶거나 HTTPS와 암호화 방법에 대한 사전지식이 없다면 아래 링크를 참고 ! </p>\n<p>[ 출처: <a href=\"https://opentutorials.org/course/228/4894\">https://opentutorials.org/course/228/4894</a> ]</p>\n<h3 id=\"1-악수-handshake\"><a href=\"#1-악수-handshake\" class=\"headerlink\" title=\"1. 악수 (handshake)\"></a>1. 악수 (handshake)</h3><blockquote>\n<p>실제 데이터를 주고 받기 전 client와 server가 나누는 일종의 인사</p>\n</blockquote>\n<p>이 과정을 통해 서로 상대방이 존재하는지, 데이터를 주고 받기 위해 어떤 방법을 사용할지 파악한다.</p>\n<ol>\n<li>client hello<ul>\n<li>client측에서 생성한 랜덤 데이터</li>\n<li>client가 지원하는 암호화 방식들</li>\n<li>세션 아이디</li>\n</ul>\n</li>\n<li>server hello <ul>\n<li>server 측에서 생성한 랜덤 데이터</li>\n<li>server가 선택한 client의 암호화 방식</li>\n<li>인증서</li>\n</ul>\n</li>\n<li>client는 server의 인증서가 CA에 의해서 발급된 것인지 확인하기 위해 client에 내장된 CA 리스트를 확인<ul>\n<li>client에 내장된 CA의 공개키를 이용하여 인증서 복호화 -&gt; 복호화에 성공했다면 인증서는 CA의 개인키로 암호화된 문서임이 암시적으로 보증된다.</li>\n</ul>\n</li>\n<li>client는 client 랜덤 데이터 + server 랜덤 데이터 = pre master secret 생성</li>\n<li>client가 server의 공개키를 이용하여 pre master secret값을 암호화하여 server에 전달 (공개키 방식)</li>\n<li>server는 비공개키를 이용하여 pre master secret값을 복호화 한 후 master secret값으로 만듬 (공개키 방식)<ul>\n<li>master secret은 session key를 생성한다.</li>\n<li>이 session key 값을 이용하여 서버와 클라이언트는 데이터를 대칭키 방식으로 암호화 한 후에 주고 받는다.</li>\n</ul>\n</li>\n<li>client와 server는 핸드쉐이크 단계의 종료를 서로에게 알림</li>\n</ol>\n<h3 id=\"2-세션\"><a href=\"#2-세션\" class=\"headerlink\" title=\"2. 세션\"></a>2. 세션</h3><blockquote>\n<p>실제로 서버와 클라이언트가 데이터를 주고 받는 단계</p>\n</blockquote>\n<p>이 단계에서 정보를 상대방에 전송하기 전 session key 값을 이용하여 대칭키 방식으로 암호화 한다. </p>\n<ul>\n<li><p>대칭키 방식을 사용하는 이유 </p>\n<p>공개키 방식의 많은 컴퓨터 파워 사용, 공개키 사용시 많은 접속이 몰려 서버의 비용 증가 </p>\n</li>\n<li><p>SSL이 대칭키와 공개키를 조합해서 사용하는 이유</p>\n<p>대칭키를 상대에게 전송할 때 암호화 되지 않은 인터넷을 통해서 키를 전송하는 것이 위험하기 때문.</p>\n</li>\n</ul>\n<p>따라서, 속도는 느리지만 데이터를 안전하게 주고 받을 수 있는 <strong>공개키 방식으로 대칭키를 암호화하고, 실제 데이터를 주고 받을 때는 대칭키를 이용해서 데이터를 주고 받는다.</strong></p>\n<h3 id=\"3-세션종료\"><a href=\"#3-세션종료\" class=\"headerlink\" title=\"3. 세션종료\"></a>3. 세션종료</h3><p>데이터의 전송이 끝나면 SSL 통신이 끝났음을 서로에게 알려준다. 이 때 통신에서 사용한 대칭키인 <strong>session key를 폐기</strong>한다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"SSL의-동작-방법\"><a href=\"#SSL의-동작-방법\" class=\"headerlink\" title=\"SSL의 동작 방법\"></a>SSL의 동작 방법</h1><p>생활코딩에서 SSL의 동작 방법을 읽으며 내가 이해하기 쉬우려고 정리하였다.</p>\n<p>더 정확하고 자세한 정보를 알고 싶거나 HTTPS와 암호화 방법에 대한 사전지식이 없다면 아래 링크를 참고 ! </p>\n<p>[ 출처: <a href=\"https://opentutorials.org/course/228/4894\">https://opentutorials.org/course/228/4894</a> ]</p>\n<h3 id=\"1-악수-handshake\"><a href=\"#1-악수-handshake\" class=\"headerlink\" title=\"1. 악수 (handshake)\"></a>1. 악수 (handshake)</h3><blockquote>\n<p>실제 데이터를 주고 받기 전 client와 server가 나누는 일종의 인사</p>\n</blockquote>\n<p>이 과정을 통해 서로 상대방이 존재하는지, 데이터를 주고 받기 위해 어떤 방법을 사용할지 파악한다.</p>\n<ol>\n<li>client hello<ul>\n<li>client측에서 생성한 랜덤 데이터</li>\n<li>client가 지원하는 암호화 방식들</li>\n<li>세션 아이디</li>\n</ul>\n</li>\n<li>server hello <ul>\n<li>server 측에서 생성한 랜덤 데이터</li>\n<li>server가 선택한 client의 암호화 방식</li>\n<li>인증서</li>\n</ul>\n</li>\n<li>client는 server의 인증서가 CA에 의해서 발급된 것인지 확인하기 위해 client에 내장된 CA 리스트를 확인<ul>\n<li>client에 내장된 CA의 공개키를 이용하여 인증서 복호화 -&gt; 복호화에 성공했다면 인증서는 CA의 개인키로 암호화된 문서임이 암시적으로 보증된다.</li>\n</ul>\n</li>\n<li>client는 client 랜덤 데이터 + server 랜덤 데이터 = pre master secret 생성</li>\n<li>client가 server의 공개키를 이용하여 pre master secret값을 암호화하여 server에 전달 (공개키 방식)</li>\n<li>server는 비공개키를 이용하여 pre master secret값을 복호화 한 후 master secret값으로 만듬 (공개키 방식)<ul>\n<li>master secret은 session key를 생성한다.</li>\n<li>이 session key 값을 이용하여 서버와 클라이언트는 데이터를 대칭키 방식으로 암호화 한 후에 주고 받는다.</li>\n</ul>\n</li>\n<li>client와 server는 핸드쉐이크 단계의 종료를 서로에게 알림</li>\n</ol>\n<h3 id=\"2-세션\"><a href=\"#2-세션\" class=\"headerlink\" title=\"2. 세션\"></a>2. 세션</h3><blockquote>\n<p>실제로 서버와 클라이언트가 데이터를 주고 받는 단계</p>\n</blockquote>\n<p>이 단계에서 정보를 상대방에 전송하기 전 session key 값을 이용하여 대칭키 방식으로 암호화 한다. </p>\n<ul>\n<li><p>대칭키 방식을 사용하는 이유 </p>\n<p>공개키 방식의 많은 컴퓨터 파워 사용, 공개키 사용시 많은 접속이 몰려 서버의 비용 증가 </p>\n</li>\n<li><p>SSL이 대칭키와 공개키를 조합해서 사용하는 이유</p>\n<p>대칭키를 상대에게 전송할 때 암호화 되지 않은 인터넷을 통해서 키를 전송하는 것이 위험하기 때문.</p>\n</li>\n</ul>\n<p>따라서, 속도는 느리지만 데이터를 안전하게 주고 받을 수 있는 <strong>공개키 방식으로 대칭키를 암호화하고, 실제 데이터를 주고 받을 때는 대칭키를 이용해서 데이터를 주고 받는다.</strong></p>\n<h3 id=\"3-세션종료\"><a href=\"#3-세션종료\" class=\"headerlink\" title=\"3. 세션종료\"></a>3. 세션종료</h3><p>데이터의 전송이 끝나면 SSL 통신이 끝났음을 서로에게 알려준다. 이 때 통신에서 사용한 대칭키인 <strong>session key를 폐기</strong>한다.</p>\n"},{"title":"해쉬 알고리즘이란?","date":"2020-03-14T06:46:00.000Z","_content":"\n### 해쉬 알고리즘 O(1)\n\n해쉬는 임의의 크기를 가진 데이터를 고정된 데이터의 크기로 변환시키는 것.\n\nkey 값을 계산 하는 함수는 **해쉬 함수**라고 한다.\n\n\n\n#### 해쉬 함수\n\n- 문자열을 받아 숫자로 변환하는 함수\n\n- 문자열에 숫자를 Mapping (할당)한다.\n\n- 일관성을 유지해야하며, 다른 단어가 들어가면 꼭 다른 숫자가 나와야한다.\n\n- **사용방법**\n\n  1. 0 ,1 , 2, 3, 4 인덱스의 배열이 있다고 하자.\n\n  2. apple을 해쉬 함수에 넣으면 해쉬 함수는 3을 출력한다고 가정, 이 때 apple의 가격을 3번 인덱스 위치에 저장한다.\n     1. milk 는 0을 출력한다고 가정, 이 때 milk의 가격을 0번 인덱스 위치에 저장한다.\n     2. 위와 같은 방법으로 전체 배열을 채운다.\n\n  3. 이 때 milk의 가격을 묻는다면 배열을 탐색할 필요 없이 milk를 해시함수에 넣기만 하면 해당 가격이 있는 인덱스를 출력하게 될 것이다.\n\n     >해시 함수는 배열의 크기를 알고 있어야하며 유요한 인덱스만 반환해야한다.\n     >\n     >해시함수와 같은 이름 : 해시 맵, 맵, 딕셔너리, 연관 배열\n\n- **용도**\n\n  - 해시 테이블로 조회하기\n\n    ```python\n    phone_book = dict()\n    phone_book[\"jenny\"] = 8675409\n    phone_book[\"emergency\"] = 911\n    \n    print(phone_book[\"jenny\"]) # 8675409\n    ```\n\n  - 중복 항목 방지하기\n\n    ```python\n    voted = {}\n    value = voted.get{\"tom\"} # tom이 있으면 value를 없다면 None을 출력\n    \n    def check_voter(name):\n        if voted.get(name):\n            print(\"이미 투표\")\n        else:\n            voted[name] = True\n            print(\"투표하세요.\")\n    ```\n\n  - 해시 테이블을 캐시로 사용하기\n\n    ```python\n    cache = {}\n    \n    def get_page(url):\n        if cache.get(url):\n            return cache[url]\n        else:\n            data = get_data_from_server(url)\n            cache[url] = data\n            return data\n    ```\n\n- **장점**\n\n  1. 어떤 것과 다른 것 사이의 관계를 모형화\n  2. 중복 방지\n  3. 서버에게 작업을 시키지 않고 캐싱 가능\n\n  \n\n#### 충돌(Collusion)\n\n해쉬테이블의 가장 큰 문제점이다. 다른 `k`값이 동일한 `h(k)`값을 가져 동일한 `slot`에 저장되는 경우이다. 예를 들어 k1 과 k2 를 해쉬했을 때 h(k1) == h(k2) 인 경우이다. 이러한 문제를 해결하기 위해서는 배열과 리스트를 조합하여 사용하는 자료구조를 사용한다.\n\n\n\n[참고](hsp1116.tistory.com/35)\n\n","source":"_posts/algorithm-hash.md","raw":"---\ntitle: \"해쉬 알고리즘이란?\"\ndate: 2020-03-14 15:46:00\ntags: 알고리즘설명\n---\n\n### 해쉬 알고리즘 O(1)\n\n해쉬는 임의의 크기를 가진 데이터를 고정된 데이터의 크기로 변환시키는 것.\n\nkey 값을 계산 하는 함수는 **해쉬 함수**라고 한다.\n\n\n\n#### 해쉬 함수\n\n- 문자열을 받아 숫자로 변환하는 함수\n\n- 문자열에 숫자를 Mapping (할당)한다.\n\n- 일관성을 유지해야하며, 다른 단어가 들어가면 꼭 다른 숫자가 나와야한다.\n\n- **사용방법**\n\n  1. 0 ,1 , 2, 3, 4 인덱스의 배열이 있다고 하자.\n\n  2. apple을 해쉬 함수에 넣으면 해쉬 함수는 3을 출력한다고 가정, 이 때 apple의 가격을 3번 인덱스 위치에 저장한다.\n     1. milk 는 0을 출력한다고 가정, 이 때 milk의 가격을 0번 인덱스 위치에 저장한다.\n     2. 위와 같은 방법으로 전체 배열을 채운다.\n\n  3. 이 때 milk의 가격을 묻는다면 배열을 탐색할 필요 없이 milk를 해시함수에 넣기만 하면 해당 가격이 있는 인덱스를 출력하게 될 것이다.\n\n     >해시 함수는 배열의 크기를 알고 있어야하며 유요한 인덱스만 반환해야한다.\n     >\n     >해시함수와 같은 이름 : 해시 맵, 맵, 딕셔너리, 연관 배열\n\n- **용도**\n\n  - 해시 테이블로 조회하기\n\n    ```python\n    phone_book = dict()\n    phone_book[\"jenny\"] = 8675409\n    phone_book[\"emergency\"] = 911\n    \n    print(phone_book[\"jenny\"]) # 8675409\n    ```\n\n  - 중복 항목 방지하기\n\n    ```python\n    voted = {}\n    value = voted.get{\"tom\"} # tom이 있으면 value를 없다면 None을 출력\n    \n    def check_voter(name):\n        if voted.get(name):\n            print(\"이미 투표\")\n        else:\n            voted[name] = True\n            print(\"투표하세요.\")\n    ```\n\n  - 해시 테이블을 캐시로 사용하기\n\n    ```python\n    cache = {}\n    \n    def get_page(url):\n        if cache.get(url):\n            return cache[url]\n        else:\n            data = get_data_from_server(url)\n            cache[url] = data\n            return data\n    ```\n\n- **장점**\n\n  1. 어떤 것과 다른 것 사이의 관계를 모형화\n  2. 중복 방지\n  3. 서버에게 작업을 시키지 않고 캐싱 가능\n\n  \n\n#### 충돌(Collusion)\n\n해쉬테이블의 가장 큰 문제점이다. 다른 `k`값이 동일한 `h(k)`값을 가져 동일한 `slot`에 저장되는 경우이다. 예를 들어 k1 과 k2 를 해쉬했을 때 h(k1) == h(k2) 인 경우이다. 이러한 문제를 해결하기 위해서는 배열과 리스트를 조합하여 사용하는 자료구조를 사용한다.\n\n\n\n[참고](hsp1116.tistory.com/35)\n\n","slug":"algorithm-hash","published":1,"updated":"2021-02-08T18:25:17.370Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jb0003f9c90xtl2tkh","content":"<h3 id=\"해쉬-알고리즘-O-1\"><a href=\"#해쉬-알고리즘-O-1\" class=\"headerlink\" title=\"해쉬 알고리즘 O(1)\"></a>해쉬 알고리즘 O(1)</h3><p>해쉬는 임의의 크기를 가진 데이터를 고정된 데이터의 크기로 변환시키는 것.</p>\n<p>key 값을 계산 하는 함수는 <strong>해쉬 함수</strong>라고 한다.</p>\n<h4 id=\"해쉬-함수\"><a href=\"#해쉬-함수\" class=\"headerlink\" title=\"해쉬 함수\"></a>해쉬 함수</h4><ul>\n<li><p>문자열을 받아 숫자로 변환하는 함수</p>\n</li>\n<li><p>문자열에 숫자를 Mapping (할당)한다.</p>\n</li>\n<li><p>일관성을 유지해야하며, 다른 단어가 들어가면 꼭 다른 숫자가 나와야한다.</p>\n</li>\n<li><p><strong>사용방법</strong></p>\n<ol>\n<li><p>0 ,1 , 2, 3, 4 인덱스의 배열이 있다고 하자.</p>\n</li>\n<li><p>apple을 해쉬 함수에 넣으면 해쉬 함수는 3을 출력한다고 가정, 이 때 apple의 가격을 3번 인덱스 위치에 저장한다.</p>\n<ol>\n<li>milk 는 0을 출력한다고 가정, 이 때 milk의 가격을 0번 인덱스 위치에 저장한다.</li>\n<li>위와 같은 방법으로 전체 배열을 채운다.</li>\n</ol>\n</li>\n<li><p>이 때 milk의 가격을 묻는다면 배열을 탐색할 필요 없이 milk를 해시함수에 넣기만 하면 해당 가격이 있는 인덱스를 출력하게 될 것이다.</p>\n<blockquote>\n<p>해시 함수는 배열의 크기를 알고 있어야하며 유요한 인덱스만 반환해야한다.</p>\n<p>해시함수와 같은 이름 : 해시 맵, 맵, 딕셔너리, 연관 배열</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p><strong>용도</strong></p>\n<ul>\n<li><p>해시 테이블로 조회하기</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phone_book = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">phone_book[<span class=\"string\">&quot;jenny&quot;</span>] = <span class=\"number\">8675409</span></span><br><span class=\"line\">phone_book[<span class=\"string\">&quot;emergency&quot;</span>] = <span class=\"number\">911</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(phone_book[<span class=\"string\">&quot;jenny&quot;</span>]) <span class=\"comment\"># 8675409</span></span><br></pre></td></tr></table></figure></li>\n<li><p>중복 항목 방지하기</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">voted = &#123;&#125;</span><br><span class=\"line\">value = voted.get&#123;<span class=\"string\">&quot;tom&quot;</span>&#125; <span class=\"comment\"># tom이 있으면 value를 없다면 None을 출력</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_voter</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> voted.get(name):</span><br><span class=\"line\">        print(<span class=\"string\">&quot;이미 투표&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        voted[name] = <span class=\"literal\">True</span></span><br><span class=\"line\">        print(<span class=\"string\">&quot;투표하세요.&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>해시 테이블을 캐시로 사용하기</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_page</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cache.get(url):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache[url]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        data = get_data_from_server(url)</span><br><span class=\"line\">        cache[url] = data</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>장점</strong></p>\n<ol>\n<li>어떤 것과 다른 것 사이의 관계를 모형화</li>\n<li>중복 방지</li>\n<li>서버에게 작업을 시키지 않고 캐싱 가능</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"충돌-Collusion\"><a href=\"#충돌-Collusion\" class=\"headerlink\" title=\"충돌(Collusion)\"></a>충돌(Collusion)</h4><p>해쉬테이블의 가장 큰 문제점이다. 다른 <code>k</code>값이 동일한 <code>h(k)</code>값을 가져 동일한 <code>slot</code>에 저장되는 경우이다. 예를 들어 k1 과 k2 를 해쉬했을 때 h(k1) == h(k2) 인 경우이다. 이러한 문제를 해결하기 위해서는 배열과 리스트를 조합하여 사용하는 자료구조를 사용한다.</p>\n<p><a href=\"hsp1116.tistory.com/35\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"해쉬-알고리즘-O-1\"><a href=\"#해쉬-알고리즘-O-1\" class=\"headerlink\" title=\"해쉬 알고리즘 O(1)\"></a>해쉬 알고리즘 O(1)</h3><p>해쉬는 임의의 크기를 가진 데이터를 고정된 데이터의 크기로 변환시키는 것.</p>\n<p>key 값을 계산 하는 함수는 <strong>해쉬 함수</strong>라고 한다.</p>\n<h4 id=\"해쉬-함수\"><a href=\"#해쉬-함수\" class=\"headerlink\" title=\"해쉬 함수\"></a>해쉬 함수</h4><ul>\n<li><p>문자열을 받아 숫자로 변환하는 함수</p>\n</li>\n<li><p>문자열에 숫자를 Mapping (할당)한다.</p>\n</li>\n<li><p>일관성을 유지해야하며, 다른 단어가 들어가면 꼭 다른 숫자가 나와야한다.</p>\n</li>\n<li><p><strong>사용방법</strong></p>\n<ol>\n<li><p>0 ,1 , 2, 3, 4 인덱스의 배열이 있다고 하자.</p>\n</li>\n<li><p>apple을 해쉬 함수에 넣으면 해쉬 함수는 3을 출력한다고 가정, 이 때 apple의 가격을 3번 인덱스 위치에 저장한다.</p>\n<ol>\n<li>milk 는 0을 출력한다고 가정, 이 때 milk의 가격을 0번 인덱스 위치에 저장한다.</li>\n<li>위와 같은 방법으로 전체 배열을 채운다.</li>\n</ol>\n</li>\n<li><p>이 때 milk의 가격을 묻는다면 배열을 탐색할 필요 없이 milk를 해시함수에 넣기만 하면 해당 가격이 있는 인덱스를 출력하게 될 것이다.</p>\n<blockquote>\n<p>해시 함수는 배열의 크기를 알고 있어야하며 유요한 인덱스만 반환해야한다.</p>\n<p>해시함수와 같은 이름 : 해시 맵, 맵, 딕셔너리, 연관 배열</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p><strong>용도</strong></p>\n<ul>\n<li><p>해시 테이블로 조회하기</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">phone_book = <span class=\"built_in\">dict</span>()</span><br><span class=\"line\">phone_book[<span class=\"string\">&quot;jenny&quot;</span>] = <span class=\"number\">8675409</span></span><br><span class=\"line\">phone_book[<span class=\"string\">&quot;emergency&quot;</span>] = <span class=\"number\">911</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(phone_book[<span class=\"string\">&quot;jenny&quot;</span>]) <span class=\"comment\"># 8675409</span></span><br></pre></td></tr></table></figure></li>\n<li><p>중복 항목 방지하기</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">voted = &#123;&#125;</span><br><span class=\"line\">value = voted.get&#123;<span class=\"string\">&quot;tom&quot;</span>&#125; <span class=\"comment\"># tom이 있으면 value를 없다면 None을 출력</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">check_voter</span>(<span class=\"params\">name</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> voted.get(name):</span><br><span class=\"line\">        print(<span class=\"string\">&quot;이미 투표&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        voted[name] = <span class=\"literal\">True</span></span><br><span class=\"line\">        print(<span class=\"string\">&quot;투표하세요.&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li><p>해시 테이블을 캐시로 사용하기</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cache = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_page</span>(<span class=\"params\">url</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cache.get(url):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cache[url]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        data = get_data_from_server(url)</span><br><span class=\"line\">        cache[url] = data</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>장점</strong></p>\n<ol>\n<li>어떤 것과 다른 것 사이의 관계를 모형화</li>\n<li>중복 방지</li>\n<li>서버에게 작업을 시키지 않고 캐싱 가능</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"충돌-Collusion\"><a href=\"#충돌-Collusion\" class=\"headerlink\" title=\"충돌(Collusion)\"></a>충돌(Collusion)</h4><p>해쉬테이블의 가장 큰 문제점이다. 다른 <code>k</code>값이 동일한 <code>h(k)</code>값을 가져 동일한 <code>slot</code>에 저장되는 경우이다. 예를 들어 k1 과 k2 를 해쉬했을 때 h(k1) == h(k2) 인 경우이다. 이러한 문제를 해결하기 위해서는 배열과 리스트를 조합하여 사용하는 자료구조를 사용한다.</p>\n<p><a href=\"hsp1116.tistory.com/35\">참고</a></p>\n"},{"title":"[안드로이드] byte Array to String (Base 64를 이용하여 encoding, decoding 시 주의할 점!) - 자바/JAVA","date":"2020-08-23T16:00:00.000Z","_content":"\n## Base64\n\n일단 Base64가 뭘까? 컴퓨터 분야에서 쓰이는 **Base64**란 8비트 이진 데이터를 문자 코드에 영향을 받지 않는 공통 ASCII 영역의 문자들로만 이루어진 일련의 문자열로 바꾸는 인코딩 방식을 가리키는 개념이라고 한다. \n\n**Encoding** 은 이진데이터를 일련의 문자열로, **Decoding** 은 일련의 문자열을 이진데이터로 바꾸는 것이다.\n\n\n\n## encodToString\n\n```java\npublic static String encodeToString (byte[] input, int flags)\n```\n\nBase64를 이용하여 byte Array 를 String으로 Encoding 할 때 이용하는 함수이다.\n\n나는 text를 private key로 디지털 서명한 byte[] 값을 서버에 String 형식으로 보내야하기 때문에 사용했다.\n\n```java\n    public String getDigitalSignature(String packageName, String text) {\n        try{\n            Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);\n            signature.initSign(getPrivateKey(packageName));\n\n            byte[] data = text.getBytes();\n            signature.update(data);\n\n            byte[] signatureBytes = signature.sign();\n            String signatureStr = Base64.encodeToString(signatureBytes, Base64.NO_WRAP);\n            Log.d(TAG, \"Signature:\" + signatureStr);\n            return signatureStr;\n        } catch (NoSuchAlgorithmException | InvalidKeyException | SignatureException e) {\n            Log.e(TAG, \"error in digital signature\" + e);\n            return null;\n        }\n    }\n```\n\nsignatureBytes 를 변형 없이 encoding 하기 위해 Base64.NO_WRAP 옵션을 사용하는 것이 좋다. 왜일까?\n\n\n\n>  여기서 주의할 점이 나온다 ! \n\n긴 길이의 byte 배열의 경우, \n\n* **Base64.Default**\n\n  ```\n  Default values for encoder/decoder flags.\n  Constant Value: 0\n  ```\n\n  위는 android developers 레퍼런스 설명이다. default 옵션으로, 이 옵션의 경우 76자가 넘는 위치에 개행문자(\\n)가 삽입된다. \n\n  * **예시** \n\n    ```java\n    String signatureStr = Base64.encodeToString(signatureBytes, Base64.DEFAULT);\n    Log.d(TAG, \"Signature:\" + signatureStr);\n    ```\n\n    **결과** -> 세보진 않았지만 76자 마다 개행문자가 삽입되는 것을 확인할 수 있다.\n\n    ![2020-08-242.10.47](../image/2020-08-242.10.47.png)\n\n* **Base64.NO_WRAP**\n\n  ```\n  Encoder flag bit to omit all line terminators (i.e., the output will be on one long line).\n  Constant Value: 2 \n  ```\n\n  즉, 개행문자를 삽입하지 않고 긴 한줄의 output 을 갖는다.\n\n  * **예시**\n\n    ```java\n    String signatureStr = Base64.encodeToString(signatureBytes, Base64.NO_WRAP);\n    Log.d(TAG, \"Signature:\" + signatureStr);\n    ```\n\n    **결과** -> 끊김 없이 한 줄로 나오는 것을 확인할 수 있다.\n\n    ![2020-08-242.07.26](../image/2020-08-242.07.26.png)\n\n* 이 외에도, **CRLF / NO_CLOSE / NO_PADDING / URL_SAFE** 옵션이 있다.\n\n  \n\n> publicKey 를 서버로 전송하는 경우에는 DEFAULT 옵션을 사용하여야 했다.\n>\n> 때에 따라서 알맞은 옵션을 사용하도록 하자 ! \n\n\n\n마지막으로 ! decoding 시에도 동일한 옵션을 사용해 주어야 한다. 나 같은 경우에는 아래와 같은 코드를 이용했다 (NO_WRAP)\n\n```java\n Base64.decode(signatureStr, Base64.NO_WRAP);\n```\n\n\n\n출처: https://kjwsx23.tistory.com/234 ","source":"_posts/android-base64.md","raw":"---\ntitle: \"[안드로이드] byte Array to String (Base 64를 이용하여 encoding, decoding 시 주의할 점!) - 자바/JAVA\"\ndate: 2020-08-24 01:00:00\ntags: 안드로이드\n---\n\n## Base64\n\n일단 Base64가 뭘까? 컴퓨터 분야에서 쓰이는 **Base64**란 8비트 이진 데이터를 문자 코드에 영향을 받지 않는 공통 ASCII 영역의 문자들로만 이루어진 일련의 문자열로 바꾸는 인코딩 방식을 가리키는 개념이라고 한다. \n\n**Encoding** 은 이진데이터를 일련의 문자열로, **Decoding** 은 일련의 문자열을 이진데이터로 바꾸는 것이다.\n\n\n\n## encodToString\n\n```java\npublic static String encodeToString (byte[] input, int flags)\n```\n\nBase64를 이용하여 byte Array 를 String으로 Encoding 할 때 이용하는 함수이다.\n\n나는 text를 private key로 디지털 서명한 byte[] 값을 서버에 String 형식으로 보내야하기 때문에 사용했다.\n\n```java\n    public String getDigitalSignature(String packageName, String text) {\n        try{\n            Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);\n            signature.initSign(getPrivateKey(packageName));\n\n            byte[] data = text.getBytes();\n            signature.update(data);\n\n            byte[] signatureBytes = signature.sign();\n            String signatureStr = Base64.encodeToString(signatureBytes, Base64.NO_WRAP);\n            Log.d(TAG, \"Signature:\" + signatureStr);\n            return signatureStr;\n        } catch (NoSuchAlgorithmException | InvalidKeyException | SignatureException e) {\n            Log.e(TAG, \"error in digital signature\" + e);\n            return null;\n        }\n    }\n```\n\nsignatureBytes 를 변형 없이 encoding 하기 위해 Base64.NO_WRAP 옵션을 사용하는 것이 좋다. 왜일까?\n\n\n\n>  여기서 주의할 점이 나온다 ! \n\n긴 길이의 byte 배열의 경우, \n\n* **Base64.Default**\n\n  ```\n  Default values for encoder/decoder flags.\n  Constant Value: 0\n  ```\n\n  위는 android developers 레퍼런스 설명이다. default 옵션으로, 이 옵션의 경우 76자가 넘는 위치에 개행문자(\\n)가 삽입된다. \n\n  * **예시** \n\n    ```java\n    String signatureStr = Base64.encodeToString(signatureBytes, Base64.DEFAULT);\n    Log.d(TAG, \"Signature:\" + signatureStr);\n    ```\n\n    **결과** -> 세보진 않았지만 76자 마다 개행문자가 삽입되는 것을 확인할 수 있다.\n\n    ![2020-08-242.10.47](../image/2020-08-242.10.47.png)\n\n* **Base64.NO_WRAP**\n\n  ```\n  Encoder flag bit to omit all line terminators (i.e., the output will be on one long line).\n  Constant Value: 2 \n  ```\n\n  즉, 개행문자를 삽입하지 않고 긴 한줄의 output 을 갖는다.\n\n  * **예시**\n\n    ```java\n    String signatureStr = Base64.encodeToString(signatureBytes, Base64.NO_WRAP);\n    Log.d(TAG, \"Signature:\" + signatureStr);\n    ```\n\n    **결과** -> 끊김 없이 한 줄로 나오는 것을 확인할 수 있다.\n\n    ![2020-08-242.07.26](../image/2020-08-242.07.26.png)\n\n* 이 외에도, **CRLF / NO_CLOSE / NO_PADDING / URL_SAFE** 옵션이 있다.\n\n  \n\n> publicKey 를 서버로 전송하는 경우에는 DEFAULT 옵션을 사용하여야 했다.\n>\n> 때에 따라서 알맞은 옵션을 사용하도록 하자 ! \n\n\n\n마지막으로 ! decoding 시에도 동일한 옵션을 사용해 주어야 한다. 나 같은 경우에는 아래와 같은 코드를 이용했다 (NO_WRAP)\n\n```java\n Base64.decode(signatureStr, Base64.NO_WRAP);\n```\n\n\n\n출처: https://kjwsx23.tistory.com/234 ","slug":"android-base64","published":1,"updated":"2021-02-08T18:25:16.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jc0004f9c9aj1y0au9","content":"<h2 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h2><p>일단 Base64가 뭘까? 컴퓨터 분야에서 쓰이는 <strong>Base64</strong>란 8비트 이진 데이터를 문자 코드에 영향을 받지 않는 공통 ASCII 영역의 문자들로만 이루어진 일련의 문자열로 바꾸는 인코딩 방식을 가리키는 개념이라고 한다. </p>\n<p><strong>Encoding</strong> 은 이진데이터를 일련의 문자열로, <strong>Decoding</strong> 은 일련의 문자열을 이진데이터로 바꾸는 것이다.</p>\n<h2 id=\"encodToString\"><a href=\"#encodToString\" class=\"headerlink\" title=\"encodToString\"></a>encodToString</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encodeToString</span> <span class=\"params\">(<span class=\"keyword\">byte</span>[] input, <span class=\"keyword\">int</span> flags)</span></span></span><br></pre></td></tr></table></figure>\n<p>Base64를 이용하여 byte Array 를 String으로 Encoding 할 때 이용하는 함수이다.</p>\n<p>나는 text를 private key로 디지털 서명한 byte[] 값을 서버에 String 형식으로 보내야하기 때문에 사용했다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDigitalSignature</span><span class=\"params\">(String packageName, String text)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class=\"line\">        signature.initSign(getPrivateKey(packageName));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] data = text.getBytes();</span><br><span class=\"line\">        signature.update(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] signatureBytes = signature.sign();</span><br><span class=\"line\">        String signatureStr = Base64.encodeToString(signatureBytes, Base64.NO_WRAP);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;Signature:&quot;</span> + signatureStr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> signatureStr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException | InvalidKeyException | SignatureException e) &#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;error in digital signature&quot;</span> + e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>signatureBytes 를 변형 없이 encoding 하기 위해 Base64.NO_WRAP 옵션을 사용하는 것이 좋다. 왜일까?</p>\n<blockquote>\n<p> 여기서 주의할 점이 나온다 ! </p>\n</blockquote>\n<p>긴 길이의 byte 배열의 경우, </p>\n<ul>\n<li><p><strong>Base64.Default</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Default values for encoder&#x2F;decoder flags.</span><br><span class=\"line\">Constant Value: 0</span><br></pre></td></tr></table></figure>\n<p>위는 android developers 레퍼런스 설명이다. default 옵션으로, 이 옵션의 경우 76자가 넘는 위치에 개행문자(\\n)가 삽입된다. </p>\n<ul>\n<li><p><strong>예시</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String signatureStr = Base64.encodeToString(signatureBytes, Base64.DEFAULT);</span><br><span class=\"line\">Log.d(TAG, <span class=\"string\">&quot;Signature:&quot;</span> + signatureStr);</span><br></pre></td></tr></table></figure>\n<p><strong>결과</strong> -&gt; 세보진 않았지만 76자 마다 개행문자가 삽입되는 것을 확인할 수 있다.</p>\n<p><img src=\"../image/2020-08-242.10.47.png\" alt=\"2020-08-242.10.47\"></p>\n</li>\n</ul>\n</li>\n<li><p><strong>Base64.NO_WRAP</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Encoder flag bit to omit all line terminators (i.e., the output will be on one long line).</span><br><span class=\"line\">Constant Value: 2 </span><br></pre></td></tr></table></figure>\n<p>즉, 개행문자를 삽입하지 않고 긴 한줄의 output 을 갖는다.</p>\n<ul>\n<li><p><strong>예시</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String signatureStr = Base64.encodeToString(signatureBytes, Base64.NO_WRAP);</span><br><span class=\"line\">Log.d(TAG, <span class=\"string\">&quot;Signature:&quot;</span> + signatureStr);</span><br></pre></td></tr></table></figure>\n<p><strong>결과</strong> -&gt; 끊김 없이 한 줄로 나오는 것을 확인할 수 있다.</p>\n<p><img src=\"../image/2020-08-242.07.26.png\" alt=\"2020-08-242.07.26\"></p>\n</li>\n</ul>\n</li>\n<li><p>이 외에도, <strong>CRLF / NO_CLOSE / NO_PADDING / URL_SAFE</strong> 옵션이 있다.</p>\n</li>\n</ul>\n<blockquote>\n<p>publicKey 를 서버로 전송하는 경우에는 DEFAULT 옵션을 사용하여야 했다.</p>\n<p>때에 따라서 알맞은 옵션을 사용하도록 하자 ! </p>\n</blockquote>\n<p>마지막으로 ! decoding 시에도 동일한 옵션을 사용해 주어야 한다. 나 같은 경우에는 아래와 같은 코드를 이용했다 (NO_WRAP)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base64.decode(signatureStr, Base64.NO_WRAP);</span><br></pre></td></tr></table></figure>\n\n\n<p>출처: <a href=\"https://kjwsx23.tistory.com/234\">https://kjwsx23.tistory.com/234</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Base64\"><a href=\"#Base64\" class=\"headerlink\" title=\"Base64\"></a>Base64</h2><p>일단 Base64가 뭘까? 컴퓨터 분야에서 쓰이는 <strong>Base64</strong>란 8비트 이진 데이터를 문자 코드에 영향을 받지 않는 공통 ASCII 영역의 문자들로만 이루어진 일련의 문자열로 바꾸는 인코딩 방식을 가리키는 개념이라고 한다. </p>\n<p><strong>Encoding</strong> 은 이진데이터를 일련의 문자열로, <strong>Decoding</strong> 은 일련의 문자열을 이진데이터로 바꾸는 것이다.</p>\n<h2 id=\"encodToString\"><a href=\"#encodToString\" class=\"headerlink\" title=\"encodToString\"></a>encodToString</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">encodeToString</span> <span class=\"params\">(<span class=\"keyword\">byte</span>[] input, <span class=\"keyword\">int</span> flags)</span></span></span><br></pre></td></tr></table></figure>\n<p>Base64를 이용하여 byte Array 를 String으로 Encoding 할 때 이용하는 함수이다.</p>\n<p>나는 text를 private key로 디지털 서명한 byte[] 값을 서버에 String 형식으로 보내야하기 때문에 사용했다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getDigitalSignature</span><span class=\"params\">(String packageName, String text)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">        Signature signature = Signature.getInstance(SIGNATURE_ALGORITHM);</span><br><span class=\"line\">        signature.initSign(getPrivateKey(packageName));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] data = text.getBytes();</span><br><span class=\"line\">        signature.update(data);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">byte</span>[] signatureBytes = signature.sign();</span><br><span class=\"line\">        String signatureStr = Base64.encodeToString(signatureBytes, Base64.NO_WRAP);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">&quot;Signature:&quot;</span> + signatureStr);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> signatureStr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">catch</span> (NoSuchAlgorithmException | InvalidKeyException | SignatureException e) &#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">&quot;error in digital signature&quot;</span> + e);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>signatureBytes 를 변형 없이 encoding 하기 위해 Base64.NO_WRAP 옵션을 사용하는 것이 좋다. 왜일까?</p>\n<blockquote>\n<p> 여기서 주의할 점이 나온다 ! </p>\n</blockquote>\n<p>긴 길이의 byte 배열의 경우, </p>\n<ul>\n<li><p><strong>Base64.Default</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Default values for encoder&#x2F;decoder flags.</span><br><span class=\"line\">Constant Value: 0</span><br></pre></td></tr></table></figure>\n<p>위는 android developers 레퍼런스 설명이다. default 옵션으로, 이 옵션의 경우 76자가 넘는 위치에 개행문자(\\n)가 삽입된다. </p>\n<ul>\n<li><p><strong>예시</strong> </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String signatureStr = Base64.encodeToString(signatureBytes, Base64.DEFAULT);</span><br><span class=\"line\">Log.d(TAG, <span class=\"string\">&quot;Signature:&quot;</span> + signatureStr);</span><br></pre></td></tr></table></figure>\n<p><strong>결과</strong> -&gt; 세보진 않았지만 76자 마다 개행문자가 삽입되는 것을 확인할 수 있다.</p>\n<p><img src=\"../image/2020-08-242.10.47.png\" alt=\"2020-08-242.10.47\"></p>\n</li>\n</ul>\n</li>\n<li><p><strong>Base64.NO_WRAP</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Encoder flag bit to omit all line terminators (i.e., the output will be on one long line).</span><br><span class=\"line\">Constant Value: 2 </span><br></pre></td></tr></table></figure>\n<p>즉, 개행문자를 삽입하지 않고 긴 한줄의 output 을 갖는다.</p>\n<ul>\n<li><p><strong>예시</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String signatureStr = Base64.encodeToString(signatureBytes, Base64.NO_WRAP);</span><br><span class=\"line\">Log.d(TAG, <span class=\"string\">&quot;Signature:&quot;</span> + signatureStr);</span><br></pre></td></tr></table></figure>\n<p><strong>결과</strong> -&gt; 끊김 없이 한 줄로 나오는 것을 확인할 수 있다.</p>\n<p><img src=\"../image/2020-08-242.07.26.png\" alt=\"2020-08-242.07.26\"></p>\n</li>\n</ul>\n</li>\n<li><p>이 외에도, <strong>CRLF / NO_CLOSE / NO_PADDING / URL_SAFE</strong> 옵션이 있다.</p>\n</li>\n</ul>\n<blockquote>\n<p>publicKey 를 서버로 전송하는 경우에는 DEFAULT 옵션을 사용하여야 했다.</p>\n<p>때에 따라서 알맞은 옵션을 사용하도록 하자 ! </p>\n</blockquote>\n<p>마지막으로 ! decoding 시에도 동일한 옵션을 사용해 주어야 한다. 나 같은 경우에는 아래와 같은 코드를 이용했다 (NO_WRAP)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Base64.decode(signatureStr, Base64.NO_WRAP);</span><br></pre></td></tr></table></figure>\n\n\n<p>출처: <a href=\"https://kjwsx23.tistory.com/234\">https://kjwsx23.tistory.com/234</a> </p>\n"},{"title":"[안드로이드] 해시 키 얻어오기 - Kotlin","date":"2020-08-14T12:23:00.000Z","_content":"\n\n\n안드로이드 스튜디오에서 코드를 통해 해시 키를 얻어올 수 있다.\n\n\"package name\"에 프로젝트 패키지 네임을 넣고 실행하면 로그에 해시키가 찍힌다.\n\n```kotlin\n override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        try {     // 해시키\n            val info = packageManager.getPackageInfo(\"package name\", PackageManager.GET_SIGNATURES)\n            for (signature in info.signatures) {\n                val md = MessageDigest.getInstance(\"SHA\")\n                md.update(signature.toByteArray())\n                val sign = Base64.encodeToString(md.digest(), Base64.DEFAULT)\n                Log.e(\"hash key TAG\", \"hash key : $sign\")\n                //Toast.makeText(getApplicationContext(),sign,     Toast.LENGTH_LONG).show();\n            }\n        } catch (e: PackageManager.NameNotFoundException) {\n            Log.e(\"hash key TAG\", \"error: $e\")\n        } catch (e: NoSuchAlgorithmException) {\n            Log.e(\"hash key TAG\", \"error: $e\")\n        }\n    }\n```\n\n","source":"_posts/android-hash-key.md","raw":"---\ntitle: \"[안드로이드] 해시 키 얻어오기 - Kotlin\"\ndate: 2020-08-14 21:23:00\ntags: 안드로이드\n---\n\n\n\n안드로이드 스튜디오에서 코드를 통해 해시 키를 얻어올 수 있다.\n\n\"package name\"에 프로젝트 패키지 네임을 넣고 실행하면 로그에 해시키가 찍힌다.\n\n```kotlin\n override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_main)\n        try {     // 해시키\n            val info = packageManager.getPackageInfo(\"package name\", PackageManager.GET_SIGNATURES)\n            for (signature in info.signatures) {\n                val md = MessageDigest.getInstance(\"SHA\")\n                md.update(signature.toByteArray())\n                val sign = Base64.encodeToString(md.digest(), Base64.DEFAULT)\n                Log.e(\"hash key TAG\", \"hash key : $sign\")\n                //Toast.makeText(getApplicationContext(),sign,     Toast.LENGTH_LONG).show();\n            }\n        } catch (e: PackageManager.NameNotFoundException) {\n            Log.e(\"hash key TAG\", \"error: $e\")\n        } catch (e: NoSuchAlgorithmException) {\n            Log.e(\"hash key TAG\", \"error: $e\")\n        }\n    }\n```\n\n","slug":"android-hash-key","published":1,"updated":"2021-02-08T18:25:17.538Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jd0005f9c96d51750x","content":"<p>안드로이드 스튜디오에서 코드를 통해 해시 키를 얻어올 수 있다.</p>\n<p>“package name”에 프로젝트 패키지 네임을 넣고 실행하면 로그에 해시키가 찍힌다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">       setContentView(R.layout.activity_main)</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;     <span class=\"comment\">// 해시키</span></span><br><span class=\"line\">           <span class=\"keyword\">val</span> info = packageManager.getPackageInfo(<span class=\"string\">&quot;package name&quot;</span>, PackageManager.GET_SIGNATURES)</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (signature <span class=\"keyword\">in</span> info.signatures) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">val</span> md = MessageDigest.getInstance(<span class=\"string\">&quot;SHA&quot;</span>)</span><br><span class=\"line\">               md.update(signature.toByteArray())</span><br><span class=\"line\">               <span class=\"keyword\">val</span> sign = Base64.encodeToString(md.digest(), Base64.DEFAULT)</span><br><span class=\"line\">               Log.e(<span class=\"string\">&quot;hash key TAG&quot;</span>, <span class=\"string\">&quot;hash key : <span class=\"variable\">$sign</span>&quot;</span>)</span><br><span class=\"line\">               <span class=\"comment\">//Toast.makeText(getApplicationContext(),sign,     Toast.LENGTH_LONG).show();</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (e: PackageManager.NameNotFoundException) &#123;</span><br><span class=\"line\">           Log.e(<span class=\"string\">&quot;hash key TAG&quot;</span>, <span class=\"string\">&quot;error: <span class=\"variable\">$e</span>&quot;</span>)</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (e: NoSuchAlgorithmException) &#123;</span><br><span class=\"line\">           Log.e(<span class=\"string\">&quot;hash key TAG&quot;</span>, <span class=\"string\">&quot;error: <span class=\"variable\">$e</span>&quot;</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>안드로이드 스튜디오에서 코드를 통해 해시 키를 얻어올 수 있다.</p>\n<p>“package name”에 프로젝트 패키지 네임을 넣고 실행하면 로그에 해시키가 찍힌다.</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">       setContentView(R.layout.activity_main)</span><br><span class=\"line\">       <span class=\"keyword\">try</span> &#123;     <span class=\"comment\">// 해시키</span></span><br><span class=\"line\">           <span class=\"keyword\">val</span> info = packageManager.getPackageInfo(<span class=\"string\">&quot;package name&quot;</span>, PackageManager.GET_SIGNATURES)</span><br><span class=\"line\">           <span class=\"keyword\">for</span> (signature <span class=\"keyword\">in</span> info.signatures) &#123;</span><br><span class=\"line\">               <span class=\"keyword\">val</span> md = MessageDigest.getInstance(<span class=\"string\">&quot;SHA&quot;</span>)</span><br><span class=\"line\">               md.update(signature.toByteArray())</span><br><span class=\"line\">               <span class=\"keyword\">val</span> sign = Base64.encodeToString(md.digest(), Base64.DEFAULT)</span><br><span class=\"line\">               Log.e(<span class=\"string\">&quot;hash key TAG&quot;</span>, <span class=\"string\">&quot;hash key : <span class=\"variable\">$sign</span>&quot;</span>)</span><br><span class=\"line\">               <span class=\"comment\">//Toast.makeText(getApplicationContext(),sign,     Toast.LENGTH_LONG).show();</span></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (e: PackageManager.NameNotFoundException) &#123;</span><br><span class=\"line\">           Log.e(<span class=\"string\">&quot;hash key TAG&quot;</span>, <span class=\"string\">&quot;error: <span class=\"variable\">$e</span>&quot;</span>)</span><br><span class=\"line\">       &#125; <span class=\"keyword\">catch</span> (e: NoSuchAlgorithmException) &#123;</span><br><span class=\"line\">           Log.e(<span class=\"string\">&quot;hash key TAG&quot;</span>, <span class=\"string\">&quot;error: <span class=\"variable\">$e</span>&quot;</span>)</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"[앵귤러/Angular] 클래스 바인딩 문법","date":"2020-03-10T06:14:00.000Z","_content":"\n\n\nAngular가 제공하는 [클래스 바인딩](https://angular.kr/guide/template-syntax#class-binding) 문법을 사용하면 특정 조건에 따라 CSS 클래스를 추가하거나 제거할 수 있습니다. 스타일을 지정하려는 엘리먼트에 `[class.some-css-class]=\"some-condition\"`와 같은 문법을 추가하면 됩니다.\n\n\n\n#### html파일\n\n```html\n[class.selected]=\"hero === selectedHero\"\n```\n\n-  hero === selectedHero인 줄에 selected CSS 클래스가 추가된다. \n\n#### css파일\n\n```css\n.heroes li.selected {\n    background-color: #CFD8DC;\n    color: white;\n}\n.heroes li.selected:hover {\n    background-color: #BBD8DC;\n    color: white;\n}\n```\n\n\n\n---추가예정---\n\n","source":"_posts/angular-class-binding.md","raw":"---\ntitle: \"[앵귤러/Angular] 클래스 바인딩 문법\"\ndate: 2020-03-10 15:14:00\ntags: 앵귤러\n---\n\n\n\nAngular가 제공하는 [클래스 바인딩](https://angular.kr/guide/template-syntax#class-binding) 문법을 사용하면 특정 조건에 따라 CSS 클래스를 추가하거나 제거할 수 있습니다. 스타일을 지정하려는 엘리먼트에 `[class.some-css-class]=\"some-condition\"`와 같은 문법을 추가하면 됩니다.\n\n\n\n#### html파일\n\n```html\n[class.selected]=\"hero === selectedHero\"\n```\n\n-  hero === selectedHero인 줄에 selected CSS 클래스가 추가된다. \n\n#### css파일\n\n```css\n.heroes li.selected {\n    background-color: #CFD8DC;\n    color: white;\n}\n.heroes li.selected:hover {\n    background-color: #BBD8DC;\n    color: white;\n}\n```\n\n\n\n---추가예정---\n\n","slug":"angular-class-binding","published":1,"updated":"2021-02-08T18:25:17.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0je0008f9c90q5y16nf","content":"<p>Angular가 제공하는 <a href=\"https://angular.kr/guide/template-syntax#class-binding\">클래스 바인딩</a> 문법을 사용하면 특정 조건에 따라 CSS 클래스를 추가하거나 제거할 수 있습니다. 스타일을 지정하려는 엘리먼트에 <code>[class.some-css-class]=&quot;some-condition&quot;</code>와 같은 문법을 추가하면 됩니다.</p>\n<h4 id=\"html파일\"><a href=\"#html파일\" class=\"headerlink\" title=\"html파일\"></a>html파일</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[class.selected]=&quot;hero === selectedHero&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li> hero === selectedHero인 줄에 selected CSS 클래스가 추가된다. </li>\n</ul>\n<h4 id=\"css파일\"><a href=\"#css파일\" class=\"headerlink\" title=\"css파일\"></a>css파일</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.heroes</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.selected</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#CFD8DC</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.heroes</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.selected</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#BBD8DC</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>—추가예정—</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Angular가 제공하는 <a href=\"https://angular.kr/guide/template-syntax#class-binding\">클래스 바인딩</a> 문법을 사용하면 특정 조건에 따라 CSS 클래스를 추가하거나 제거할 수 있습니다. 스타일을 지정하려는 엘리먼트에 <code>[class.some-css-class]=&quot;some-condition&quot;</code>와 같은 문법을 추가하면 됩니다.</p>\n<h4 id=\"html파일\"><a href=\"#html파일\" class=\"headerlink\" title=\"html파일\"></a>html파일</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[class.selected]=&quot;hero === selectedHero&quot;</span><br></pre></td></tr></table></figure>\n<ul>\n<li> hero === selectedHero인 줄에 selected CSS 클래스가 추가된다. </li>\n</ul>\n<h4 id=\"css파일\"><a href=\"#css파일\" class=\"headerlink\" title=\"css파일\"></a>css파일</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.heroes</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.selected</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#CFD8DC</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.heroes</span> <span class=\"selector-tag\">li</span><span class=\"selector-class\">.selected</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#BBD8DC</span>;</span><br><span class=\"line\">    <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>—추가예정—</p>\n"},{"title":"[앵귤러/Angular] URL에 존재하는 라우팅 변수 참조하기(ActivatedRoute 이용)","date":"2020-03-12T12:56:00.000Z","_content":"\n\n\n### ActivatedRoute\n\n- 컴포넌트의 인스턴스를 생성하면서 적용한 라우팅 규칙에 대한 정보를 담고있다.\n\n- 아래 코드를 통해 로드할 수 있다.\n\n  ```typescript\n  import { ActivatedRoute } from '@angular/router';\n  ```\n\n\n\n#### URL에 존재하는 라우팅 변수 참조하기\n\n1. 라우팅 변수를 참고할 컴포넌트의 생성자에 ActivatedRoute를 private 프로퍼티로 선언한다.\n\n   ```typescript\n   constructor(\n     private route: ActivatedRoute\n   ) {}\n   ```\n\n2. 예를 들어 '/detail/:id' 형태의 URL에서 id값을 가져오고 싶을 때, 아래 코드를 입력한다.\n\n   ```typescript\n   const id = +this.route.snapshot.paraMap.get('id');\n   ```\n\n   - `route.snapshot`: 컴포넌트가 생성된 직후에 존재하는 라우팅 규칙에 대한 정보를 담고있는 객체이다.\n   - `paraMap`: route.snapshot 객체가 paraMap을 사용하면 URL에 존재하는 라우팅 변수를 참조할 수 있다.\n\n   > 추가: javaScript (+) 연산자를 사용해서 라우팅 변수를 숫자로 변환하였다.","source":"_posts/angular-activatedRoute.md","raw":"---\ntitle: \"[앵귤러/Angular] URL에 존재하는 라우팅 변수 참조하기(ActivatedRoute 이용)\"\ndate: 2020-03-12 21:56:00\ntags: 앵귤러\n---\n\n\n\n### ActivatedRoute\n\n- 컴포넌트의 인스턴스를 생성하면서 적용한 라우팅 규칙에 대한 정보를 담고있다.\n\n- 아래 코드를 통해 로드할 수 있다.\n\n  ```typescript\n  import { ActivatedRoute } from '@angular/router';\n  ```\n\n\n\n#### URL에 존재하는 라우팅 변수 참조하기\n\n1. 라우팅 변수를 참고할 컴포넌트의 생성자에 ActivatedRoute를 private 프로퍼티로 선언한다.\n\n   ```typescript\n   constructor(\n     private route: ActivatedRoute\n   ) {}\n   ```\n\n2. 예를 들어 '/detail/:id' 형태의 URL에서 id값을 가져오고 싶을 때, 아래 코드를 입력한다.\n\n   ```typescript\n   const id = +this.route.snapshot.paraMap.get('id');\n   ```\n\n   - `route.snapshot`: 컴포넌트가 생성된 직후에 존재하는 라우팅 규칙에 대한 정보를 담고있는 객체이다.\n   - `paraMap`: route.snapshot 객체가 paraMap을 사용하면 URL에 존재하는 라우팅 변수를 참조할 수 있다.\n\n   > 추가: javaScript (+) 연산자를 사용해서 라우팅 변수를 숫자로 변환하였다.","slug":"angular-activatedRoute","published":1,"updated":"2021-02-08T18:25:16.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jf0009f9c90hil4k5y","content":"<h3 id=\"ActivatedRoute\"><a href=\"#ActivatedRoute\" class=\"headerlink\" title=\"ActivatedRoute\"></a>ActivatedRoute</h3><ul>\n<li><p>컴포넌트의 인스턴스를 생성하면서 적용한 라우팅 규칙에 대한 정보를 담고있다.</p>\n</li>\n<li><p>아래 코드를 통해 로드할 수 있다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h4 id=\"URL에-존재하는-라우팅-변수-참조하기\"><a href=\"#URL에-존재하는-라우팅-변수-참조하기\" class=\"headerlink\" title=\"URL에 존재하는 라우팅 변수 참조하기\"></a>URL에 존재하는 라우팅 변수 참조하기</h4><ol>\n<li><p>라우팅 변수를 참고할 컴포넌트의 생성자에 ActivatedRoute를 private 프로퍼티로 선언한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"keyword\">private</span> route: ActivatedRoute</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>예를 들어 ‘/detail/:id’ 형태의 URL에서 id값을 가져오고 싶을 때, 아래 코드를 입력한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> id = +<span class=\"built_in\">this</span>.route.snapshot.paraMap.get(<span class=\"string\">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>route.snapshot</code>: 컴포넌트가 생성된 직후에 존재하는 라우팅 규칙에 대한 정보를 담고있는 객체이다.</li>\n<li><code>paraMap</code>: route.snapshot 객체가 paraMap을 사용하면 URL에 존재하는 라우팅 변수를 참조할 수 있다.</li>\n</ul>\n<blockquote>\n<p>추가: javaScript (+) 연산자를 사용해서 라우팅 변수를 숫자로 변환하였다.</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"ActivatedRoute\"><a href=\"#ActivatedRoute\" class=\"headerlink\" title=\"ActivatedRoute\"></a>ActivatedRoute</h3><ul>\n<li><p>컴포넌트의 인스턴스를 생성하면서 적용한 라우팅 규칙에 대한 정보를 담고있다.</p>\n</li>\n<li><p>아래 코드를 통해 로드할 수 있다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; ActivatedRoute &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h4 id=\"URL에-존재하는-라우팅-변수-참조하기\"><a href=\"#URL에-존재하는-라우팅-변수-참조하기\" class=\"headerlink\" title=\"URL에 존재하는 라우팅 변수 참조하기\"></a>URL에 존재하는 라우팅 변수 참조하기</h4><ol>\n<li><p>라우팅 변수를 참고할 컴포넌트의 생성자에 ActivatedRoute를 private 프로퍼티로 선언한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">  <span class=\"keyword\">private</span> route: ActivatedRoute</span></span><br><span class=\"line\"><span class=\"params\"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>예를 들어 ‘/detail/:id’ 형태의 URL에서 id값을 가져오고 싶을 때, 아래 코드를 입력한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> id = +<span class=\"built_in\">this</span>.route.snapshot.paraMap.get(<span class=\"string\">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>route.snapshot</code>: 컴포넌트가 생성된 직후에 존재하는 라우팅 규칙에 대한 정보를 담고있는 객체이다.</li>\n<li><code>paraMap</code>: route.snapshot 객체가 paraMap을 사용하면 URL에 존재하는 라우팅 변수를 참조할 수 있다.</li>\n</ul>\n<blockquote>\n<p>추가: javaScript (+) 연산자를 사용해서 라우팅 변수를 숫자로 변환하였다.</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"[앵귤러/Angular] Angular CLI 서비스 클래스 생성","date":"2020-03-11T05:42:00.000Z","_content":"\n\n\n아래 명령을 이용하면 서비스 클래스 파일이 생성된다.  \n\n```\nng generate service hero\n```\n\n`hero.sevice.ts` 초기 생성 파일은 아래와 같다.\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HeroService {\n  constructor() { }\n}\n```\n\n- *@Injectable()* : 클래스를 인젝터에 프로바이더로 등록할 때 사용하는 데코레이터","source":"_posts/angular-cli-class.md","raw":"---\ntitle: \"[앵귤러/Angular] Angular CLI 서비스 클래스 생성\"\ndate: 2020-03-11 14:42:00\ntags: 앵귤러\n---\n\n\n\n아래 명령을 이용하면 서비스 클래스 파일이 생성된다.  \n\n```\nng generate service hero\n```\n\n`hero.sevice.ts` 초기 생성 파일은 아래와 같다.\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class HeroService {\n  constructor() { }\n}\n```\n\n- *@Injectable()* : 클래스를 인젝터에 프로바이더로 등록할 때 사용하는 데코레이터","slug":"angular-cli-class","published":1,"updated":"2021-02-08T18:25:16.997Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jg000bf9c9f3mz684e","content":"<p>아래 명령을 이용하면 서비스 클래스 파일이 생성된다.  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service hero</span><br></pre></td></tr></table></figure>\n<p><code>hero.sevice.ts</code> 초기 생성 파일은 아래와 같다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><em>@Injectable()</em> : 클래스를 인젝터에 프로바이더로 등록할 때 사용하는 데코레이터</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>아래 명령을 이용하면 서비스 클래스 파일이 생성된다.  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service hero</span><br></pre></td></tr></table></figure>\n<p><code>hero.sevice.ts</code> 초기 생성 파일은 아래와 같다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  providedIn: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><em>@Injectable()</em> : 클래스를 인젝터에 프로바이더로 등록할 때 사용하는 데코레이터</li>\n</ul>\n"},{"title":"[앵귤러/Angular] Angular cli overview 정리","date":"2020-03-11T02:04:00.000Z","_content":"\n\n\n## Angular CLI 설치\n\n```\nnpm install -g @angular/cli\n```\n\n\n\n### 기본 워크 플로우\n\n주어진 명령에 대한 명령 또는 옵션 (예 : [generate](https://angular.kr/cli/generate) )을 간단한 설명과 함께 나열하려면 다음을 입력하면 된다.\n\n```\nng help\nng generate --help\n```\n\n개발 서버에서 새 기본 Angular 프로젝트를 작성, 빌드 및 제공하려면 다음 명령을 사용하여 새 작업 공간의 상위 디렉토리로 이동할 수 있다.\n\n```\nnew my-first-project \ncd my-first-project \nng serve\n```\n\n브라우저에서 [http : // localhost : 4200 /](http://localhost:4200/) 을 열어 앱 실행을 확인할 수 있다.\n\n\n\n### CLI 명령 언어 구문\n\nng *commandNameOrAlias* *requiredArg* [optionalArg] [options]\n\n- 옵션 이름 앞에는 이중 대시(-)가 붙습니다. 옵션 별명은 단일 대시 (-)로 시작한다.\n\n- 인수 및 옵션 이름은 **camelCase** 또는 **dash-case**로 지정할 수 있다. (예 : --myOptionName 또는 --my-option-name)\n\n  \n\n### 명령 개요\n\n| 명령                                            | 별명           | 기술                                                         |\n| :---------------------------------------------- | :------------- | :----------------------------------------------------------- |\n| [`add`](https://angular.kr/cli/add)             |                | 프로젝트에 외부 라이브러리에 대한 지원을 추가합니다.         |\n| [`analytics`](https://angular.kr/cli/analytics) |                | Angular CLI 사용 메트릭 수집을 구성                          |\n| [`build`](https://angular.kr/cli/build)         | `b`            | 주어진 출력 경로에서 Angular 앱을 dist /라는 출력 디렉토리로 컴파일 (작업 공간 디렉토리 내에서 실행해야한다.) |\n| [`config`](https://angular.kr/cli/config)       |                | 작업 공간의 angular.json 파일에서 각도 구성 값을 검색하거나 설정 |\n| [`deploy`](https://angular.kr/cli/deploy)       |                | 작업 공간에서 지정된 프로젝트 또는 기본 프로젝트에 대한 배치 빌더를 호출 |\n| [`doc`](https://angular.kr/cli/doc)             | `d`            | 브라우저에서 공식 Angular 문서 (angular.io)를 열고 주어진 키워드를 검색 |\n| [`e2e`](https://angular.kr/cli/e2e)             | `e`            | Angular 앱을 빌드하고 제공 한 다음 각도기를 사용하여 엔드 투 엔드 테스트 |\n| [`generate`](https://angular.kr/cli/generate)   | `g`            | 회로도를 기반으로 파일을 생성 및 / 또는 수정                 |\n| [`help`](https://angular.kr/cli/help)           |                | 사용 가능한 명령과 간단한 설명을 나열                        |\n| [`lint`](https://angular.kr/cli/lint)           | `l`            | 주어진 프로젝트 폴더의 Angular 앱 코드에서 Linting 도구를 실행 |\n| [`new`](https://angular.kr/cli/new)             | `n`            | 새로운 작업 공간과 초기 Angular 앱을 생성                    |\n| [`run`](https://angular.kr/cli/run)             |                | 프로젝트에 정의 된 선택적 사용자 정의 빌더 구성으로 Architect 대상을 실행 |\n| [`serve`](https://angular.kr/cli/serve)         | `s`            | 파일 변경 사항을 다시 작성하여 앱을 빌드하고 제공            |\n| [`test`](https://angular.kr/cli/test)           | `t`            | 프로젝트에서 단위 테스트를 실행                              |\n| [`update`](https://angular.kr/cli/update)       |                | 응용 프로그램 및 해당 종속성을 업데이트                      |\n| [`version`](https://angular.kr/cli/version)     | `v`            | Angular CLI 버전을 출력                                      |\n| [`xi18n`](https://angular.kr/cli/xi18n)         | `i18n-extract` | 소스 코드에서 i18n 메시지를 추출                             |\n\n> 앱 및 라이브러리에서 생성하거나 작동하는 [add](https://angular.kr/cli/add) 및 [generate](https://angular.kr/cli/generate) 와 같은 명령은 작업 영역 또는 프로젝트 폴더 내에서 실행해야한다.\n>\n> [ng generate](https://angular.kr/cli/generate) 명령을 사용하여 추가 구성 요소 및 서비스를위한 새 파일을 추가하고 새 파이프, 지시문 등을위한 코드를 추가할 수 있다.\n\n>  [ng new](https://angular.kr/cli/new) 명령으로 작성된 초기 앱은 작업 공간의 최상위 레벨에 있으며, 작업 공간에서 추가 앱 또는 라이브러리를 생성하면 `projects/`하위 폴더로 이동 할 수 있다.","source":"_posts/angular-cli-overview.md","raw":"---\ntitle: \"[앵귤러/Angular] Angular cli overview 정리\"\ndate: 2020-03-11 11:04:00\ntags: 앵귤러\n---\n\n\n\n## Angular CLI 설치\n\n```\nnpm install -g @angular/cli\n```\n\n\n\n### 기본 워크 플로우\n\n주어진 명령에 대한 명령 또는 옵션 (예 : [generate](https://angular.kr/cli/generate) )을 간단한 설명과 함께 나열하려면 다음을 입력하면 된다.\n\n```\nng help\nng generate --help\n```\n\n개발 서버에서 새 기본 Angular 프로젝트를 작성, 빌드 및 제공하려면 다음 명령을 사용하여 새 작업 공간의 상위 디렉토리로 이동할 수 있다.\n\n```\nnew my-first-project \ncd my-first-project \nng serve\n```\n\n브라우저에서 [http : // localhost : 4200 /](http://localhost:4200/) 을 열어 앱 실행을 확인할 수 있다.\n\n\n\n### CLI 명령 언어 구문\n\nng *commandNameOrAlias* *requiredArg* [optionalArg] [options]\n\n- 옵션 이름 앞에는 이중 대시(-)가 붙습니다. 옵션 별명은 단일 대시 (-)로 시작한다.\n\n- 인수 및 옵션 이름은 **camelCase** 또는 **dash-case**로 지정할 수 있다. (예 : --myOptionName 또는 --my-option-name)\n\n  \n\n### 명령 개요\n\n| 명령                                            | 별명           | 기술                                                         |\n| :---------------------------------------------- | :------------- | :----------------------------------------------------------- |\n| [`add`](https://angular.kr/cli/add)             |                | 프로젝트에 외부 라이브러리에 대한 지원을 추가합니다.         |\n| [`analytics`](https://angular.kr/cli/analytics) |                | Angular CLI 사용 메트릭 수집을 구성                          |\n| [`build`](https://angular.kr/cli/build)         | `b`            | 주어진 출력 경로에서 Angular 앱을 dist /라는 출력 디렉토리로 컴파일 (작업 공간 디렉토리 내에서 실행해야한다.) |\n| [`config`](https://angular.kr/cli/config)       |                | 작업 공간의 angular.json 파일에서 각도 구성 값을 검색하거나 설정 |\n| [`deploy`](https://angular.kr/cli/deploy)       |                | 작업 공간에서 지정된 프로젝트 또는 기본 프로젝트에 대한 배치 빌더를 호출 |\n| [`doc`](https://angular.kr/cli/doc)             | `d`            | 브라우저에서 공식 Angular 문서 (angular.io)를 열고 주어진 키워드를 검색 |\n| [`e2e`](https://angular.kr/cli/e2e)             | `e`            | Angular 앱을 빌드하고 제공 한 다음 각도기를 사용하여 엔드 투 엔드 테스트 |\n| [`generate`](https://angular.kr/cli/generate)   | `g`            | 회로도를 기반으로 파일을 생성 및 / 또는 수정                 |\n| [`help`](https://angular.kr/cli/help)           |                | 사용 가능한 명령과 간단한 설명을 나열                        |\n| [`lint`](https://angular.kr/cli/lint)           | `l`            | 주어진 프로젝트 폴더의 Angular 앱 코드에서 Linting 도구를 실행 |\n| [`new`](https://angular.kr/cli/new)             | `n`            | 새로운 작업 공간과 초기 Angular 앱을 생성                    |\n| [`run`](https://angular.kr/cli/run)             |                | 프로젝트에 정의 된 선택적 사용자 정의 빌더 구성으로 Architect 대상을 실행 |\n| [`serve`](https://angular.kr/cli/serve)         | `s`            | 파일 변경 사항을 다시 작성하여 앱을 빌드하고 제공            |\n| [`test`](https://angular.kr/cli/test)           | `t`            | 프로젝트에서 단위 테스트를 실행                              |\n| [`update`](https://angular.kr/cli/update)       |                | 응용 프로그램 및 해당 종속성을 업데이트                      |\n| [`version`](https://angular.kr/cli/version)     | `v`            | Angular CLI 버전을 출력                                      |\n| [`xi18n`](https://angular.kr/cli/xi18n)         | `i18n-extract` | 소스 코드에서 i18n 메시지를 추출                             |\n\n> 앱 및 라이브러리에서 생성하거나 작동하는 [add](https://angular.kr/cli/add) 및 [generate](https://angular.kr/cli/generate) 와 같은 명령은 작업 영역 또는 프로젝트 폴더 내에서 실행해야한다.\n>\n> [ng generate](https://angular.kr/cli/generate) 명령을 사용하여 추가 구성 요소 및 서비스를위한 새 파일을 추가하고 새 파이프, 지시문 등을위한 코드를 추가할 수 있다.\n\n>  [ng new](https://angular.kr/cli/new) 명령으로 작성된 초기 앱은 작업 공간의 최상위 레벨에 있으며, 작업 공간에서 추가 앱 또는 라이브러리를 생성하면 `projects/`하위 폴더로 이동 할 수 있다.","slug":"angular-cli-overview","published":1,"updated":"2021-02-08T18:25:17.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jh000df9c99iu594dg","content":"<h2 id=\"Angular-CLI-설치\"><a href=\"#Angular-CLI-설치\" class=\"headerlink\" title=\"Angular CLI 설치\"></a>Angular CLI 설치</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @angular&#x2F;cli</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"기본-워크-플로우\"><a href=\"#기본-워크-플로우\" class=\"headerlink\" title=\"기본 워크 플로우\"></a>기본 워크 플로우</h3><p>주어진 명령에 대한 명령 또는 옵션 (예 : <a href=\"https://angular.kr/cli/generate\">generate</a> )을 간단한 설명과 함께 나열하려면 다음을 입력하면 된다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng help</span><br><span class=\"line\">ng generate --help</span><br></pre></td></tr></table></figure>\n<p>개발 서버에서 새 기본 Angular 프로젝트를 작성, 빌드 및 제공하려면 다음 명령을 사용하여 새 작업 공간의 상위 디렉토리로 이동할 수 있다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new my-first-project </span><br><span class=\"line\">cd my-first-project </span><br><span class=\"line\">ng serve</span><br></pre></td></tr></table></figure>\n<p>브라우저에서 <a href=\"http://localhost:4200/\">http : // localhost : 4200 /</a> 을 열어 앱 실행을 확인할 수 있다.</p>\n<h3 id=\"CLI-명령-언어-구문\"><a href=\"#CLI-명령-언어-구문\" class=\"headerlink\" title=\"CLI 명령 언어 구문\"></a>CLI 명령 언어 구문</h3><p>ng <em>commandNameOrAlias</em> <em>requiredArg</em> [optionalArg] [options]</p>\n<ul>\n<li><p>옵션 이름 앞에는 이중 대시(-)가 붙습니다. 옵션 별명은 단일 대시 (-)로 시작한다.</p>\n</li>\n<li><p>인수 및 옵션 이름은 <strong>camelCase</strong> 또는 <strong>dash-case</strong>로 지정할 수 있다. (예 : –myOptionName 또는 –my-option-name)</p>\n</li>\n</ul>\n<h3 id=\"명령-개요\"><a href=\"#명령-개요\" class=\"headerlink\" title=\"명령 개요\"></a>명령 개요</h3><table>\n<thead>\n<tr>\n<th align=\"left\">명령</th>\n<th align=\"left\">별명</th>\n<th align=\"left\">기술</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/add\"><code>add</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">프로젝트에 외부 라이브러리에 대한 지원을 추가합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/analytics\"><code>analytics</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">Angular CLI 사용 메트릭 수집을 구성</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/build\"><code>build</code></a></td>\n<td align=\"left\"><code>b</code></td>\n<td align=\"left\">주어진 출력 경로에서 Angular 앱을 dist /라는 출력 디렉토리로 컴파일 (작업 공간 디렉토리 내에서 실행해야한다.)</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/config\"><code>config</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">작업 공간의 angular.json 파일에서 각도 구성 값을 검색하거나 설정</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/deploy\"><code>deploy</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">작업 공간에서 지정된 프로젝트 또는 기본 프로젝트에 대한 배치 빌더를 호출</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/doc\"><code>doc</code></a></td>\n<td align=\"left\"><code>d</code></td>\n<td align=\"left\">브라우저에서 공식 Angular 문서 (angular.io)를 열고 주어진 키워드를 검색</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/e2e\"><code>e2e</code></a></td>\n<td align=\"left\"><code>e</code></td>\n<td align=\"left\">Angular 앱을 빌드하고 제공 한 다음 각도기를 사용하여 엔드 투 엔드 테스트</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/generate\"><code>generate</code></a></td>\n<td align=\"left\"><code>g</code></td>\n<td align=\"left\">회로도를 기반으로 파일을 생성 및 / 또는 수정</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/help\"><code>help</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">사용 가능한 명령과 간단한 설명을 나열</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/lint\"><code>lint</code></a></td>\n<td align=\"left\"><code>l</code></td>\n<td align=\"left\">주어진 프로젝트 폴더의 Angular 앱 코드에서 Linting 도구를 실행</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/new\"><code>new</code></a></td>\n<td align=\"left\"><code>n</code></td>\n<td align=\"left\">새로운 작업 공간과 초기 Angular 앱을 생성</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/run\"><code>run</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">프로젝트에 정의 된 선택적 사용자 정의 빌더 구성으로 Architect 대상을 실행</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/serve\"><code>serve</code></a></td>\n<td align=\"left\"><code>s</code></td>\n<td align=\"left\">파일 변경 사항을 다시 작성하여 앱을 빌드하고 제공</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/test\"><code>test</code></a></td>\n<td align=\"left\"><code>t</code></td>\n<td align=\"left\">프로젝트에서 단위 테스트를 실행</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/update\"><code>update</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">응용 프로그램 및 해당 종속성을 업데이트</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/version\"><code>version</code></a></td>\n<td align=\"left\"><code>v</code></td>\n<td align=\"left\">Angular CLI 버전을 출력</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/xi18n\"><code>xi18n</code></a></td>\n<td align=\"left\"><code>i18n-extract</code></td>\n<td align=\"left\">소스 코드에서 i18n 메시지를 추출</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>앱 및 라이브러리에서 생성하거나 작동하는 <a href=\"https://angular.kr/cli/add\">add</a> 및 <a href=\"https://angular.kr/cli/generate\">generate</a> 와 같은 명령은 작업 영역 또는 프로젝트 폴더 내에서 실행해야한다.</p>\n<p><a href=\"https://angular.kr/cli/generate\">ng generate</a> 명령을 사용하여 추가 구성 요소 및 서비스를위한 새 파일을 추가하고 새 파이프, 지시문 등을위한 코드를 추가할 수 있다.</p>\n</blockquote>\n<blockquote>\n<p> <a href=\"https://angular.kr/cli/new\">ng new</a> 명령으로 작성된 초기 앱은 작업 공간의 최상위 레벨에 있으며, 작업 공간에서 추가 앱 또는 라이브러리를 생성하면 <code>projects/</code>하위 폴더로 이동 할 수 있다.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Angular-CLI-설치\"><a href=\"#Angular-CLI-설치\" class=\"headerlink\" title=\"Angular CLI 설치\"></a>Angular CLI 설치</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @angular&#x2F;cli</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"기본-워크-플로우\"><a href=\"#기본-워크-플로우\" class=\"headerlink\" title=\"기본 워크 플로우\"></a>기본 워크 플로우</h3><p>주어진 명령에 대한 명령 또는 옵션 (예 : <a href=\"https://angular.kr/cli/generate\">generate</a> )을 간단한 설명과 함께 나열하려면 다음을 입력하면 된다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng help</span><br><span class=\"line\">ng generate --help</span><br></pre></td></tr></table></figure>\n<p>개발 서버에서 새 기본 Angular 프로젝트를 작성, 빌드 및 제공하려면 다음 명령을 사용하여 새 작업 공간의 상위 디렉토리로 이동할 수 있다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new my-first-project </span><br><span class=\"line\">cd my-first-project </span><br><span class=\"line\">ng serve</span><br></pre></td></tr></table></figure>\n<p>브라우저에서 <a href=\"http://localhost:4200/\">http : // localhost : 4200 /</a> 을 열어 앱 실행을 확인할 수 있다.</p>\n<h3 id=\"CLI-명령-언어-구문\"><a href=\"#CLI-명령-언어-구문\" class=\"headerlink\" title=\"CLI 명령 언어 구문\"></a>CLI 명령 언어 구문</h3><p>ng <em>commandNameOrAlias</em> <em>requiredArg</em> [optionalArg] [options]</p>\n<ul>\n<li><p>옵션 이름 앞에는 이중 대시(-)가 붙습니다. 옵션 별명은 단일 대시 (-)로 시작한다.</p>\n</li>\n<li><p>인수 및 옵션 이름은 <strong>camelCase</strong> 또는 <strong>dash-case</strong>로 지정할 수 있다. (예 : –myOptionName 또는 –my-option-name)</p>\n</li>\n</ul>\n<h3 id=\"명령-개요\"><a href=\"#명령-개요\" class=\"headerlink\" title=\"명령 개요\"></a>명령 개요</h3><table>\n<thead>\n<tr>\n<th align=\"left\">명령</th>\n<th align=\"left\">별명</th>\n<th align=\"left\">기술</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/add\"><code>add</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">프로젝트에 외부 라이브러리에 대한 지원을 추가합니다.</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/analytics\"><code>analytics</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">Angular CLI 사용 메트릭 수집을 구성</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/build\"><code>build</code></a></td>\n<td align=\"left\"><code>b</code></td>\n<td align=\"left\">주어진 출력 경로에서 Angular 앱을 dist /라는 출력 디렉토리로 컴파일 (작업 공간 디렉토리 내에서 실행해야한다.)</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/config\"><code>config</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">작업 공간의 angular.json 파일에서 각도 구성 값을 검색하거나 설정</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/deploy\"><code>deploy</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">작업 공간에서 지정된 프로젝트 또는 기본 프로젝트에 대한 배치 빌더를 호출</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/doc\"><code>doc</code></a></td>\n<td align=\"left\"><code>d</code></td>\n<td align=\"left\">브라우저에서 공식 Angular 문서 (angular.io)를 열고 주어진 키워드를 검색</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/e2e\"><code>e2e</code></a></td>\n<td align=\"left\"><code>e</code></td>\n<td align=\"left\">Angular 앱을 빌드하고 제공 한 다음 각도기를 사용하여 엔드 투 엔드 테스트</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/generate\"><code>generate</code></a></td>\n<td align=\"left\"><code>g</code></td>\n<td align=\"left\">회로도를 기반으로 파일을 생성 및 / 또는 수정</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/help\"><code>help</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">사용 가능한 명령과 간단한 설명을 나열</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/lint\"><code>lint</code></a></td>\n<td align=\"left\"><code>l</code></td>\n<td align=\"left\">주어진 프로젝트 폴더의 Angular 앱 코드에서 Linting 도구를 실행</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/new\"><code>new</code></a></td>\n<td align=\"left\"><code>n</code></td>\n<td align=\"left\">새로운 작업 공간과 초기 Angular 앱을 생성</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/run\"><code>run</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">프로젝트에 정의 된 선택적 사용자 정의 빌더 구성으로 Architect 대상을 실행</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/serve\"><code>serve</code></a></td>\n<td align=\"left\"><code>s</code></td>\n<td align=\"left\">파일 변경 사항을 다시 작성하여 앱을 빌드하고 제공</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/test\"><code>test</code></a></td>\n<td align=\"left\"><code>t</code></td>\n<td align=\"left\">프로젝트에서 단위 테스트를 실행</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/update\"><code>update</code></a></td>\n<td align=\"left\"></td>\n<td align=\"left\">응용 프로그램 및 해당 종속성을 업데이트</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/version\"><code>version</code></a></td>\n<td align=\"left\"><code>v</code></td>\n<td align=\"left\">Angular CLI 버전을 출력</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://angular.kr/cli/xi18n\"><code>xi18n</code></a></td>\n<td align=\"left\"><code>i18n-extract</code></td>\n<td align=\"left\">소스 코드에서 i18n 메시지를 추출</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>앱 및 라이브러리에서 생성하거나 작동하는 <a href=\"https://angular.kr/cli/add\">add</a> 및 <a href=\"https://angular.kr/cli/generate\">generate</a> 와 같은 명령은 작업 영역 또는 프로젝트 폴더 내에서 실행해야한다.</p>\n<p><a href=\"https://angular.kr/cli/generate\">ng generate</a> 명령을 사용하여 추가 구성 요소 및 서비스를위한 새 파일을 추가하고 새 파이프, 지시문 등을위한 코드를 추가할 수 있다.</p>\n</blockquote>\n<blockquote>\n<p> <a href=\"https://angular.kr/cli/new\">ng new</a> 명령으로 작성된 초기 앱은 작업 공간의 최상위 레벨에 있으며, 작업 공간에서 추가 앱 또는 라이브러리를 생성하면 <code>projects/</code>하위 폴더로 이동 할 수 있다.</p>\n</blockquote>\n"},{"title":"[앵귤러/Angular] AppRoutingModule 생성하기","date":"2020-03-12T09:10:00.000Z","_content":"\n\n\n애플리케이션 최상위 라우팅을 담당하는 모듈의 클래스 이름은 일반적으로 *AppRoutingModule*이라고 칭한다.\n\n```\nng generate module app-routing --flat --module=app\n```\n\nAngular CLI로 다음 명령을 실행하면 *app-routing.module.ts* 파일이 생성되며, 라우팅 모듈이 만들어진다. \n\n- `--flat` : 새로운 폴더를 만들지 않고 src/app 폴더에 파일 생성\n- `--module=app` : Angular CLI가 이 라우팅 모듈을 AppModule의 imports 배열에 자동으로 추가\n\n\n\n아래 코드는 기본적으로 생성되는 app.routing.module.ts 파일의 코드이다.\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n```\n\n위 코드를 라우팅 동작을 실행할 수 있도록 아래 코드를 입력하여 *RouterModule*과 *Routes* 심볼을 로드한다.\n\n```typescript\nimport { RouterModule, Routes } from '@angular/router';\n```\n\n또한 라우팅 규칙에 따라 이동할 컴포넌트 또한 로드한다.\n\n```typescript\nimport { 이동할Component } from '이동할 컴포넌트의 위치';\n```\n\n\n\n> 라우팅 규칙(Route)\n\n*라우팅 규칙*은 사용자가 링크를 클릭하거나 브라우저 주소표시줄에 URL을 직접 입력했을 때 라우터가 어떤 화면을 표시할지 정의한 것이다. \n\n```typescript\nconst routes: Routes = [\n    { path: 'URL과 매칭될 문자열', component: '화면에 표시할 컴포넌트'}\n];\n```\n\n위 코드를 *AppRoutingModule*에 추가한 후, `path: 'heroes'` 에 해당하는 URL을 만나면 *localhost:4200/heroes*와 같은 URL로 이동하면서 *컴포넌트*를 표시할 수 있다.\n\n\n\n> RouterModule.forRoot()\n\n*@NgModule*에 메타데이터를 지정하면 모듈이 생성될 때 라우터를 초기화하면서 브라우저의 주소가 변화되는 것을 감지한다. 그래서 *AppRoutingModule*에도 라우터를 초기화하기 위해 **imports 배열**에 *RouterModule*을 등록해야 한다.\n\n```typescript\nimports: [ RouterModule.forRoot(routes) ],\n```\n\n위 코드를 *@NgModule* 안에 입력하면 된다. \n\n- `forRoot()` :  최상위 계층에 존재하는 라우터를 설정할 때 사용하는 메소드이다. 이 메소드를 사용하면 브라우저에서 변경되는 URL을 감지할 수 있다.\n\n또한 앱에서도 *RouterModule*을 사용할 수 있도록 **exports 배열**도 지정해야한다.\n\n```typescript\nexports: [ RouterModule ]\n```\n\n imports 코드 아래에 위 코드를 입력하면 된다.\n\n\n\n---\n\n> 추가: 라우팅 영역(RouterOutlet) 추가하기\n\nAppComponent html 파일에 아래 코드를 추가한다.\n\n```html\n<router-outlet></router-outlet>\n```\n\n- `<router-outlet> `: 라우팅 된 화면이 표시될 위치를 지정하는 엘리먼트이다.\n- 위에서 `RouterModule`을 *exports 배열*을 통해 외부로 공개하였기 때문에 *AppComponent* 에서도 *RouterOutlet* 디렉티브를 사용할 수 있다. \n  - 또한 이는 맨 위쪽에서 *--module=app* 플래그를 지정하였기 때문에 자동으로 추가된 것이다.\n- 파일을 직접 생성했거나 Angular CLI 외의 툴을 이용했다면 *app.module.ts* 파일에서 *AppRoutingModule*을 로드하고 *NgModule*의 *imports 배열*에 이 라우팅 모듈을 추가하면 된다.\n\n","source":"_posts/angular-create-approutingmodule.md","raw":"---\ntitle: \"[앵귤러/Angular] AppRoutingModule 생성하기\"\ndate: 2020-03-12 18:10:00\ntags: 앵귤러\n---\n\n\n\n애플리케이션 최상위 라우팅을 담당하는 모듈의 클래스 이름은 일반적으로 *AppRoutingModule*이라고 칭한다.\n\n```\nng generate module app-routing --flat --module=app\n```\n\nAngular CLI로 다음 명령을 실행하면 *app-routing.module.ts* 파일이 생성되며, 라우팅 모듈이 만들어진다. \n\n- `--flat` : 새로운 폴더를 만들지 않고 src/app 폴더에 파일 생성\n- `--module=app` : Angular CLI가 이 라우팅 모듈을 AppModule의 imports 배열에 자동으로 추가\n\n\n\n아래 코드는 기본적으로 생성되는 app.routing.module.ts 파일의 코드이다.\n\n```typescript\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: []\n})\nexport class AppRoutingModule { }\n```\n\n위 코드를 라우팅 동작을 실행할 수 있도록 아래 코드를 입력하여 *RouterModule*과 *Routes* 심볼을 로드한다.\n\n```typescript\nimport { RouterModule, Routes } from '@angular/router';\n```\n\n또한 라우팅 규칙에 따라 이동할 컴포넌트 또한 로드한다.\n\n```typescript\nimport { 이동할Component } from '이동할 컴포넌트의 위치';\n```\n\n\n\n> 라우팅 규칙(Route)\n\n*라우팅 규칙*은 사용자가 링크를 클릭하거나 브라우저 주소표시줄에 URL을 직접 입력했을 때 라우터가 어떤 화면을 표시할지 정의한 것이다. \n\n```typescript\nconst routes: Routes = [\n    { path: 'URL과 매칭될 문자열', component: '화면에 표시할 컴포넌트'}\n];\n```\n\n위 코드를 *AppRoutingModule*에 추가한 후, `path: 'heroes'` 에 해당하는 URL을 만나면 *localhost:4200/heroes*와 같은 URL로 이동하면서 *컴포넌트*를 표시할 수 있다.\n\n\n\n> RouterModule.forRoot()\n\n*@NgModule*에 메타데이터를 지정하면 모듈이 생성될 때 라우터를 초기화하면서 브라우저의 주소가 변화되는 것을 감지한다. 그래서 *AppRoutingModule*에도 라우터를 초기화하기 위해 **imports 배열**에 *RouterModule*을 등록해야 한다.\n\n```typescript\nimports: [ RouterModule.forRoot(routes) ],\n```\n\n위 코드를 *@NgModule* 안에 입력하면 된다. \n\n- `forRoot()` :  최상위 계층에 존재하는 라우터를 설정할 때 사용하는 메소드이다. 이 메소드를 사용하면 브라우저에서 변경되는 URL을 감지할 수 있다.\n\n또한 앱에서도 *RouterModule*을 사용할 수 있도록 **exports 배열**도 지정해야한다.\n\n```typescript\nexports: [ RouterModule ]\n```\n\n imports 코드 아래에 위 코드를 입력하면 된다.\n\n\n\n---\n\n> 추가: 라우팅 영역(RouterOutlet) 추가하기\n\nAppComponent html 파일에 아래 코드를 추가한다.\n\n```html\n<router-outlet></router-outlet>\n```\n\n- `<router-outlet> `: 라우팅 된 화면이 표시될 위치를 지정하는 엘리먼트이다.\n- 위에서 `RouterModule`을 *exports 배열*을 통해 외부로 공개하였기 때문에 *AppComponent* 에서도 *RouterOutlet* 디렉티브를 사용할 수 있다. \n  - 또한 이는 맨 위쪽에서 *--module=app* 플래그를 지정하였기 때문에 자동으로 추가된 것이다.\n- 파일을 직접 생성했거나 Angular CLI 외의 툴을 이용했다면 *app.module.ts* 파일에서 *AppRoutingModule*을 로드하고 *NgModule*의 *imports 배열*에 이 라우팅 모듈을 추가하면 된다.\n\n","slug":"angular-create-approutingmodule","published":1,"updated":"2021-02-08T18:25:12.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0ji000ff9c98528db1d","content":"<p>애플리케이션 최상위 라우팅을 담당하는 모듈의 클래스 이름은 일반적으로 <em>AppRoutingModule</em>이라고 칭한다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module app-routing --flat --module&#x3D;app</span><br></pre></td></tr></table></figure>\n<p>Angular CLI로 다음 명령을 실행하면 <em>app-routing.module.ts</em> 파일이 생성되며, 라우팅 모듈이 만들어진다. </p>\n<ul>\n<li><code>--flat</code> : 새로운 폴더를 만들지 않고 src/app 폴더에 파일 생성</li>\n<li><code>--module=app</code> : Angular CLI가 이 라우팅 모듈을 AppModule의 imports 배열에 자동으로 추가</li>\n</ul>\n<p>아래 코드는 기본적으로 생성되는 app.routing.module.ts 파일의 코드이다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    CommonModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  declarations: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>위 코드를 라우팅 동작을 실행할 수 있도록 아래 코드를 입력하여 <em>RouterModule</em>과 <em>Routes</em> 심볼을 로드한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule, Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>또한 라우팅 규칙에 따라 이동할 컴포넌트 또한 로드한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; 이동할Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;이동할 컴포넌트의 위치&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>라우팅 규칙(Route)</p>\n</blockquote>\n<p><em>라우팅 규칙</em>은 사용자가 링크를 클릭하거나 브라우저 주소표시줄에 URL을 직접 입력했을 때 라우터가 어떤 화면을 표시할지 정의한 것이다. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;URL과 매칭될 문자열&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;화면에 표시할 컴포넌트&#x27;</span>&#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>위 코드를 <em>AppRoutingModule</em>에 추가한 후, <code>path: &#39;heroes&#39;</code> 에 해당하는 URL을 만나면 <em>localhost:4200/heroes</em>와 같은 URL로 이동하면서 <em>컴포넌트</em>를 표시할 수 있다.</p>\n<blockquote>\n<p>RouterModule.forRoot()</p>\n</blockquote>\n<p><em>@NgModule</em>에 메타데이터를 지정하면 모듈이 생성될 때 라우터를 초기화하면서 브라우저의 주소가 변화되는 것을 감지한다. 그래서 <em>AppRoutingModule</em>에도 라우터를 초기화하기 위해 <strong>imports 배열</strong>에 <em>RouterModule</em>을 등록해야 한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imports: [ RouterModule.forRoot(routes) ],</span><br></pre></td></tr></table></figure>\n<p>위 코드를 <em>@NgModule</em> 안에 입력하면 된다. </p>\n<ul>\n<li><code>forRoot()</code> :  최상위 계층에 존재하는 라우터를 설정할 때 사용하는 메소드이다. 이 메소드를 사용하면 브라우저에서 변경되는 URL을 감지할 수 있다.</li>\n</ul>\n<p>또한 앱에서도 <em>RouterModule</em>을 사용할 수 있도록 <strong>exports 배열</strong>도 지정해야한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exports</span>: [ RouterModule ]</span><br></pre></td></tr></table></figure>\n<p> imports 코드 아래에 위 코드를 입력하면 된다.</p>\n<hr>\n<blockquote>\n<p>추가: 라우팅 영역(RouterOutlet) 추가하기</p>\n</blockquote>\n<p>AppComponent html 파일에 아래 코드를 추가한다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;router-outlet&gt; </code>: 라우팅 된 화면이 표시될 위치를 지정하는 엘리먼트이다.</li>\n<li>위에서 <code>RouterModule</code>을 <em>exports 배열</em>을 통해 외부로 공개하였기 때문에 <em>AppComponent</em> 에서도 <em>RouterOutlet</em> 디렉티브를 사용할 수 있다. <ul>\n<li>또한 이는 맨 위쪽에서 <em>–module=app</em> 플래그를 지정하였기 때문에 자동으로 추가된 것이다.</li>\n</ul>\n</li>\n<li>파일을 직접 생성했거나 Angular CLI 외의 툴을 이용했다면 <em>app.module.ts</em> 파일에서 <em>AppRoutingModule</em>을 로드하고 <em>NgModule</em>의 <em>imports 배열</em>에 이 라우팅 모듈을 추가하면 된다.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>애플리케이션 최상위 라우팅을 담당하는 모듈의 클래스 이름은 일반적으로 <em>AppRoutingModule</em>이라고 칭한다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module app-routing --flat --module&#x3D;app</span><br></pre></td></tr></table></figure>\n<p>Angular CLI로 다음 명령을 실행하면 <em>app-routing.module.ts</em> 파일이 생성되며, 라우팅 모듈이 만들어진다. </p>\n<ul>\n<li><code>--flat</code> : 새로운 폴더를 만들지 않고 src/app 폴더에 파일 생성</li>\n<li><code>--module=app</code> : Angular CLI가 이 라우팅 모듈을 AppModule의 imports 배열에 자동으로 추가</li>\n</ul>\n<p>아래 코드는 기본적으로 생성되는 app.routing.module.ts 파일의 코드이다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NgModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; CommonModule &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/common&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@NgModule</span>(&#123;</span><br><span class=\"line\">  imports: [</span><br><span class=\"line\">    CommonModule</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  declarations: []</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AppRoutingModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n<p>위 코드를 라우팅 동작을 실행할 수 있도록 아래 코드를 입력하여 <em>RouterModule</em>과 <em>Routes</em> 심볼을 로드한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; RouterModule, Routes &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/router&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>또한 라우팅 규칙에 따라 이동할 컴포넌트 또한 로드한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; 이동할Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;이동할 컴포넌트의 위치&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>라우팅 규칙(Route)</p>\n</blockquote>\n<p><em>라우팅 규칙</em>은 사용자가 링크를 클릭하거나 브라우저 주소표시줄에 URL을 직접 입력했을 때 라우터가 어떤 화면을 표시할지 정의한 것이다. </p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> routes: Routes = [</span><br><span class=\"line\">    &#123; <span class=\"attr\">path</span>: <span class=\"string\">&#x27;URL과 매칭될 문자열&#x27;</span>, <span class=\"attr\">component</span>: <span class=\"string\">&#x27;화면에 표시할 컴포넌트&#x27;</span>&#125;</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n<p>위 코드를 <em>AppRoutingModule</em>에 추가한 후, <code>path: &#39;heroes&#39;</code> 에 해당하는 URL을 만나면 <em>localhost:4200/heroes</em>와 같은 URL로 이동하면서 <em>컴포넌트</em>를 표시할 수 있다.</p>\n<blockquote>\n<p>RouterModule.forRoot()</p>\n</blockquote>\n<p><em>@NgModule</em>에 메타데이터를 지정하면 모듈이 생성될 때 라우터를 초기화하면서 브라우저의 주소가 변화되는 것을 감지한다. 그래서 <em>AppRoutingModule</em>에도 라우터를 초기화하기 위해 <strong>imports 배열</strong>에 <em>RouterModule</em>을 등록해야 한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imports: [ RouterModule.forRoot(routes) ],</span><br></pre></td></tr></table></figure>\n<p>위 코드를 <em>@NgModule</em> 안에 입력하면 된다. </p>\n<ul>\n<li><code>forRoot()</code> :  최상위 계층에 존재하는 라우터를 설정할 때 사용하는 메소드이다. 이 메소드를 사용하면 브라우저에서 변경되는 URL을 감지할 수 있다.</li>\n</ul>\n<p>또한 앱에서도 <em>RouterModule</em>을 사용할 수 있도록 <strong>exports 배열</strong>도 지정해야한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">exports</span>: [ RouterModule ]</span><br></pre></td></tr></table></figure>\n<p> imports 코드 아래에 위 코드를 입력하면 된다.</p>\n<hr>\n<blockquote>\n<p>추가: 라우팅 영역(RouterOutlet) 추가하기</p>\n</blockquote>\n<p>AppComponent html 파일에 아래 코드를 추가한다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-outlet</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>&lt;router-outlet&gt; </code>: 라우팅 된 화면이 표시될 위치를 지정하는 엘리먼트이다.</li>\n<li>위에서 <code>RouterModule</code>을 <em>exports 배열</em>을 통해 외부로 공개하였기 때문에 <em>AppComponent</em> 에서도 <em>RouterOutlet</em> 디렉티브를 사용할 수 있다. <ul>\n<li>또한 이는 맨 위쪽에서 <em>–module=app</em> 플래그를 지정하였기 때문에 자동으로 추가된 것이다.</li>\n</ul>\n</li>\n<li>파일을 직접 생성했거나 Angular CLI 외의 툴을 이용했다면 <em>app.module.ts</em> 파일에서 <em>AppRoutingModule</em>을 로드하고 <em>NgModule</em>의 <em>imports 배열</em>에 이 라우팅 모듈을 추가하면 된다.</li>\n</ul>\n"},{"title":"[앵귤러/Angular] 의존성 주입","date":"2020-03-11T05:11:00.000Z","_content":"\n\n\n**의존성 주입(Dependency injection, DI)**\n\n> 의존성을 직접 생성하지 않고 외부 어딘가에서 받아오도록 요청하는 패턴\n\n- **의존성**(dependencies) : 어떤 클래스가 동작하기 위해 필요한 서비스나 객체를 의미\n- 클래스의 인스턴스가 생성될 때 이 클래스에 필요한 의존성을 프레임워크가 생성해서 전달\n\n- 애플리케이션 디자인 패턴 중에서도 아주 중요한 패턴\n- 이 패턴을 활용하면 Angular 애플리케이션을 좀 더 효율적인 모듈 형태로 구성할 수 있다.\n\n- 한 가지 예로는 데이터를 처리하는 Service를 만들 때 new 키워드로 인스턴스를 직접 생성하는것이 아닌, Angular가 제공하는 의존성 주입 매커니즘에 따라 component의 생성자로 주입되는 것\n\n\n\n### 의존성 주입 가능한 서비스 생성하고 등록하기\n\n- 목 데이터는 파일에 정의해두고 이 데이터를 서비스 클래스로 감싸 컴포넌트에 주입\n\n> 한 파일에 클래스를 여러개 정의하면 이 파일을 접하는 많은 사람들에게 혼란을 줄 수 있기 때문에 컴포넌트와 서비스는 파일 하나에 하나씩 정의하는 것이 좋다.  \n>\n> 또한 컴포넌트와 서비스가 같은 파일에 정의해야 한다면 서비스 먼저 정의해야한다. 그렇지 않으면 런타임 null 참조 에러가 발생한다. (컴포넌트를 먼저 정의하고자 하면 forwardRef() 메소드를 사용하면 된다.)\n\n\n\n#### 의존성으로 주입할 서비스 클래스 정의\n\nAngular CLI를 사용하여 아래 명령을 이용하면 `HeroService` 클래스가 생성된다.  \n\n```\nng generate service hero\n```\n\n`hero.sevice.ts` 초기 생성 파일은 아래와 같다.\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  // 이 서비스를 애플리케이션 최상위 인젝터에 등록합니다.\n  providedIn: 'root',\n})\nexport class HeroService {\n  constructor() { }\n}\n```\n\n- ***@Injectable()*** : 클래스를 인젝터에 프로바이더로 등록할 때 사용하는 데코레이터\n\n  - `인젝터`:  서비스의 인스턴스를 생성하고 클래스에 주입하는 역할을 한다. 인스턴스를 생성할 때 프로바이더를 이용한다. \n\n  - `프로바이더`: 프로바이더 인터페이스들 중 하나를 구현하는 오브젝트, 프로바이더 객체는 DI토큰과 관련된 주입 가능한 의존성을 얻는 방법을 정의한다. 프로바이더에 서비스 클래스를 등록하면 인젝터는 new 키워드를 사용해 인스턴스를 생성한다. \n\n    1. **서비스 클래스에서 @Injectable() 데코레이터로 직접 등록할 수 있다.** \n    2. NgModule의 @NgModule() 데코레이터에 등록할 수있다.\n    3. 컴포넌트의 @Component() 데코레이터에 등록할 수있다.\n\n    위의 예제는 1번의 방식을 사용하였다.\n\n    > 여러 클래스를 같은 서비스 타입으로 인젝터에 등록 가능하며, 서로 다른 프로바이더를 각기 다른 인젝터에 등록할 수 있다. \n\n  - `proviededIn`\n\n    1. @Injectable() 데코레이터를 사용할 때: 메타 데이터 옵션으로 서비스가 root인젝터에 등록될지, 특정 NgModule에 등록될지 지정할 수 있다.\n       - 서비스가 최상위 인젝터에 등록되면 Angular는 HeroService의 인스턴스를 하나만 생성하며, 이 클래스가 주입되는 모든 곳에서 같은 인스턴스를 공유한다.\n    2. @NgModule() 이나 @Component() 데코레이터를 사용할 때 : NgModule 계층이나 컴포넌트 계층의 인젝터에 프로바이더를 등록할 수 있다.\n\n  - 이 데코레이터가 등록된 클래스가 실제로 사용되지 않으면 이 클래스를 최종 빌드 결과물에서 제거하는 대상으로 등록하는 역할도 한다.\n\n\n\n### 서비스 주입하기\n\n#### 의존성 주입을 사용하는 컴포넌트 vs 사용하지 않는 컴포넌트\n\n> 의존성 주입을 사용하지 않는 컴포넌트\n\n아래 HeroListComponent는 다른 mock 파일에 정의된 HEROES라는 배열을 메모리에 올려서 참조한다.\n\n```typescript\n...\nimport { HEROES }      from './mock-heroes';\n...\nexport class HeroListComponent {\n  heroes = HEROES;\n}\n```\n\n이 방식은 실제 운영환경에서는 적합하지 않다. 테스트를 적용하거나 리모트 서버에서 데이터를 가져오도록 변경한다면 HerosListComponent를 반드시 수정해야하기 때문이다. 상황에 따라 매번 HEROES 목 데이터를 변경해야할 수도 있다. \n\n> 의존성 주입을 사용하는 컴포넌트\n\n```typescript\n...\nimport { Hero }        from './hero';\nimport { HeroService } from './hero.service';\n...\nexport class HeroListComponent {\n  heroes: Hero[];\n\n  constructor(heroService: HeroService) {\n    this.heroes = heroService.getHeroes();\n  }\n}\n```\n\n이 때 서비스클래스는 부모 인젝터 중 어딘가에 반드시 등록되어야 하지만, 컴포넌트의 입장에서는 서비스가 어디에 등록되어 있는지는 중요하지 않다.\n\n\n\n이 때 서비스 클래스의 코드는 아래와 같다.\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@Injectable({\n  // 이 서비스를 애플리케이션 최상위 인젝터에 등록합니다.\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() { return HEROES; }\n}\n```\n\n","source":"_posts/angular-dependency-injection.md","raw":"---\ntitle: \"[앵귤러/Angular] 의존성 주입\"\ndate: 2020-03-11 14:11:00\ntags: 앵귤러\n---\n\n\n\n**의존성 주입(Dependency injection, DI)**\n\n> 의존성을 직접 생성하지 않고 외부 어딘가에서 받아오도록 요청하는 패턴\n\n- **의존성**(dependencies) : 어떤 클래스가 동작하기 위해 필요한 서비스나 객체를 의미\n- 클래스의 인스턴스가 생성될 때 이 클래스에 필요한 의존성을 프레임워크가 생성해서 전달\n\n- 애플리케이션 디자인 패턴 중에서도 아주 중요한 패턴\n- 이 패턴을 활용하면 Angular 애플리케이션을 좀 더 효율적인 모듈 형태로 구성할 수 있다.\n\n- 한 가지 예로는 데이터를 처리하는 Service를 만들 때 new 키워드로 인스턴스를 직접 생성하는것이 아닌, Angular가 제공하는 의존성 주입 매커니즘에 따라 component의 생성자로 주입되는 것\n\n\n\n### 의존성 주입 가능한 서비스 생성하고 등록하기\n\n- 목 데이터는 파일에 정의해두고 이 데이터를 서비스 클래스로 감싸 컴포넌트에 주입\n\n> 한 파일에 클래스를 여러개 정의하면 이 파일을 접하는 많은 사람들에게 혼란을 줄 수 있기 때문에 컴포넌트와 서비스는 파일 하나에 하나씩 정의하는 것이 좋다.  \n>\n> 또한 컴포넌트와 서비스가 같은 파일에 정의해야 한다면 서비스 먼저 정의해야한다. 그렇지 않으면 런타임 null 참조 에러가 발생한다. (컴포넌트를 먼저 정의하고자 하면 forwardRef() 메소드를 사용하면 된다.)\n\n\n\n#### 의존성으로 주입할 서비스 클래스 정의\n\nAngular CLI를 사용하여 아래 명령을 이용하면 `HeroService` 클래스가 생성된다.  \n\n```\nng generate service hero\n```\n\n`hero.sevice.ts` 초기 생성 파일은 아래와 같다.\n\n```typescript\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  // 이 서비스를 애플리케이션 최상위 인젝터에 등록합니다.\n  providedIn: 'root',\n})\nexport class HeroService {\n  constructor() { }\n}\n```\n\n- ***@Injectable()*** : 클래스를 인젝터에 프로바이더로 등록할 때 사용하는 데코레이터\n\n  - `인젝터`:  서비스의 인스턴스를 생성하고 클래스에 주입하는 역할을 한다. 인스턴스를 생성할 때 프로바이더를 이용한다. \n\n  - `프로바이더`: 프로바이더 인터페이스들 중 하나를 구현하는 오브젝트, 프로바이더 객체는 DI토큰과 관련된 주입 가능한 의존성을 얻는 방법을 정의한다. 프로바이더에 서비스 클래스를 등록하면 인젝터는 new 키워드를 사용해 인스턴스를 생성한다. \n\n    1. **서비스 클래스에서 @Injectable() 데코레이터로 직접 등록할 수 있다.** \n    2. NgModule의 @NgModule() 데코레이터에 등록할 수있다.\n    3. 컴포넌트의 @Component() 데코레이터에 등록할 수있다.\n\n    위의 예제는 1번의 방식을 사용하였다.\n\n    > 여러 클래스를 같은 서비스 타입으로 인젝터에 등록 가능하며, 서로 다른 프로바이더를 각기 다른 인젝터에 등록할 수 있다. \n\n  - `proviededIn`\n\n    1. @Injectable() 데코레이터를 사용할 때: 메타 데이터 옵션으로 서비스가 root인젝터에 등록될지, 특정 NgModule에 등록될지 지정할 수 있다.\n       - 서비스가 최상위 인젝터에 등록되면 Angular는 HeroService의 인스턴스를 하나만 생성하며, 이 클래스가 주입되는 모든 곳에서 같은 인스턴스를 공유한다.\n    2. @NgModule() 이나 @Component() 데코레이터를 사용할 때 : NgModule 계층이나 컴포넌트 계층의 인젝터에 프로바이더를 등록할 수 있다.\n\n  - 이 데코레이터가 등록된 클래스가 실제로 사용되지 않으면 이 클래스를 최종 빌드 결과물에서 제거하는 대상으로 등록하는 역할도 한다.\n\n\n\n### 서비스 주입하기\n\n#### 의존성 주입을 사용하는 컴포넌트 vs 사용하지 않는 컴포넌트\n\n> 의존성 주입을 사용하지 않는 컴포넌트\n\n아래 HeroListComponent는 다른 mock 파일에 정의된 HEROES라는 배열을 메모리에 올려서 참조한다.\n\n```typescript\n...\nimport { HEROES }      from './mock-heroes';\n...\nexport class HeroListComponent {\n  heroes = HEROES;\n}\n```\n\n이 방식은 실제 운영환경에서는 적합하지 않다. 테스트를 적용하거나 리모트 서버에서 데이터를 가져오도록 변경한다면 HerosListComponent를 반드시 수정해야하기 때문이다. 상황에 따라 매번 HEROES 목 데이터를 변경해야할 수도 있다. \n\n> 의존성 주입을 사용하는 컴포넌트\n\n```typescript\n...\nimport { Hero }        from './hero';\nimport { HeroService } from './hero.service';\n...\nexport class HeroListComponent {\n  heroes: Hero[];\n\n  constructor(heroService: HeroService) {\n    this.heroes = heroService.getHeroes();\n  }\n}\n```\n\n이 때 서비스클래스는 부모 인젝터 중 어딘가에 반드시 등록되어야 하지만, 컴포넌트의 입장에서는 서비스가 어디에 등록되어 있는지는 중요하지 않다.\n\n\n\n이 때 서비스 클래스의 코드는 아래와 같다.\n\n```typescript\nimport { Injectable } from '@angular/core';\nimport { HEROES } from './mock-heroes';\n\n@Injectable({\n  // 이 서비스를 애플리케이션 최상위 인젝터에 등록합니다.\n  providedIn: 'root',\n})\nexport class HeroService {\n  getHeroes() { return HEROES; }\n}\n```\n\n","slug":"angular-dependency-injection","published":1,"updated":"2021-02-08T18:25:12.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jj000hf9c96yme3mc0","content":"<p><strong>의존성 주입(Dependency injection, DI)</strong></p>\n<blockquote>\n<p>의존성을 직접 생성하지 않고 외부 어딘가에서 받아오도록 요청하는 패턴</p>\n</blockquote>\n<ul>\n<li><p><strong>의존성</strong>(dependencies) : 어떤 클래스가 동작하기 위해 필요한 서비스나 객체를 의미</p>\n</li>\n<li><p>클래스의 인스턴스가 생성될 때 이 클래스에 필요한 의존성을 프레임워크가 생성해서 전달</p>\n</li>\n<li><p>애플리케이션 디자인 패턴 중에서도 아주 중요한 패턴</p>\n</li>\n<li><p>이 패턴을 활용하면 Angular 애플리케이션을 좀 더 효율적인 모듈 형태로 구성할 수 있다.</p>\n</li>\n<li><p>한 가지 예로는 데이터를 처리하는 Service를 만들 때 new 키워드로 인스턴스를 직접 생성하는것이 아닌, Angular가 제공하는 의존성 주입 매커니즘에 따라 component의 생성자로 주입되는 것</p>\n</li>\n</ul>\n<h3 id=\"의존성-주입-가능한-서비스-생성하고-등록하기\"><a href=\"#의존성-주입-가능한-서비스-생성하고-등록하기\" class=\"headerlink\" title=\"의존성 주입 가능한 서비스 생성하고 등록하기\"></a>의존성 주입 가능한 서비스 생성하고 등록하기</h3><ul>\n<li>목 데이터는 파일에 정의해두고 이 데이터를 서비스 클래스로 감싸 컴포넌트에 주입</li>\n</ul>\n<blockquote>\n<p>한 파일에 클래스를 여러개 정의하면 이 파일을 접하는 많은 사람들에게 혼란을 줄 수 있기 때문에 컴포넌트와 서비스는 파일 하나에 하나씩 정의하는 것이 좋다.  </p>\n<p>또한 컴포넌트와 서비스가 같은 파일에 정의해야 한다면 서비스 먼저 정의해야한다. 그렇지 않으면 런타임 null 참조 에러가 발생한다. (컴포넌트를 먼저 정의하고자 하면 forwardRef() 메소드를 사용하면 된다.)</p>\n</blockquote>\n<h4 id=\"의존성으로-주입할-서비스-클래스-정의\"><a href=\"#의존성으로-주입할-서비스-클래스-정의\" class=\"headerlink\" title=\"의존성으로 주입할 서비스 클래스 정의\"></a>의존성으로 주입할 서비스 클래스 정의</h4><p>Angular CLI를 사용하여 아래 명령을 이용하면 <code>HeroService</code> 클래스가 생성된다.  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service hero</span><br></pre></td></tr></table></figure>\n<p><code>hero.sevice.ts</code> 초기 생성 파일은 아래와 같다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 이 서비스를 애플리케이션 최상위 인젝터에 등록합니다.</span></span><br><span class=\"line\">  providedIn: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong><em>@Injectable()</em></strong> : 클래스를 인젝터에 프로바이더로 등록할 때 사용하는 데코레이터</p>\n<ul>\n<li><p><code>인젝터</code>:  서비스의 인스턴스를 생성하고 클래스에 주입하는 역할을 한다. 인스턴스를 생성할 때 프로바이더를 이용한다. </p>\n</li>\n<li><p><code>프로바이더</code>: 프로바이더 인터페이스들 중 하나를 구현하는 오브젝트, 프로바이더 객체는 DI토큰과 관련된 주입 가능한 의존성을 얻는 방법을 정의한다. 프로바이더에 서비스 클래스를 등록하면 인젝터는 new 키워드를 사용해 인스턴스를 생성한다. </p>\n<ol>\n<li><strong>서비스 클래스에서 @Injectable() 데코레이터로 직접 등록할 수 있다.</strong> </li>\n<li>NgModule의 @NgModule() 데코레이터에 등록할 수있다.</li>\n<li>컴포넌트의 @Component() 데코레이터에 등록할 수있다.</li>\n</ol>\n<p>위의 예제는 1번의 방식을 사용하였다.</p>\n<blockquote>\n<p>여러 클래스를 같은 서비스 타입으로 인젝터에 등록 가능하며, 서로 다른 프로바이더를 각기 다른 인젝터에 등록할 수 있다. </p>\n</blockquote>\n</li>\n<li><p><code>proviededIn</code></p>\n<ol>\n<li>@Injectable() 데코레이터를 사용할 때: 메타 데이터 옵션으로 서비스가 root인젝터에 등록될지, 특정 NgModule에 등록될지 지정할 수 있다.<ul>\n<li>서비스가 최상위 인젝터에 등록되면 Angular는 HeroService의 인스턴스를 하나만 생성하며, 이 클래스가 주입되는 모든 곳에서 같은 인스턴스를 공유한다.</li>\n</ul>\n</li>\n<li>@NgModule() 이나 @Component() 데코레이터를 사용할 때 : NgModule 계층이나 컴포넌트 계층의 인젝터에 프로바이더를 등록할 수 있다.</li>\n</ol>\n</li>\n<li><p>이 데코레이터가 등록된 클래스가 실제로 사용되지 않으면 이 클래스를 최종 빌드 결과물에서 제거하는 대상으로 등록하는 역할도 한다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"서비스-주입하기\"><a href=\"#서비스-주입하기\" class=\"headerlink\" title=\"서비스 주입하기\"></a>서비스 주입하기</h3><h4 id=\"의존성-주입을-사용하는-컴포넌트-vs-사용하지-않는-컴포넌트\"><a href=\"#의존성-주입을-사용하는-컴포넌트-vs-사용하지-않는-컴포넌트\" class=\"headerlink\" title=\"의존성 주입을 사용하는 컴포넌트 vs 사용하지 않는 컴포넌트\"></a>의존성 주입을 사용하는 컴포넌트 vs 사용하지 않는 컴포넌트</h4><blockquote>\n<p>의존성 주입을 사용하지 않는 컴포넌트</p>\n</blockquote>\n<p>아래 HeroListComponent는 다른 mock 파일에 정의된 HEROES라는 배열을 메모리에 올려서 참조한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HEROES &#125;      <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./mock-heroes&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroListComponent</span> </span>&#123;</span><br><span class=\"line\">  heroes = HEROES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이 방식은 실제 운영환경에서는 적합하지 않다. 테스트를 적용하거나 리모트 서버에서 데이터를 가져오도록 변경한다면 HerosListComponent를 반드시 수정해야하기 때문이다. 상황에 따라 매번 HEROES 목 데이터를 변경해야할 수도 있다. </p>\n<blockquote>\n<p>의존성 주입을 사용하는 컴포넌트</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Hero &#125;        <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hero&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HeroService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hero.service&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroListComponent</span> </span>&#123;</span><br><span class=\"line\">  heroes: Hero[];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">heroService: HeroService</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.heroes = heroService.getHeroes();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이 때 서비스클래스는 부모 인젝터 중 어딘가에 반드시 등록되어야 하지만, 컴포넌트의 입장에서는 서비스가 어디에 등록되어 있는지는 중요하지 않다.</p>\n<p>이 때 서비스 클래스의 코드는 아래와 같다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HEROES &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./mock-heroes&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 이 서비스를 애플리케이션 최상위 인젝터에 등록합니다.</span></span><br><span class=\"line\">  providedIn: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getHeroes</span>(<span class=\"params\"></span>)</span> &#123; <span class=\"keyword\">return</span> HEROES; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>의존성 주입(Dependency injection, DI)</strong></p>\n<blockquote>\n<p>의존성을 직접 생성하지 않고 외부 어딘가에서 받아오도록 요청하는 패턴</p>\n</blockquote>\n<ul>\n<li><p><strong>의존성</strong>(dependencies) : 어떤 클래스가 동작하기 위해 필요한 서비스나 객체를 의미</p>\n</li>\n<li><p>클래스의 인스턴스가 생성될 때 이 클래스에 필요한 의존성을 프레임워크가 생성해서 전달</p>\n</li>\n<li><p>애플리케이션 디자인 패턴 중에서도 아주 중요한 패턴</p>\n</li>\n<li><p>이 패턴을 활용하면 Angular 애플리케이션을 좀 더 효율적인 모듈 형태로 구성할 수 있다.</p>\n</li>\n<li><p>한 가지 예로는 데이터를 처리하는 Service를 만들 때 new 키워드로 인스턴스를 직접 생성하는것이 아닌, Angular가 제공하는 의존성 주입 매커니즘에 따라 component의 생성자로 주입되는 것</p>\n</li>\n</ul>\n<h3 id=\"의존성-주입-가능한-서비스-생성하고-등록하기\"><a href=\"#의존성-주입-가능한-서비스-생성하고-등록하기\" class=\"headerlink\" title=\"의존성 주입 가능한 서비스 생성하고 등록하기\"></a>의존성 주입 가능한 서비스 생성하고 등록하기</h3><ul>\n<li>목 데이터는 파일에 정의해두고 이 데이터를 서비스 클래스로 감싸 컴포넌트에 주입</li>\n</ul>\n<blockquote>\n<p>한 파일에 클래스를 여러개 정의하면 이 파일을 접하는 많은 사람들에게 혼란을 줄 수 있기 때문에 컴포넌트와 서비스는 파일 하나에 하나씩 정의하는 것이 좋다.  </p>\n<p>또한 컴포넌트와 서비스가 같은 파일에 정의해야 한다면 서비스 먼저 정의해야한다. 그렇지 않으면 런타임 null 참조 에러가 발생한다. (컴포넌트를 먼저 정의하고자 하면 forwardRef() 메소드를 사용하면 된다.)</p>\n</blockquote>\n<h4 id=\"의존성으로-주입할-서비스-클래스-정의\"><a href=\"#의존성으로-주입할-서비스-클래스-정의\" class=\"headerlink\" title=\"의존성으로 주입할 서비스 클래스 정의\"></a>의존성으로 주입할 서비스 클래스 정의</h4><p>Angular CLI를 사용하여 아래 명령을 이용하면 <code>HeroService</code> 클래스가 생성된다.  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service hero</span><br></pre></td></tr></table></figure>\n<p><code>hero.sevice.ts</code> 초기 생성 파일은 아래와 같다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 이 서비스를 애플리케이션 최상위 인젝터에 등록합니다.</span></span><br><span class=\"line\">  providedIn: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\"></span>)</span> &#123; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong><em>@Injectable()</em></strong> : 클래스를 인젝터에 프로바이더로 등록할 때 사용하는 데코레이터</p>\n<ul>\n<li><p><code>인젝터</code>:  서비스의 인스턴스를 생성하고 클래스에 주입하는 역할을 한다. 인스턴스를 생성할 때 프로바이더를 이용한다. </p>\n</li>\n<li><p><code>프로바이더</code>: 프로바이더 인터페이스들 중 하나를 구현하는 오브젝트, 프로바이더 객체는 DI토큰과 관련된 주입 가능한 의존성을 얻는 방법을 정의한다. 프로바이더에 서비스 클래스를 등록하면 인젝터는 new 키워드를 사용해 인스턴스를 생성한다. </p>\n<ol>\n<li><strong>서비스 클래스에서 @Injectable() 데코레이터로 직접 등록할 수 있다.</strong> </li>\n<li>NgModule의 @NgModule() 데코레이터에 등록할 수있다.</li>\n<li>컴포넌트의 @Component() 데코레이터에 등록할 수있다.</li>\n</ol>\n<p>위의 예제는 1번의 방식을 사용하였다.</p>\n<blockquote>\n<p>여러 클래스를 같은 서비스 타입으로 인젝터에 등록 가능하며, 서로 다른 프로바이더를 각기 다른 인젝터에 등록할 수 있다. </p>\n</blockquote>\n</li>\n<li><p><code>proviededIn</code></p>\n<ol>\n<li>@Injectable() 데코레이터를 사용할 때: 메타 데이터 옵션으로 서비스가 root인젝터에 등록될지, 특정 NgModule에 등록될지 지정할 수 있다.<ul>\n<li>서비스가 최상위 인젝터에 등록되면 Angular는 HeroService의 인스턴스를 하나만 생성하며, 이 클래스가 주입되는 모든 곳에서 같은 인스턴스를 공유한다.</li>\n</ul>\n</li>\n<li>@NgModule() 이나 @Component() 데코레이터를 사용할 때 : NgModule 계층이나 컴포넌트 계층의 인젝터에 프로바이더를 등록할 수 있다.</li>\n</ol>\n</li>\n<li><p>이 데코레이터가 등록된 클래스가 실제로 사용되지 않으면 이 클래스를 최종 빌드 결과물에서 제거하는 대상으로 등록하는 역할도 한다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"서비스-주입하기\"><a href=\"#서비스-주입하기\" class=\"headerlink\" title=\"서비스 주입하기\"></a>서비스 주입하기</h3><h4 id=\"의존성-주입을-사용하는-컴포넌트-vs-사용하지-않는-컴포넌트\"><a href=\"#의존성-주입을-사용하는-컴포넌트-vs-사용하지-않는-컴포넌트\" class=\"headerlink\" title=\"의존성 주입을 사용하는 컴포넌트 vs 사용하지 않는 컴포넌트\"></a>의존성 주입을 사용하는 컴포넌트 vs 사용하지 않는 컴포넌트</h4><blockquote>\n<p>의존성 주입을 사용하지 않는 컴포넌트</p>\n</blockquote>\n<p>아래 HeroListComponent는 다른 mock 파일에 정의된 HEROES라는 배열을 메모리에 올려서 참조한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HEROES &#125;      <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./mock-heroes&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroListComponent</span> </span>&#123;</span><br><span class=\"line\">  heroes = HEROES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이 방식은 실제 운영환경에서는 적합하지 않다. 테스트를 적용하거나 리모트 서버에서 데이터를 가져오도록 변경한다면 HerosListComponent를 반드시 수정해야하기 때문이다. 상황에 따라 매번 HEROES 목 데이터를 변경해야할 수도 있다. </p>\n<blockquote>\n<p>의존성 주입을 사용하는 컴포넌트</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Hero &#125;        <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hero&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HeroService &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./hero.service&#x27;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroListComponent</span> </span>&#123;</span><br><span class=\"line\">  heroes: Hero[];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">heroService: HeroService</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.heroes = heroService.getHeroes();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>이 때 서비스클래스는 부모 인젝터 중 어딘가에 반드시 등록되어야 하지만, 컴포넌트의 입장에서는 서비스가 어디에 등록되어 있는지는 중요하지 않다.</p>\n<p>이 때 서비스 클래스의 코드는 아래와 같다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Injectable &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@angular/core&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; HEROES &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./mock-heroes&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Injectable</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 이 서비스를 애플리케이션 최상위 인젝터에 등록합니다.</span></span><br><span class=\"line\">  providedIn: <span class=\"string\">&#x27;root&#x27;</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HeroService</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getHeroes</span>(<span class=\"params\"></span>)</span> &#123; <span class=\"keyword\">return</span> HEROES; &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"[앵귤러/Angular] 이벤트 바인딩 문법","date":"2020-03-10T04:30:00.000Z","_content":"\n이벤트 바인딩 문법을 사용하면 키 입력이나 마우스의 움직임, 클릭이나 터치 이벤트를 감지할 수 있습니다. 이 섹션에서 설명하는 내용은 [이벤트 바인딩 예제](https://angular.kr/generated/live-examples/event-binding/stackblitz.html) / [다운로드 링크](https://angular.kr/generated/zips/event-binding/event-binding.zip) 에서 직접 확인할 수 있습니다.\n\n\n\n예를 들어 버튼의 클릭 이벤트를 감지하고 있다가 사용자가 버튼을 클릭할 때 컴포넌트에 있는 `onSave()` 메소드를 실행하려면 다음과 같이 구현합니다.\n\n```html\n<button (click)=\"onSave()\">\n    Save\n</button>\n```\n\n\n\n--추가예정--","source":"_posts/angular-event-binding.md","raw":"---\ntitle: \"[앵귤러/Angular] 이벤트 바인딩 문법\"\ndate: 2020-03-10 13:30:00\ntags: 앵귤러\n---\n\n이벤트 바인딩 문법을 사용하면 키 입력이나 마우스의 움직임, 클릭이나 터치 이벤트를 감지할 수 있습니다. 이 섹션에서 설명하는 내용은 [이벤트 바인딩 예제](https://angular.kr/generated/live-examples/event-binding/stackblitz.html) / [다운로드 링크](https://angular.kr/generated/zips/event-binding/event-binding.zip) 에서 직접 확인할 수 있습니다.\n\n\n\n예를 들어 버튼의 클릭 이벤트를 감지하고 있다가 사용자가 버튼을 클릭할 때 컴포넌트에 있는 `onSave()` 메소드를 실행하려면 다음과 같이 구현합니다.\n\n```html\n<button (click)=\"onSave()\">\n    Save\n</button>\n```\n\n\n\n--추가예정--","slug":"angular-event-binding","published":1,"updated":"2021-02-08T18:25:12.562Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jk000jf9c9cfmwd22d","content":"<p>이벤트 바인딩 문법을 사용하면 키 입력이나 마우스의 움직임, 클릭이나 터치 이벤트를 감지할 수 있습니다. 이 섹션에서 설명하는 내용은 <a href=\"https://angular.kr/generated/live-examples/event-binding/stackblitz.html\">이벤트 바인딩 예제</a> / <a href=\"https://angular.kr/generated/zips/event-binding/event-binding.zip\">다운로드 링크</a> 에서 직접 확인할 수 있습니다.</p>\n<p>예를 들어 버튼의 클릭 이벤트를 감지하고 있다가 사용자가 버튼을 클릭할 때 컴포넌트에 있는 <code>onSave()</code> 메소드를 실행하려면 다음과 같이 구현합니다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onSave()&quot;</span>&gt;</span></span><br><span class=\"line\">    Save</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>–추가예정–</p>\n","site":{"data":{}},"excerpt":"","more":"<p>이벤트 바인딩 문법을 사용하면 키 입력이나 마우스의 움직임, 클릭이나 터치 이벤트를 감지할 수 있습니다. 이 섹션에서 설명하는 내용은 <a href=\"https://angular.kr/generated/live-examples/event-binding/stackblitz.html\">이벤트 바인딩 예제</a> / <a href=\"https://angular.kr/generated/zips/event-binding/event-binding.zip\">다운로드 링크</a> 에서 직접 확인할 수 있습니다.</p>\n<p>예를 들어 버튼의 클릭 이벤트를 감지하고 있다가 사용자가 버튼을 클릭할 때 컴포넌트에 있는 <code>onSave()</code> 메소드를 실행하려면 다음과 같이 구현합니다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> (<span class=\"attr\">click</span>)=<span class=\"string\">&quot;onSave()&quot;</span>&gt;</span></span><br><span class=\"line\">    Save</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n<p>–추가예정–</p>\n"},{"title":"[앵귤러 / Angular] *ngIf","date":"2020-03-10T05:24:00.000Z","_content":"\n\n\n\n\n`*ngIf` : if와 같이 동작\n\n```html\n<div *ngIf=\"selectedHero\">\n    ...\n</div>\n```\n\n: `selectedHero` 가 할당되어 있을 때 실행, undefined일 땐 실행 되지 않는다.\n\n\n\n`*ngIf`를 넣어주지 않으면` ERROR TypeError: Cannot read property 'name' of undefined` 에러가 난다. \n\n\n\n> `ngIf`앞에 별표(*)가 있다는 것을 잊지마세요. Angular에서 아주 중요한 문법입니다.\n\n\n\n[출처](https://angular.kr/tutorial/toh-pt2)","source":"_posts/angular-ngif.md","raw":"---\ntitle: \"[앵귤러 / Angular] *ngIf\"\ndate: 2020-03-10 14:24:00\ntags: 앵귤러\n---\n\n\n\n\n\n`*ngIf` : if와 같이 동작\n\n```html\n<div *ngIf=\"selectedHero\">\n    ...\n</div>\n```\n\n: `selectedHero` 가 할당되어 있을 때 실행, undefined일 땐 실행 되지 않는다.\n\n\n\n`*ngIf`를 넣어주지 않으면` ERROR TypeError: Cannot read property 'name' of undefined` 에러가 난다. \n\n\n\n> `ngIf`앞에 별표(*)가 있다는 것을 잊지마세요. Angular에서 아주 중요한 문법입니다.\n\n\n\n[출처](https://angular.kr/tutorial/toh-pt2)","slug":"angular-ngif","published":1,"updated":"2021-02-08T18:25:12.425Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jm000lf9c90jdbdksy","content":"<p><code>*ngIf</code> : if와 같이 동작</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;selectedHero&quot;</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>: <code>selectedHero</code> 가 할당되어 있을 때 실행, undefined일 땐 실행 되지 않는다.</p>\n<p><code>*ngIf</code>를 넣어주지 않으면<code> ERROR TypeError: Cannot read property &#39;name&#39; of undefined</code> 에러가 난다. </p>\n<blockquote>\n<p><code>ngIf</code>앞에 별표(*)가 있다는 것을 잊지마세요. Angular에서 아주 중요한 문법입니다.</p>\n</blockquote>\n<p><a href=\"https://angular.kr/tutorial/toh-pt2\">출처</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><code>*ngIf</code> : if와 같이 동작</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> *<span class=\"attr\">ngIf</span>=<span class=\"string\">&quot;selectedHero&quot;</span>&gt;</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>: <code>selectedHero</code> 가 할당되어 있을 때 실행, undefined일 땐 실행 되지 않는다.</p>\n<p><code>*ngIf</code>를 넣어주지 않으면<code> ERROR TypeError: Cannot read property &#39;name&#39; of undefined</code> 에러가 난다. </p>\n<blockquote>\n<p><code>ngIf</code>앞에 별표(*)가 있다는 것을 잊지마세요. Angular에서 아주 중요한 문법입니다.</p>\n</blockquote>\n<p><a href=\"https://angular.kr/tutorial/toh-pt2\">출처</a></p>\n"},{"title":"[앵귤러/Angular] 네비게이션 링크(routerLink) 추가하기","date":"2020-03-12T12:19:00.000Z","_content":"\n> 앞에 글(AppRoutingModule 생성하기)에서는 URL을 통해 이동하는 방법이었다면, 이 글에서는 네비게이션을 실행하는 링크를 클릭하여 이동하는 방법을 다룰것이다!\n\n\n\n*AppComponent*의 탬플릿 (*app.component.html*)에 아래 코드를 추가한다.\n\n```html\n<nav>\n    <a routerLink=\"/heroes\">Heroes</a>\n</nav>\n```\n\n- `routerLink` : *RouterModule*이 제공하는 *RouterLink* *디렉티브*이며, 사용자가 이 디렉티브가 적용된 엘리먼트를 클릭하면 네비게이션을 실행한다.\n- `\"/heroes\"` : `routerLink` 어트리뷰트 값으로 url을 통해 이동할 컴포넌트에 해당하는 라우팅 경로이다.","source":"_posts/angular-routerlink.md","raw":"---\ntitle: \"[앵귤러/Angular] 네비게이션 링크(routerLink) 추가하기\"\ndate: 2020-03-12 21:19:00\ntags: 앵귤러\n---\n\n> 앞에 글(AppRoutingModule 생성하기)에서는 URL을 통해 이동하는 방법이었다면, 이 글에서는 네비게이션을 실행하는 링크를 클릭하여 이동하는 방법을 다룰것이다!\n\n\n\n*AppComponent*의 탬플릿 (*app.component.html*)에 아래 코드를 추가한다.\n\n```html\n<nav>\n    <a routerLink=\"/heroes\">Heroes</a>\n</nav>\n```\n\n- `routerLink` : *RouterModule*이 제공하는 *RouterLink* *디렉티브*이며, 사용자가 이 디렉티브가 적용된 엘리먼트를 클릭하면 네비게이션을 실행한다.\n- `\"/heroes\"` : `routerLink` 어트리뷰트 값으로 url을 통해 이동할 컴포넌트에 해당하는 라우팅 경로이다.","slug":"angular-routerlink","published":1,"updated":"2021-02-08T18:25:12.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jn000nf9c96kqtdx1d","content":"<blockquote>\n<p>앞에 글(AppRoutingModule 생성하기)에서는 URL을 통해 이동하는 방법이었다면, 이 글에서는 네비게이션을 실행하는 링크를 클릭하여 이동하는 방법을 다룰것이다!</p>\n</blockquote>\n<p><em>AppComponent</em>의 탬플릿 (<em>app.component.html</em>)에 아래 코드를 추가한다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/heroes&quot;</span>&gt;</span>Heroes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>routerLink</code> : <em>RouterModule</em>이 제공하는 <em>RouterLink</em> <em>디렉티브</em>이며, 사용자가 이 디렉티브가 적용된 엘리먼트를 클릭하면 네비게이션을 실행한다.</li>\n<li><code>&quot;/heroes&quot;</code> : <code>routerLink</code> 어트리뷰트 값으로 url을 통해 이동할 컴포넌트에 해당하는 라우팅 경로이다.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>앞에 글(AppRoutingModule 생성하기)에서는 URL을 통해 이동하는 방법이었다면, 이 글에서는 네비게이션을 실행하는 링크를 클릭하여 이동하는 방법을 다룰것이다!</p>\n</blockquote>\n<p><em>AppComponent</em>의 탬플릿 (<em>app.component.html</em>)에 아래 코드를 추가한다.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">routerLink</span>=<span class=\"string\">&quot;/heroes&quot;</span>&gt;</span>Heroes<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>routerLink</code> : <em>RouterModule</em>이 제공하는 <em>RouterLink</em> <em>디렉티브</em>이며, 사용자가 이 디렉티브가 적용된 엘리먼트를 클릭하면 네비게이션을 실행한다.</li>\n<li><code>&quot;/heroes&quot;</code> : <code>routerLink</code> 어트리뷰트 값으로 url을 통해 이동할 컴포넌트에 해당하는 라우팅 경로이다.</li>\n</ul>\n"},{"title":"[백준알고리즘/boj] 1037- 약수 파이썬(python)","date":"2020-06-15T09:00:00.000Z","_content":"\n\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :--- | :-------- | :-------- |\n| 2 초      | 512 MB      | 17208 | 8185 | 7162      | 48.921%   |\n\n# 문제\n\n양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다. 어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.\n\n## 입력\n\n첫째 줄에 N의 진짜 약수의 개수가 주어진다. 이 개수는 50보다 작거나 같은 자연수이다. 둘째 줄에는 N의 진짜 약수가 주어진다. 1,000,000보다 작거나 같고, 2보다 크거나 같은 자연수이고, 중복되지 않는다.\n\n## 출력\n\n첫째 줄에 N을 출력한다. N은 항상 32비트 부호있는 정수로 표현할 수 있다.\n\n### 예제 입력 1 \n\n```\n2\n4 2\n```\n\n### 예제 출력 1 \n\n```\n8\n```\n\n## 출처\n\n- 문제를 번역한 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)\n- 빠진 조건을 찾은 사람: [doju](https://www.acmicpc.net/user/doju)\n- 어색한 표현을 찾은 사람: [jh05013](https://www.acmicpc.net/user/jh05013)\n\n# 풀이\n\n처음에 nums.pop(0) * nums[0] 로 풀었더니 당연히 ! 틀렸다.\n\n배열의 마지막 요소를 얻어오기 위해 nums[-1] 을 사용하면 된다.\n\n```python\nn = map(int, input())\nnums = list(map(int, input().split()))\n\nnums.sort()\nprint(nums[0] * nums[-1])\n```\n\n","source":"_posts/backjoon-1037.md","raw":"---\ntitle: \"[백준알고리즘/boj] 1037- 약수 파이썬(python)\"\ndate: 2020-06-15 18:00:00\ntags: 알고리즘\n---\n\n\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :--- | :-------- | :-------- |\n| 2 초      | 512 MB      | 17208 | 8185 | 7162      | 48.921%   |\n\n# 문제\n\n양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다. 어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.\n\n## 입력\n\n첫째 줄에 N의 진짜 약수의 개수가 주어진다. 이 개수는 50보다 작거나 같은 자연수이다. 둘째 줄에는 N의 진짜 약수가 주어진다. 1,000,000보다 작거나 같고, 2보다 크거나 같은 자연수이고, 중복되지 않는다.\n\n## 출력\n\n첫째 줄에 N을 출력한다. N은 항상 32비트 부호있는 정수로 표현할 수 있다.\n\n### 예제 입력 1 \n\n```\n2\n4 2\n```\n\n### 예제 출력 1 \n\n```\n8\n```\n\n## 출처\n\n- 문제를 번역한 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)\n- 빠진 조건을 찾은 사람: [doju](https://www.acmicpc.net/user/doju)\n- 어색한 표현을 찾은 사람: [jh05013](https://www.acmicpc.net/user/jh05013)\n\n# 풀이\n\n처음에 nums.pop(0) * nums[0] 로 풀었더니 당연히 ! 틀렸다.\n\n배열의 마지막 요소를 얻어오기 위해 nums[-1] 을 사용하면 된다.\n\n```python\nn = map(int, input())\nnums = list(map(int, input().split()))\n\nnums.sort()\nprint(nums[0] * nums[-1])\n```\n\n","slug":"backjoon-1037","published":1,"updated":"2021-02-08T18:25:11.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jo000pf9c9a6lz7ttm","content":"<table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2 초</td>\n<td align=\"left\">512 MB</td>\n<td align=\"left\">17208</td>\n<td align=\"left\">8185</td>\n<td align=\"left\">7162</td>\n<td align=\"left\">48.921%</td>\n</tr>\n</tbody></table>\n<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다. 어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 N의 진짜 약수의 개수가 주어진다. 이 개수는 50보다 작거나 같은 자연수이다. 둘째 줄에는 N의 진짜 약수가 주어진다. 1,000,000보다 작거나 같고, 2보다 크거나 같은 자연수이고, 중복되지 않는다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 N을 출력한다. N은 항상 32비트 부호있는 정수로 표현할 수 있다.</p>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">4 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n<h2 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h2><ul>\n<li>문제를 번역한 사람: <a href=\"https://www.acmicpc.net/user/baekjoon\">baekjoon</a></li>\n<li>빠진 조건을 찾은 사람: <a href=\"https://www.acmicpc.net/user/doju\">doju</a></li>\n<li>어색한 표현을 찾은 사람: <a href=\"https://www.acmicpc.net/user/jh05013\">jh05013</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>처음에 nums.pop(0) * nums[0] 로 풀었더니 당연히 ! 틀렸다.</p>\n<p>배열의 마지막 요소를 얻어오기 위해 nums[-1] 을 사용하면 된다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>())</span><br><span class=\"line\">nums = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\"></span><br><span class=\"line\">nums.sort()</span><br><span class=\"line\">print(nums[<span class=\"number\">0</span>] * nums[-<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2 초</td>\n<td align=\"left\">512 MB</td>\n<td align=\"left\">17208</td>\n<td align=\"left\">8185</td>\n<td align=\"left\">7162</td>\n<td align=\"left\">48.921%</td>\n</tr>\n</tbody></table>\n<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>양수 A가 N의 진짜 약수가 되려면, N이 A의 배수이고, A가 1과 N이 아니어야 한다. 어떤 수 N의 진짜 약수가 모두 주어질 때, N을 구하는 프로그램을 작성하시오.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 N의 진짜 약수의 개수가 주어진다. 이 개수는 50보다 작거나 같은 자연수이다. 둘째 줄에는 N의 진짜 약수가 주어진다. 1,000,000보다 작거나 같고, 2보다 크거나 같은 자연수이고, 중복되지 않는다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 N을 출력한다. N은 항상 32비트 부호있는 정수로 표현할 수 있다.</p>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">4 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8</span><br></pre></td></tr></table></figure>\n<h2 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h2><ul>\n<li>문제를 번역한 사람: <a href=\"https://www.acmicpc.net/user/baekjoon\">baekjoon</a></li>\n<li>빠진 조건을 찾은 사람: <a href=\"https://www.acmicpc.net/user/doju\">doju</a></li>\n<li>어색한 표현을 찾은 사람: <a href=\"https://www.acmicpc.net/user/jh05013\">jh05013</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>처음에 nums.pop(0) * nums[0] 로 풀었더니 당연히 ! 틀렸다.</p>\n<p>배열의 마지막 요소를 얻어오기 위해 nums[-1] 을 사용하면 된다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>())</span><br><span class=\"line\">nums = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\"></span><br><span class=\"line\">nums.sort()</span><br><span class=\"line\">print(nums[<span class=\"number\">0</span>] * nums[-<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n"},{"title":"[앵귤러/Angular] Observable 반환을 이용한 동기->비동기","date":"2020-03-11T09:23:00.000Z","_content":"\n\n\n아래 코드는 *heroService*라는 **서비스 클래스**에서 **목 데이터 값**을 가져오는 코드이다.\n\n```typescript\nthis.heroes = this.heroService.getHeroes();\n```\n\n위 코드에서 `heroService.getHeroes()`는 *동기 방식*으로 동작하기 때문에 함수의 실행결과가 바로 반환된다. 목 데이터를 가져올 때는 동기 방식이 유효할 수 있지만, 일반적인 애플리케이션에서는 리모트 서버에서 데이터를 가져오기 때문에, *비동기 동작*을 처리해야 하는 경우가 대부분이다.\n\n*비동기*로 동작하기 위해 여러 방법을 사용할 수 있다.\n\n1. 콜백함수를 사용한다.\n2. Promise를 반환하도록 처리한다.\n3. **Observable**을 반환하도록 처리한다.\n\n이 포스팅에서는 3번의 방법을 구현해 보겠다! (Angular가 제공하는 *HttpClient.get* 메소드가 **Observable**을 반환하기 때문에 가장 자연스럽다.)\n\n`Observable` : *RxJS 라이브러리*가 제공하는 클래스 중 가장 중요한 클래스이다. \n\n\n\n먼저 서비스 클래스 파일에 코드를 추가한다.\n\n```typescript\nimport { Observable, of } from 'rxjs';\n```\n\nObservable을 로드한다.\n\n\n\ngetHeroes() 메소드를 수정한다.\n\n> 기존 getHeroes() 메소드\n\n```typescript\ngetHeroes(): Hero[] {\n  return HEROES;\n}\n```\n\n> 수정된 getHeroes() 메소드\n\n```typescript\ngetHeroes(): Observable<Hero[]> {\n  return of(HEROES);\n}\n```\n\n*of(HEROES)*는 히어로 목 데이터를 **Observable<Hero[]>** 타입으로한번에 반환한다.\n\n\n\n이제는 *Observable<Hero[]>*타입을 반환하기 때문에 **컴포넌트** 코드도 수정하여야 한다.\n\n> 기존 컴포넌트 코드\n\n```typescript\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n```\n\n> 수정된 컴포넌트 코드\n\n```typescript\ngetHeroes(): void {\n  this.heroService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes);\n}\n```\n\n\n\n*비동기 방식*으로 수정한 후에는 서버의 응답이 언제 도착하는지와 관계없이, 이 응답이 도착했을 때 **subscribe**가 서버에서 받은 응답을 콜백함수로 전달하고, 컴포넌트는 이렇게 받은 데이터를 heroes 프로퍼티에 할당한다.\n\n","source":"_posts/angular-sync-to-async-observable.md","raw":"---\ntitle: \"[앵귤러/Angular] Observable 반환을 이용한 동기->비동기\"\ndate: 2020-03-11 18:23:00\ntags: 앵귤러\n---\n\n\n\n아래 코드는 *heroService*라는 **서비스 클래스**에서 **목 데이터 값**을 가져오는 코드이다.\n\n```typescript\nthis.heroes = this.heroService.getHeroes();\n```\n\n위 코드에서 `heroService.getHeroes()`는 *동기 방식*으로 동작하기 때문에 함수의 실행결과가 바로 반환된다. 목 데이터를 가져올 때는 동기 방식이 유효할 수 있지만, 일반적인 애플리케이션에서는 리모트 서버에서 데이터를 가져오기 때문에, *비동기 동작*을 처리해야 하는 경우가 대부분이다.\n\n*비동기*로 동작하기 위해 여러 방법을 사용할 수 있다.\n\n1. 콜백함수를 사용한다.\n2. Promise를 반환하도록 처리한다.\n3. **Observable**을 반환하도록 처리한다.\n\n이 포스팅에서는 3번의 방법을 구현해 보겠다! (Angular가 제공하는 *HttpClient.get* 메소드가 **Observable**을 반환하기 때문에 가장 자연스럽다.)\n\n`Observable` : *RxJS 라이브러리*가 제공하는 클래스 중 가장 중요한 클래스이다. \n\n\n\n먼저 서비스 클래스 파일에 코드를 추가한다.\n\n```typescript\nimport { Observable, of } from 'rxjs';\n```\n\nObservable을 로드한다.\n\n\n\ngetHeroes() 메소드를 수정한다.\n\n> 기존 getHeroes() 메소드\n\n```typescript\ngetHeroes(): Hero[] {\n  return HEROES;\n}\n```\n\n> 수정된 getHeroes() 메소드\n\n```typescript\ngetHeroes(): Observable<Hero[]> {\n  return of(HEROES);\n}\n```\n\n*of(HEROES)*는 히어로 목 데이터를 **Observable<Hero[]>** 타입으로한번에 반환한다.\n\n\n\n이제는 *Observable<Hero[]>*타입을 반환하기 때문에 **컴포넌트** 코드도 수정하여야 한다.\n\n> 기존 컴포넌트 코드\n\n```typescript\ngetHeroes(): void {\n  this.heroes = this.heroService.getHeroes();\n}\n```\n\n> 수정된 컴포넌트 코드\n\n```typescript\ngetHeroes(): void {\n  this.heroService.getHeroes()\n      .subscribe(heroes => this.heroes = heroes);\n}\n```\n\n\n\n*비동기 방식*으로 수정한 후에는 서버의 응답이 언제 도착하는지와 관계없이, 이 응답이 도착했을 때 **subscribe**가 서버에서 받은 응답을 콜백함수로 전달하고, 컴포넌트는 이렇게 받은 데이터를 heroes 프로퍼티에 할당한다.\n\n","slug":"angular-sync-to-async-observable","published":1,"updated":"2021-02-08T18:25:12.592Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jp000qf9c9elk446wy","content":"<p>아래 코드는 <em>heroService</em>라는 <strong>서비스 클래스</strong>에서 <strong>목 데이터 값</strong>을 가져오는 코드이다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.heroes = <span class=\"built_in\">this</span>.heroService.getHeroes();</span><br></pre></td></tr></table></figure>\n<p>위 코드에서 <code>heroService.getHeroes()</code>는 <em>동기 방식</em>으로 동작하기 때문에 함수의 실행결과가 바로 반환된다. 목 데이터를 가져올 때는 동기 방식이 유효할 수 있지만, 일반적인 애플리케이션에서는 리모트 서버에서 데이터를 가져오기 때문에, <em>비동기 동작</em>을 처리해야 하는 경우가 대부분이다.</p>\n<p><em>비동기</em>로 동작하기 위해 여러 방법을 사용할 수 있다.</p>\n<ol>\n<li>콜백함수를 사용한다.</li>\n<li>Promise를 반환하도록 처리한다.</li>\n<li><strong>Observable</strong>을 반환하도록 처리한다.</li>\n</ol>\n<p>이 포스팅에서는 3번의 방법을 구현해 보겠다! (Angular가 제공하는 <em>HttpClient.get</em> 메소드가 <strong>Observable</strong>을 반환하기 때문에 가장 자연스럽다.)</p>\n<p><code>Observable</code> : <em>RxJS 라이브러리</em>가 제공하는 클래스 중 가장 중요한 클래스이다. </p>\n<p>먼저 서비스 클래스 파일에 코드를 추가한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable, <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>Observable을 로드한다.</p>\n<p>getHeroes() 메소드를 수정한다.</p>\n<blockquote>\n<p>기존 getHeroes() 메소드</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHeroes(): Hero[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> HEROES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>수정된 getHeroes() 메소드</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHeroes(): Observable&lt;Hero[]&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">of</span>(HEROES);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>of(HEROES)*는 히어로 목 데이터를 *</em>Observable&lt;Hero[]&gt;** 타입으로한번에 반환한다.</p>\n<p>이제는 <em>Observable&lt;Hero[]&gt;*타입을 반환하기 때문에 *</em>컴포넌트** 코드도 수정하여야 한다.</p>\n<blockquote>\n<p>기존 컴포넌트 코드</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHeroes(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.heroes = <span class=\"built_in\">this</span>.heroService.getHeroes();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>수정된 컴포넌트 코드</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHeroes(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.heroService.getHeroes()</span><br><span class=\"line\">      .subscribe(<span class=\"function\"><span class=\"params\">heroes</span> =&gt;</span> <span class=\"built_in\">this</span>.heroes = heroes);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><em>비동기 방식</em>으로 수정한 후에는 서버의 응답이 언제 도착하는지와 관계없이, 이 응답이 도착했을 때 <strong>subscribe</strong>가 서버에서 받은 응답을 콜백함수로 전달하고, 컴포넌트는 이렇게 받은 데이터를 heroes 프로퍼티에 할당한다.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>아래 코드는 <em>heroService</em>라는 <strong>서비스 클래스</strong>에서 <strong>목 데이터 값</strong>을 가져오는 코드이다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.heroes = <span class=\"built_in\">this</span>.heroService.getHeroes();</span><br></pre></td></tr></table></figure>\n<p>위 코드에서 <code>heroService.getHeroes()</code>는 <em>동기 방식</em>으로 동작하기 때문에 함수의 실행결과가 바로 반환된다. 목 데이터를 가져올 때는 동기 방식이 유효할 수 있지만, 일반적인 애플리케이션에서는 리모트 서버에서 데이터를 가져오기 때문에, <em>비동기 동작</em>을 처리해야 하는 경우가 대부분이다.</p>\n<p><em>비동기</em>로 동작하기 위해 여러 방법을 사용할 수 있다.</p>\n<ol>\n<li>콜백함수를 사용한다.</li>\n<li>Promise를 반환하도록 처리한다.</li>\n<li><strong>Observable</strong>을 반환하도록 처리한다.</li>\n</ol>\n<p>이 포스팅에서는 3번의 방법을 구현해 보겠다! (Angular가 제공하는 <em>HttpClient.get</em> 메소드가 <strong>Observable</strong>을 반환하기 때문에 가장 자연스럽다.)</p>\n<p><code>Observable</code> : <em>RxJS 라이브러리</em>가 제공하는 클래스 중 가장 중요한 클래스이다. </p>\n<p>먼저 서비스 클래스 파일에 코드를 추가한다.</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Observable, <span class=\"keyword\">of</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;rxjs&#x27;</span>;</span><br></pre></td></tr></table></figure>\n<p>Observable을 로드한다.</p>\n<p>getHeroes() 메소드를 수정한다.</p>\n<blockquote>\n<p>기존 getHeroes() 메소드</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHeroes(): Hero[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> HEROES;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>수정된 getHeroes() 메소드</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHeroes(): Observable&lt;Hero[]&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">of</span>(HEROES);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><em>of(HEROES)*는 히어로 목 데이터를 *</em>Observable&lt;Hero[]&gt;** 타입으로한번에 반환한다.</p>\n<p>이제는 <em>Observable&lt;Hero[]&gt;*타입을 반환하기 때문에 *</em>컴포넌트** 코드도 수정하여야 한다.</p>\n<blockquote>\n<p>기존 컴포넌트 코드</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHeroes(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.heroes = <span class=\"built_in\">this</span>.heroService.getHeroes();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>수정된 컴포넌트 코드</p>\n</blockquote>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getHeroes(): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.heroService.getHeroes()</span><br><span class=\"line\">      .subscribe(<span class=\"function\"><span class=\"params\">heroes</span> =&gt;</span> <span class=\"built_in\">this</span>.heroes = heroes);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><em>비동기 방식</em>으로 수정한 후에는 서버의 응답이 언제 도착하는지와 관계없이, 이 응답이 도착했을 때 <strong>subscribe</strong>가 서버에서 받은 응답을 콜백함수로 전달하고, 컴포넌트는 이렇게 받은 데이터를 heroes 프로퍼티에 할당한다.</p>\n"},{"title":"[백준알고리즘] 11407 동전0 - 파이썬(python)","date":"2020-04-19T14:25:00.000Z","_content":"\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답  | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :---- | :-------- | :-------- |\n| 1 초      | 256 MB      | 27606 | 14939 | 12067     | 54.587%   |\n\n준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.\n\n동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.\n\n## 입력\n\n첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000)\n\n둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. (1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수)\n\n## 출력\n\n첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값을 출력한다.\n\n## 예제 입력 1 복사\n\n```\n10 4200\n1\n5\n10\n50\n100\n500\n1000\n5000\n10000\n50000\n```\n\n## 예제 출력 1 복사\n\n```\n6\n```\n\n## 예제 입력 2 복사\n\n```\n10 4790\n1\n5\n10\n50\n100\n500\n1000\n5000\n10000\n50000\n```\n\n## 예제 출력 2 복사\n\n```\n12\n```\n\n## 출처\n\n- 문제를 만든 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)\n\n## 알고리즘 분류\n\n- [그리디 알고리즘](https://www.acmicpc.net/problem/tag/그리디 알고리즘)\n- [동전 교환](https://www.acmicpc.net/problem/tag/동전 교환)\n\n\n\n# 풀이\n\n```python\nn, k = map(int, input().split())\ncoins = []\nfor _ in range(n):\n    coin = int(input())\n    if coin > k:\n        break\n    coins.append(coin)\n     \ncount = 0\nanswer = 0\nfor i in range(1,n+1):\n    count = k // coins[-i]\n    k = k % coins[-i]\n    answer += count\n    if k == 0:\n        break\n\nprint(answer)\n```\n\nn과 k를 map(int, input().split()`.strip()`) 으로 가져오니 런타임에러가 떴다.. \n\n없애니 실행이 잘 됐다. \n\n\n\n애초에 k값보다 큰 coin 값은 제외하고 coins 배열에 넣었다.\n\ncoins 배열의 인덱스를 반대로 돌면서 나눈 몫을 answer에 더하고 k엔 나눈 나머지 값을 저장하다가 k가 0이 되면 멈춘다. ","source":"_posts/backjoon-11047.md","raw":"---\ntitle: \"[백준알고리즘] 11407 동전0 - 파이썬(python)\"\ndate: 2020-04-19 23:25:00\ntags: 알고리즘\n---\n\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답  | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :---- | :-------- | :-------- |\n| 1 초      | 256 MB      | 27606 | 14939 | 12067     | 54.587%   |\n\n준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.\n\n동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.\n\n## 입력\n\n첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000)\n\n둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. (1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수)\n\n## 출력\n\n첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값을 출력한다.\n\n## 예제 입력 1 복사\n\n```\n10 4200\n1\n5\n10\n50\n100\n500\n1000\n5000\n10000\n50000\n```\n\n## 예제 출력 1 복사\n\n```\n6\n```\n\n## 예제 입력 2 복사\n\n```\n10 4790\n1\n5\n10\n50\n100\n500\n1000\n5000\n10000\n50000\n```\n\n## 예제 출력 2 복사\n\n```\n12\n```\n\n## 출처\n\n- 문제를 만든 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)\n\n## 알고리즘 분류\n\n- [그리디 알고리즘](https://www.acmicpc.net/problem/tag/그리디 알고리즘)\n- [동전 교환](https://www.acmicpc.net/problem/tag/동전 교환)\n\n\n\n# 풀이\n\n```python\nn, k = map(int, input().split())\ncoins = []\nfor _ in range(n):\n    coin = int(input())\n    if coin > k:\n        break\n    coins.append(coin)\n     \ncount = 0\nanswer = 0\nfor i in range(1,n+1):\n    count = k // coins[-i]\n    k = k % coins[-i]\n    answer += count\n    if k == 0:\n        break\n\nprint(answer)\n```\n\nn과 k를 map(int, input().split()`.strip()`) 으로 가져오니 런타임에러가 떴다.. \n\n없애니 실행이 잘 됐다. \n\n\n\n애초에 k값보다 큰 coin 값은 제외하고 coins 배열에 넣었다.\n\ncoins 배열의 인덱스를 반대로 돌면서 나눈 몫을 answer에 더하고 k엔 나눈 나머지 값을 저장하다가 k가 0이 되면 멈춘다. ","slug":"backjoon-11047","published":1,"updated":"2021-02-08T18:25:07.572Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jq000tf9c976f1dv37","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">256 MB</td>\n<td align=\"left\">27606</td>\n<td align=\"left\">14939</td>\n<td align=\"left\">12067</td>\n<td align=\"left\">54.587%</td>\n</tr>\n</tbody></table>\n<p>준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.</p>\n<p>동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000)</p>\n<p>둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. (1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수)</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값을 출력한다.</p>\n<h2 id=\"예제-입력-1-복사\"><a href=\"#예제-입력-1-복사\" class=\"headerlink\" title=\"예제 입력 1 복사\"></a>예제 입력 1 복사</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 4200</span><br><span class=\"line\">1</span><br><span class=\"line\">5</span><br><span class=\"line\">10</span><br><span class=\"line\">50</span><br><span class=\"line\">100</span><br><span class=\"line\">500</span><br><span class=\"line\">1000</span><br><span class=\"line\">5000</span><br><span class=\"line\">10000</span><br><span class=\"line\">50000</span><br></pre></td></tr></table></figure>\n<h2 id=\"예제-출력-1-복사\"><a href=\"#예제-출력-1-복사\" class=\"headerlink\" title=\"예제 출력 1 복사\"></a>예제 출력 1 복사</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n<h2 id=\"예제-입력-2-복사\"><a href=\"#예제-입력-2-복사\" class=\"headerlink\" title=\"예제 입력 2 복사\"></a>예제 입력 2 복사</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 4790</span><br><span class=\"line\">1</span><br><span class=\"line\">5</span><br><span class=\"line\">10</span><br><span class=\"line\">50</span><br><span class=\"line\">100</span><br><span class=\"line\">500</span><br><span class=\"line\">1000</span><br><span class=\"line\">5000</span><br><span class=\"line\">10000</span><br><span class=\"line\">50000</span><br></pre></td></tr></table></figure>\n<h2 id=\"예제-출력-2-복사\"><a href=\"#예제-출력-2-복사\" class=\"headerlink\" title=\"예제 출력 2 복사\"></a>예제 출력 2 복사</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n<h2 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h2><ul>\n<li>문제를 만든 사람: <a href=\"https://www.acmicpc.net/user/baekjoon\">baekjoon</a></li>\n</ul>\n<h2 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h2><ul>\n<li>[그리디 알고리즘](<a href=\"https://www.acmicpc.net/problem/tag/%EA%B7%B8%EB%A6%AC%EB%94%94\">https://www.acmicpc.net/problem/tag/그리디</a> 알고리즘)</li>\n<li>[동전 교환](<a href=\"https://www.acmicpc.net/problem/tag/%EB%8F%99%EC%A0%84\">https://www.acmicpc.net/problem/tag/동전</a> 교환)</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n, k = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">coins = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">    coin = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> coin &gt; k:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    coins.append(coin)</span><br><span class=\"line\">     </span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\">answer = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">    count = k // coins[-i]</span><br><span class=\"line\">    k = k % coins[-i]</span><br><span class=\"line\">    answer += count</span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(answer)</span><br></pre></td></tr></table></figure>\n<p>n과 k를 map(int, input().split()<code>.strip()</code>) 으로 가져오니 런타임에러가 떴다.. </p>\n<p>없애니 실행이 잘 됐다. </p>\n<p>애초에 k값보다 큰 coin 값은 제외하고 coins 배열에 넣었다.</p>\n<p>coins 배열의 인덱스를 반대로 돌면서 나눈 몫을 answer에 더하고 k엔 나눈 나머지 값을 저장하다가 k가 0이 되면 멈춘다. </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">256 MB</td>\n<td align=\"left\">27606</td>\n<td align=\"left\">14939</td>\n<td align=\"left\">12067</td>\n<td align=\"left\">54.587%</td>\n</tr>\n</tbody></table>\n<p>준규가 가지고 있는 동전은 총 N종류이고, 각각의 동전을 매우 많이 가지고 있다.</p>\n<p>동전을 적절히 사용해서 그 가치의 합을 K로 만들려고 한다. 이때 필요한 동전 개수의 최솟값을 구하는 프로그램을 작성하시오.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 N과 K가 주어진다. (1 ≤ N ≤ 10, 1 ≤ K ≤ 100,000,000)</p>\n<p>둘째 줄부터 N개의 줄에 동전의 가치 Ai가 오름차순으로 주어진다. (1 ≤ Ai ≤ 1,000,000, A1 = 1, i ≥ 2인 경우에 Ai는 Ai-1의 배수)</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 K원을 만드는데 필요한 동전 개수의 최솟값을 출력한다.</p>\n<h2 id=\"예제-입력-1-복사\"><a href=\"#예제-입력-1-복사\" class=\"headerlink\" title=\"예제 입력 1 복사\"></a>예제 입력 1 복사</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 4200</span><br><span class=\"line\">1</span><br><span class=\"line\">5</span><br><span class=\"line\">10</span><br><span class=\"line\">50</span><br><span class=\"line\">100</span><br><span class=\"line\">500</span><br><span class=\"line\">1000</span><br><span class=\"line\">5000</span><br><span class=\"line\">10000</span><br><span class=\"line\">50000</span><br></pre></td></tr></table></figure>\n<h2 id=\"예제-출력-1-복사\"><a href=\"#예제-출력-1-복사\" class=\"headerlink\" title=\"예제 출력 1 복사\"></a>예제 출력 1 복사</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br></pre></td></tr></table></figure>\n<h2 id=\"예제-입력-2-복사\"><a href=\"#예제-입력-2-복사\" class=\"headerlink\" title=\"예제 입력 2 복사\"></a>예제 입력 2 복사</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 4790</span><br><span class=\"line\">1</span><br><span class=\"line\">5</span><br><span class=\"line\">10</span><br><span class=\"line\">50</span><br><span class=\"line\">100</span><br><span class=\"line\">500</span><br><span class=\"line\">1000</span><br><span class=\"line\">5000</span><br><span class=\"line\">10000</span><br><span class=\"line\">50000</span><br></pre></td></tr></table></figure>\n<h2 id=\"예제-출력-2-복사\"><a href=\"#예제-출력-2-복사\" class=\"headerlink\" title=\"예제 출력 2 복사\"></a>예제 출력 2 복사</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n<h2 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h2><ul>\n<li>문제를 만든 사람: <a href=\"https://www.acmicpc.net/user/baekjoon\">baekjoon</a></li>\n</ul>\n<h2 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h2><ul>\n<li>[그리디 알고리즘](<a href=\"https://www.acmicpc.net/problem/tag/%EA%B7%B8%EB%A6%AC%EB%94%94\">https://www.acmicpc.net/problem/tag/그리디</a> 알고리즘)</li>\n<li>[동전 교환](<a href=\"https://www.acmicpc.net/problem/tag/%EB%8F%99%EC%A0%84\">https://www.acmicpc.net/problem/tag/동전</a> 교환)</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n, k = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">coins = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">    coin = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> coin &gt; k:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\">    coins.append(coin)</span><br><span class=\"line\">     </span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\">answer = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">    count = k // coins[-i]</span><br><span class=\"line\">    k = k % coins[-i]</span><br><span class=\"line\">    answer += count</span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(answer)</span><br></pre></td></tr></table></figure>\n<p>n과 k를 map(int, input().split()<code>.strip()</code>) 으로 가져오니 런타임에러가 떴다.. </p>\n<p>없애니 실행이 잘 됐다. </p>\n<p>애초에 k값보다 큰 coin 값은 제외하고 coins 배열에 넣었다.</p>\n<p>coins 배열의 인덱스를 반대로 돌면서 나눈 몫을 answer에 더하고 k엔 나눈 나머지 값을 저장하다가 k가 0이 되면 멈춘다. </p>\n"},{"title":"[알고리즘] 백준알고리즘(boj) - 12761: 돌다리 (파이썬/python)","date":"2020-08-18T16:03:00.000Z","_content":"\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출 | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :--- | :--- | :-------- | :-------- |\n| 1 초      | 128 MB      | 1856 | 923  | 773       | 51.091%   |\n\n동규와 주미는 일직선 상의 돌 다리 위에있다. 돌의 번호는 0 부터 100,000 까지 존재하고 동규는 N번 돌 위에, 주미는 M번 돌 위에 위치하고 있다. 동규는 주미가 너무 보고싶기 때문에 최대한 빨리 주미에게 가기 위해 A,B 만큼의 힘을 가진 스카이 콩콩을 가져왔다. 동규가 정한 다리를 건너는 규칙은 턴 방식인데, 한 턴에 이동할 수 있는 거리는 이러하다. 현 위치에서 +1칸, -1칸을 이동할 수 있고, 스카이 콩콩을 이용해 현 위치에서 A나 B만큼 좌우로 점프할 수 있으며, 순간적으로 힘을 모아 현 위치의 A배나 B배의 위치로 이동을 할 수 있다. 예를 들어 지금 동규가 7번 돌 위에 있고 스카이 콩콩의 힘이 8이면 그냥 점프를 해서 15번 돌에 갈 수도 있고, 순간적으로 힘을 모아 56번 돌에 갈 수도 있다는 것이다. 주어진 8가지의 방법 중 적절한 방법을 골라서 최대한 빨리 동규가 주미를 만날 수 있게 도와주자. 단, 이동 과정에서 100,000보다 크거나 0보다 작은 번호의 돌은 존재하지 않으므로 갈 수 없고, 같은 방법을 계속 사용해도 되며 항상 도달할 수 있는 케이스만 주어진다.\n\n## 입력\n\n입력의 첫 줄에 스카이 콩콩의 힘 A와 B, 그리고 동규의 현재위치 N, 주미의 현재 위치 M이 주어진다. (단, 2≤A,B≤30 이고  0≤N,M≤100,000)\n\n## 출력\n\n동규가 주미에게 도달하기 위한 최소한의 이동 횟수를 출력하라.\n\n\n\n### 예제 입력\n\n```\n2 3 1 20\n```\n\n### 예제 출력 \n\n```\n4\n```\n\n### 예제 입력 \n\n```\n3 7 2 98500\n```\n\n### 예제 출력 \n\n```\n10\n```\n\n\n\n# 풀이\n\n```python\nimport sys\ninput = sys.stdin.readline\n\ndef bfs():\n    while queue:\n        start = queue.pop(0)\n        for i in range(8):        \n            if i < 6 and 0<= start+ steps[i] < 100001 and foot_prints[start + steps[i]] == 0:\n                now = start + steps[i]\n                foot_prints[now] = 1\n                queue.append(now)\n                count[now] += count[start] + 1\n            elif i >= 6 and 0 <= start * steps[i] < 100001 and foot_prints[start * steps[i]] == 0 : \n                now = start * steps[i]\n                foot_prints[now] = 1\n                queue.append(now)\n                count[now]+= count[start] + 1\n            \n\na, b, n, m = map(int,input().split())\nsteps = [-1, 1, a, b, -a, -b, a, b]\nqueue= [n]\nfoot_prints = [0 for _ in range(100001)]\ncount = [0 for _ in range(100001)]\nbfs()\nprint(count[m])\n```\n\n\n\nbfs 를 이용해서 풀었다.\n\n* steps 배열에 이동할 수 있는 모든 경우의 수를 넣는다 \n\n  > steps =  [-1칸 이동, +1칸 이동, a 만큼 이동, b만큼 이동, -a만큼 이동, -b만큼 이동, *a만큼 이동, *b만큼 이동]\n\n* foot_prints 를 길이 100000인 배열로 만드는 이유 ! \n\n  * 내가 기존에 풀었던 방식인 ` if start + steps[i] not in foot_prints` 으로 하면 foot_prints를 전체탐색해야하기 때문에 시간이 오래걸려서 \n\n* `for i in range(8)`에서 start에서 steps의 모든 방법으로 이동한 곳의 count 를 1 증가시킨다. \n\n  > for 문이 i= 0 부터 i=7 까지 한번 돌면 (while 문이 1번 돈 상태)\n  >\n  > count[start-1]\n  >\n  > count[start+1]\n  >\n  > count[start+a]\n  >\n  > count[start+b]\n  >\n  > count[start-a]\n  >\n  > count[start-b]\n  >\n  > count[start*a]\n  >\n  > count[start-*b]\n  >\n  > (if 조건을 모두 만족한다면,)\n  >\n  > 가 모두 1이 된다\n\n  * 들린 곳을 모두 queue에 삽입하였기 때문에 들린 곳이 start가 되고 다시 steps의 모든 방법으로 이동한 곳의 count는 count[start]보다 1 증가한 값이 된다.\n\n    >  while 문이 2번 돈 상태에서 ( if 조건을 모두 만족했다는 전제하에서는) count[now]는 2가 된다 (while 한번 돌았을 때 count[now] =1 이 되었기 때문) \n\n* while 문은 start에서 steps로 가는 모든 경우(`for i in range(8)`)가 범위가 0이상 100000이하를 만족하지 못하거나  이미 다 들린 경우(`foot_prints가 1`) 끝난다.\n\n* 이제 count[m]은 동규(n)가 주미(m)에게 가기 위해 이동한 횟수임을 알 수 있다 !\n\n\n\ndeque 이용하는 방법 익히려고 deque 이용한 코드도 남겨두기,,\n\n```python\n두from collections import deque\nimport sys\ninput = sys.stdin.readline\n\ndef bfs():\n    while queue:\n        start = queue.popleft()\n        for i in range(8):        \n            if i < 6 and 0<= start+ steps[i] < 100001 and foot_prints[start + steps[i]] == 0:\n                now = start + steps[i]\n                foot_prints[now] = 1\n                queue.append(now)\n                count[now] += count[start] + 1\n            elif i >= 6 and 0 <= start * steps[i] < 100001 and foot_prints[start * steps[i]] == 0 : \n                now = start * steps[i]\n                foot_prints[now] = 1\n                queue.append(now)\n                count[now]+= count[start] + 1\n            \n\na, b, n, m = map(int,input().split())\nsteps = [-1, 1, a, b, -a, -b, a, b]\nqueue = deque()\nqueue.append(n)\nfoot_prints = [0 for _ in range(100001)]\ncount = [0 for _ in range(100001)]\nbfs()\nprint(count[m])\n```\n\n","source":"_posts/backjoon-12761.md","raw":"---\ntitle: \"[알고리즘] 백준알고리즘(boj) - 12761: 돌다리 (파이썬/python)\"\ndate: 2020-08-19 01:03:00\ntags: 알고리즘\n---\n\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출 | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :--- | :--- | :-------- | :-------- |\n| 1 초      | 128 MB      | 1856 | 923  | 773       | 51.091%   |\n\n동규와 주미는 일직선 상의 돌 다리 위에있다. 돌의 번호는 0 부터 100,000 까지 존재하고 동규는 N번 돌 위에, 주미는 M번 돌 위에 위치하고 있다. 동규는 주미가 너무 보고싶기 때문에 최대한 빨리 주미에게 가기 위해 A,B 만큼의 힘을 가진 스카이 콩콩을 가져왔다. 동규가 정한 다리를 건너는 규칙은 턴 방식인데, 한 턴에 이동할 수 있는 거리는 이러하다. 현 위치에서 +1칸, -1칸을 이동할 수 있고, 스카이 콩콩을 이용해 현 위치에서 A나 B만큼 좌우로 점프할 수 있으며, 순간적으로 힘을 모아 현 위치의 A배나 B배의 위치로 이동을 할 수 있다. 예를 들어 지금 동규가 7번 돌 위에 있고 스카이 콩콩의 힘이 8이면 그냥 점프를 해서 15번 돌에 갈 수도 있고, 순간적으로 힘을 모아 56번 돌에 갈 수도 있다는 것이다. 주어진 8가지의 방법 중 적절한 방법을 골라서 최대한 빨리 동규가 주미를 만날 수 있게 도와주자. 단, 이동 과정에서 100,000보다 크거나 0보다 작은 번호의 돌은 존재하지 않으므로 갈 수 없고, 같은 방법을 계속 사용해도 되며 항상 도달할 수 있는 케이스만 주어진다.\n\n## 입력\n\n입력의 첫 줄에 스카이 콩콩의 힘 A와 B, 그리고 동규의 현재위치 N, 주미의 현재 위치 M이 주어진다. (단, 2≤A,B≤30 이고  0≤N,M≤100,000)\n\n## 출력\n\n동규가 주미에게 도달하기 위한 최소한의 이동 횟수를 출력하라.\n\n\n\n### 예제 입력\n\n```\n2 3 1 20\n```\n\n### 예제 출력 \n\n```\n4\n```\n\n### 예제 입력 \n\n```\n3 7 2 98500\n```\n\n### 예제 출력 \n\n```\n10\n```\n\n\n\n# 풀이\n\n```python\nimport sys\ninput = sys.stdin.readline\n\ndef bfs():\n    while queue:\n        start = queue.pop(0)\n        for i in range(8):        \n            if i < 6 and 0<= start+ steps[i] < 100001 and foot_prints[start + steps[i]] == 0:\n                now = start + steps[i]\n                foot_prints[now] = 1\n                queue.append(now)\n                count[now] += count[start] + 1\n            elif i >= 6 and 0 <= start * steps[i] < 100001 and foot_prints[start * steps[i]] == 0 : \n                now = start * steps[i]\n                foot_prints[now] = 1\n                queue.append(now)\n                count[now]+= count[start] + 1\n            \n\na, b, n, m = map(int,input().split())\nsteps = [-1, 1, a, b, -a, -b, a, b]\nqueue= [n]\nfoot_prints = [0 for _ in range(100001)]\ncount = [0 for _ in range(100001)]\nbfs()\nprint(count[m])\n```\n\n\n\nbfs 를 이용해서 풀었다.\n\n* steps 배열에 이동할 수 있는 모든 경우의 수를 넣는다 \n\n  > steps =  [-1칸 이동, +1칸 이동, a 만큼 이동, b만큼 이동, -a만큼 이동, -b만큼 이동, *a만큼 이동, *b만큼 이동]\n\n* foot_prints 를 길이 100000인 배열로 만드는 이유 ! \n\n  * 내가 기존에 풀었던 방식인 ` if start + steps[i] not in foot_prints` 으로 하면 foot_prints를 전체탐색해야하기 때문에 시간이 오래걸려서 \n\n* `for i in range(8)`에서 start에서 steps의 모든 방법으로 이동한 곳의 count 를 1 증가시킨다. \n\n  > for 문이 i= 0 부터 i=7 까지 한번 돌면 (while 문이 1번 돈 상태)\n  >\n  > count[start-1]\n  >\n  > count[start+1]\n  >\n  > count[start+a]\n  >\n  > count[start+b]\n  >\n  > count[start-a]\n  >\n  > count[start-b]\n  >\n  > count[start*a]\n  >\n  > count[start-*b]\n  >\n  > (if 조건을 모두 만족한다면,)\n  >\n  > 가 모두 1이 된다\n\n  * 들린 곳을 모두 queue에 삽입하였기 때문에 들린 곳이 start가 되고 다시 steps의 모든 방법으로 이동한 곳의 count는 count[start]보다 1 증가한 값이 된다.\n\n    >  while 문이 2번 돈 상태에서 ( if 조건을 모두 만족했다는 전제하에서는) count[now]는 2가 된다 (while 한번 돌았을 때 count[now] =1 이 되었기 때문) \n\n* while 문은 start에서 steps로 가는 모든 경우(`for i in range(8)`)가 범위가 0이상 100000이하를 만족하지 못하거나  이미 다 들린 경우(`foot_prints가 1`) 끝난다.\n\n* 이제 count[m]은 동규(n)가 주미(m)에게 가기 위해 이동한 횟수임을 알 수 있다 !\n\n\n\ndeque 이용하는 방법 익히려고 deque 이용한 코드도 남겨두기,,\n\n```python\n두from collections import deque\nimport sys\ninput = sys.stdin.readline\n\ndef bfs():\n    while queue:\n        start = queue.popleft()\n        for i in range(8):        \n            if i < 6 and 0<= start+ steps[i] < 100001 and foot_prints[start + steps[i]] == 0:\n                now = start + steps[i]\n                foot_prints[now] = 1\n                queue.append(now)\n                count[now] += count[start] + 1\n            elif i >= 6 and 0 <= start * steps[i] < 100001 and foot_prints[start * steps[i]] == 0 : \n                now = start * steps[i]\n                foot_prints[now] = 1\n                queue.append(now)\n                count[now]+= count[start] + 1\n            \n\na, b, n, m = map(int,input().split())\nsteps = [-1, 1, a, b, -a, -b, a, b]\nqueue = deque()\nqueue.append(n)\nfoot_prints = [0 for _ in range(100001)]\ncount = [0 for _ in range(100001)]\nbfs()\nprint(count[m])\n```\n\n","slug":"backjoon-12761","published":1,"updated":"2021-02-08T18:25:07.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jr000vf9c9h9rkb1ka","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">128 MB</td>\n<td align=\"left\">1856</td>\n<td align=\"left\">923</td>\n<td align=\"left\">773</td>\n<td align=\"left\">51.091%</td>\n</tr>\n</tbody></table>\n<p>동규와 주미는 일직선 상의 돌 다리 위에있다. 돌의 번호는 0 부터 100,000 까지 존재하고 동규는 N번 돌 위에, 주미는 M번 돌 위에 위치하고 있다. 동규는 주미가 너무 보고싶기 때문에 최대한 빨리 주미에게 가기 위해 A,B 만큼의 힘을 가진 스카이 콩콩을 가져왔다. 동규가 정한 다리를 건너는 규칙은 턴 방식인데, 한 턴에 이동할 수 있는 거리는 이러하다. 현 위치에서 +1칸, -1칸을 이동할 수 있고, 스카이 콩콩을 이용해 현 위치에서 A나 B만큼 좌우로 점프할 수 있으며, 순간적으로 힘을 모아 현 위치의 A배나 B배의 위치로 이동을 할 수 있다. 예를 들어 지금 동규가 7번 돌 위에 있고 스카이 콩콩의 힘이 8이면 그냥 점프를 해서 15번 돌에 갈 수도 있고, 순간적으로 힘을 모아 56번 돌에 갈 수도 있다는 것이다. 주어진 8가지의 방법 중 적절한 방법을 골라서 최대한 빨리 동규가 주미를 만날 수 있게 도와주자. 단, 이동 과정에서 100,000보다 크거나 0보다 작은 번호의 돌은 존재하지 않으므로 갈 수 없고, 같은 방법을 계속 사용해도 되며 항상 도달할 수 있는 케이스만 주어진다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>입력의 첫 줄에 스카이 콩콩의 힘 A와 B, 그리고 동규의 현재위치 N, 주미의 현재 위치 M이 주어진다. (단, 2≤A,B≤30 이고  0≤N,M≤100,000)</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>동규가 주미에게 도달하기 위한 최소한의 이동 횟수를 출력하라.</p>\n<h3 id=\"예제-입력\"><a href=\"#예제-입력\" class=\"headerlink\" title=\"예제 입력\"></a>예제 입력</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 3 1 20</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력\"><a href=\"#예제-출력\" class=\"headerlink\" title=\"예제 출력\"></a>예제 출력</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력\"></a>예제 입력</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 7 2 98500</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력\"></a>예제 출력</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bfs</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        start = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt; <span class=\"number\">6</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;= start+ steps[i] &lt; <span class=\"number\">100001</span> <span class=\"keyword\">and</span> foot_prints[start + steps[i]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                now = start + steps[i]</span><br><span class=\"line\">                foot_prints[now] = <span class=\"number\">1</span></span><br><span class=\"line\">                queue.append(now)</span><br><span class=\"line\">                count[now] += count[start] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &gt;= <span class=\"number\">6</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= start * steps[i] &lt; <span class=\"number\">100001</span> <span class=\"keyword\">and</span> foot_prints[start * steps[i]] == <span class=\"number\">0</span> : </span><br><span class=\"line\">                now = start * steps[i]</span><br><span class=\"line\">                foot_prints[now] = <span class=\"number\">1</span></span><br><span class=\"line\">                queue.append(now)</span><br><span class=\"line\">                count[now]+= count[start] + <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">a, b, n, m = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">steps = [-<span class=\"number\">1</span>, <span class=\"number\">1</span>, a, b, -a, -b, a, b]</span><br><span class=\"line\">queue= [n]</span><br><span class=\"line\">foot_prints = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100001</span>)]</span><br><span class=\"line\">count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100001</span>)]</span><br><span class=\"line\">bfs()</span><br><span class=\"line\">print(count[m])</span><br></pre></td></tr></table></figure>\n\n\n<p>bfs 를 이용해서 풀었다.</p>\n<ul>\n<li><p>steps 배열에 이동할 수 있는 모든 경우의 수를 넣는다 </p>\n<blockquote>\n<p>steps =  [-1칸 이동, +1칸 이동, a 만큼 이동, b만큼 이동, -a만큼 이동, -b만큼 이동, *a만큼 이동, *b만큼 이동]</p>\n</blockquote>\n</li>\n<li><p>foot_prints 를 길이 100000인 배열로 만드는 이유 ! </p>\n<ul>\n<li>내가 기존에 풀었던 방식인 <code> if start + steps[i] not in foot_prints</code> 으로 하면 foot_prints를 전체탐색해야하기 때문에 시간이 오래걸려서 </li>\n</ul>\n</li>\n<li><p><code>for i in range(8)</code>에서 start에서 steps의 모든 방법으로 이동한 곳의 count 를 1 증가시킨다. </p>\n<blockquote>\n<p>for 문이 i= 0 부터 i=7 까지 한번 돌면 (while 문이 1번 돈 상태)</p>\n<p>count[start-1]</p>\n<p>count[start+1]</p>\n<p>count[start+a]</p>\n<p>count[start+b]</p>\n<p>count[start-a]</p>\n<p>count[start-b]</p>\n<p>count[start*a]</p>\n<p>count[start-*b]</p>\n<p>(if 조건을 모두 만족한다면,)</p>\n<p>가 모두 1이 된다</p>\n</blockquote>\n<ul>\n<li><p>들린 곳을 모두 queue에 삽입하였기 때문에 들린 곳이 start가 되고 다시 steps의 모든 방법으로 이동한 곳의 count는 count[start]보다 1 증가한 값이 된다.</p>\n<blockquote>\n<p> while 문이 2번 돈 상태에서 ( if 조건을 모두 만족했다는 전제하에서는) count[now]는 2가 된다 (while 한번 돌았을 때 count[now] =1 이 되었기 때문) </p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>while 문은 start에서 steps로 가는 모든 경우(<code>for i in range(8)</code>)가 범위가 0이상 100000이하를 만족하지 못하거나  이미 다 들린 경우(<code>foot_prints가 1</code>) 끝난다.</p>\n</li>\n<li><p>이제 count[m]은 동규(n)가 주미(m)에게 가기 위해 이동한 횟수임을 알 수 있다 !</p>\n</li>\n</ul>\n<p>deque 이용하는 방법 익히려고 deque 이용한 코드도 남겨두기,,</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">두<span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bfs</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        start = queue.popleft()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt; <span class=\"number\">6</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;= start+ steps[i] &lt; <span class=\"number\">100001</span> <span class=\"keyword\">and</span> foot_prints[start + steps[i]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                now = start + steps[i]</span><br><span class=\"line\">                foot_prints[now] = <span class=\"number\">1</span></span><br><span class=\"line\">                queue.append(now)</span><br><span class=\"line\">                count[now] += count[start] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &gt;= <span class=\"number\">6</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= start * steps[i] &lt; <span class=\"number\">100001</span> <span class=\"keyword\">and</span> foot_prints[start * steps[i]] == <span class=\"number\">0</span> : </span><br><span class=\"line\">                now = start * steps[i]</span><br><span class=\"line\">                foot_prints[now] = <span class=\"number\">1</span></span><br><span class=\"line\">                queue.append(now)</span><br><span class=\"line\">                count[now]+= count[start] + <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">a, b, n, m = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">steps = [-<span class=\"number\">1</span>, <span class=\"number\">1</span>, a, b, -a, -b, a, b]</span><br><span class=\"line\">queue = deque()</span><br><span class=\"line\">queue.append(n)</span><br><span class=\"line\">foot_prints = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100001</span>)]</span><br><span class=\"line\">count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100001</span>)]</span><br><span class=\"line\">bfs()</span><br><span class=\"line\">print(count[m])</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">128 MB</td>\n<td align=\"left\">1856</td>\n<td align=\"left\">923</td>\n<td align=\"left\">773</td>\n<td align=\"left\">51.091%</td>\n</tr>\n</tbody></table>\n<p>동규와 주미는 일직선 상의 돌 다리 위에있다. 돌의 번호는 0 부터 100,000 까지 존재하고 동규는 N번 돌 위에, 주미는 M번 돌 위에 위치하고 있다. 동규는 주미가 너무 보고싶기 때문에 최대한 빨리 주미에게 가기 위해 A,B 만큼의 힘을 가진 스카이 콩콩을 가져왔다. 동규가 정한 다리를 건너는 규칙은 턴 방식인데, 한 턴에 이동할 수 있는 거리는 이러하다. 현 위치에서 +1칸, -1칸을 이동할 수 있고, 스카이 콩콩을 이용해 현 위치에서 A나 B만큼 좌우로 점프할 수 있으며, 순간적으로 힘을 모아 현 위치의 A배나 B배의 위치로 이동을 할 수 있다. 예를 들어 지금 동규가 7번 돌 위에 있고 스카이 콩콩의 힘이 8이면 그냥 점프를 해서 15번 돌에 갈 수도 있고, 순간적으로 힘을 모아 56번 돌에 갈 수도 있다는 것이다. 주어진 8가지의 방법 중 적절한 방법을 골라서 최대한 빨리 동규가 주미를 만날 수 있게 도와주자. 단, 이동 과정에서 100,000보다 크거나 0보다 작은 번호의 돌은 존재하지 않으므로 갈 수 없고, 같은 방법을 계속 사용해도 되며 항상 도달할 수 있는 케이스만 주어진다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>입력의 첫 줄에 스카이 콩콩의 힘 A와 B, 그리고 동규의 현재위치 N, 주미의 현재 위치 M이 주어진다. (단, 2≤A,B≤30 이고  0≤N,M≤100,000)</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>동규가 주미에게 도달하기 위한 최소한의 이동 횟수를 출력하라.</p>\n<h3 id=\"예제-입력\"><a href=\"#예제-입력\" class=\"headerlink\" title=\"예제 입력\"></a>예제 입력</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 3 1 20</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력\"><a href=\"#예제-출력\" class=\"headerlink\" title=\"예제 출력\"></a>예제 출력</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력\"></a>예제 입력</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 7 2 98500</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력\"></a>예제 출력</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bfs</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        start = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt; <span class=\"number\">6</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;= start+ steps[i] &lt; <span class=\"number\">100001</span> <span class=\"keyword\">and</span> foot_prints[start + steps[i]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                now = start + steps[i]</span><br><span class=\"line\">                foot_prints[now] = <span class=\"number\">1</span></span><br><span class=\"line\">                queue.append(now)</span><br><span class=\"line\">                count[now] += count[start] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &gt;= <span class=\"number\">6</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= start * steps[i] &lt; <span class=\"number\">100001</span> <span class=\"keyword\">and</span> foot_prints[start * steps[i]] == <span class=\"number\">0</span> : </span><br><span class=\"line\">                now = start * steps[i]</span><br><span class=\"line\">                foot_prints[now] = <span class=\"number\">1</span></span><br><span class=\"line\">                queue.append(now)</span><br><span class=\"line\">                count[now]+= count[start] + <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">a, b, n, m = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">steps = [-<span class=\"number\">1</span>, <span class=\"number\">1</span>, a, b, -a, -b, a, b]</span><br><span class=\"line\">queue= [n]</span><br><span class=\"line\">foot_prints = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100001</span>)]</span><br><span class=\"line\">count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100001</span>)]</span><br><span class=\"line\">bfs()</span><br><span class=\"line\">print(count[m])</span><br></pre></td></tr></table></figure>\n\n\n<p>bfs 를 이용해서 풀었다.</p>\n<ul>\n<li><p>steps 배열에 이동할 수 있는 모든 경우의 수를 넣는다 </p>\n<blockquote>\n<p>steps =  [-1칸 이동, +1칸 이동, a 만큼 이동, b만큼 이동, -a만큼 이동, -b만큼 이동, *a만큼 이동, *b만큼 이동]</p>\n</blockquote>\n</li>\n<li><p>foot_prints 를 길이 100000인 배열로 만드는 이유 ! </p>\n<ul>\n<li>내가 기존에 풀었던 방식인 <code> if start + steps[i] not in foot_prints</code> 으로 하면 foot_prints를 전체탐색해야하기 때문에 시간이 오래걸려서 </li>\n</ul>\n</li>\n<li><p><code>for i in range(8)</code>에서 start에서 steps의 모든 방법으로 이동한 곳의 count 를 1 증가시킨다. </p>\n<blockquote>\n<p>for 문이 i= 0 부터 i=7 까지 한번 돌면 (while 문이 1번 돈 상태)</p>\n<p>count[start-1]</p>\n<p>count[start+1]</p>\n<p>count[start+a]</p>\n<p>count[start+b]</p>\n<p>count[start-a]</p>\n<p>count[start-b]</p>\n<p>count[start*a]</p>\n<p>count[start-*b]</p>\n<p>(if 조건을 모두 만족한다면,)</p>\n<p>가 모두 1이 된다</p>\n</blockquote>\n<ul>\n<li><p>들린 곳을 모두 queue에 삽입하였기 때문에 들린 곳이 start가 되고 다시 steps의 모든 방법으로 이동한 곳의 count는 count[start]보다 1 증가한 값이 된다.</p>\n<blockquote>\n<p> while 문이 2번 돈 상태에서 ( if 조건을 모두 만족했다는 전제하에서는) count[now]는 2가 된다 (while 한번 돌았을 때 count[now] =1 이 되었기 때문) </p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>while 문은 start에서 steps로 가는 모든 경우(<code>for i in range(8)</code>)가 범위가 0이상 100000이하를 만족하지 못하거나  이미 다 들린 경우(<code>foot_prints가 1</code>) 끝난다.</p>\n</li>\n<li><p>이제 count[m]은 동규(n)가 주미(m)에게 가기 위해 이동한 횟수임을 알 수 있다 !</p>\n</li>\n</ul>\n<p>deque 이용하는 방법 익히려고 deque 이용한 코드도 남겨두기,,</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">두<span class=\"keyword\">from</span> collections <span class=\"keyword\">import</span> deque</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bfs</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        start = queue.popleft()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">8</span>):        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt; <span class=\"number\">6</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span>&lt;= start+ steps[i] &lt; <span class=\"number\">100001</span> <span class=\"keyword\">and</span> foot_prints[start + steps[i]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                now = start + steps[i]</span><br><span class=\"line\">                foot_prints[now] = <span class=\"number\">1</span></span><br><span class=\"line\">                queue.append(now)</span><br><span class=\"line\">                count[now] += count[start] + <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i &gt;= <span class=\"number\">6</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt;= start * steps[i] &lt; <span class=\"number\">100001</span> <span class=\"keyword\">and</span> foot_prints[start * steps[i]] == <span class=\"number\">0</span> : </span><br><span class=\"line\">                now = start * steps[i]</span><br><span class=\"line\">                foot_prints[now] = <span class=\"number\">1</span></span><br><span class=\"line\">                queue.append(now)</span><br><span class=\"line\">                count[now]+= count[start] + <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\"></span><br><span class=\"line\">a, b, n, m = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">steps = [-<span class=\"number\">1</span>, <span class=\"number\">1</span>, a, b, -a, -b, a, b]</span><br><span class=\"line\">queue = deque()</span><br><span class=\"line\">queue.append(n)</span><br><span class=\"line\">foot_prints = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100001</span>)]</span><br><span class=\"line\">count = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">100001</span>)]</span><br><span class=\"line\">bfs()</span><br><span class=\"line\">print(count[m])</span><br></pre></td></tr></table></figure>\n"},{"title":"[알고리즘] 백준알고리즘 - 14502번: 연구소 (파이썬/python)","date":"2020-05-02T06:29:00.000Z","_content":"\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답  | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :---- | :-------- | :-------- |\n| 2 초      | 512 MB      | 27661 | 15804 | 8693      | 54.642%   |\n\n인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 다행히 바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고 한다.\n\n연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은 칸 하나를 가득 차지한다. \n\n일부 칸은 바이러스가 존재하며, 이 바이러스는 상하좌우로 인접한 빈 칸으로 모두 퍼져나갈 수 있다. 새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.\n\n예를 들어, 아래와 같이 연구소가 생긴 경우를 살펴보자.\n\n```\n2 0 0 0 1 1 0\n0 0 1 0 1 2 0\n0 1 1 0 1 0 0\n0 1 0 0 0 0 0\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0\n```\n\n이때, 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.\n\n2행 1열, 1행 2열, 4행 6열에 벽을 세운다면 지도의 모양은 아래와 같아지게 된다.\n\n```\n2 1 0 0 1 1 0\n1 0 1 0 1 2 0\n0 1 1 0 1 0 0\n0 1 0 0 0 1 0\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0\n```\n\n바이러스가 퍼진 뒤의 모습은 아래와 같아진다.\n\n```\n2 1 0 0 1 1 2\n1 0 1 0 1 2 2\n0 1 1 0 1 2 2\n0 1 0 0 0 1 2\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0\n```\n\n벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서 안전 영역의 크기는 27이다.\n\n연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최댓값을 구하는 프로그램을 작성하시오.\n\n### 입력\n\n첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)\n\n둘째 줄부터 N개의 줄에 지도의 모양이 주어진다. 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 위치이다. 2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.\n\n빈 칸의 개수는 3개 이상이다.\n\n### 출력\n\n첫째 줄에 얻을 수 있는 안전 영역의 최대 크기를 출력한다.\n\n#### 예제 입력 1\n\n```\n7 7\n2 0 0 0 1 1 0\n0 0 1 0 1 2 0\n0 1 1 0 1 0 0\n0 1 0 0 0 0 0\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0\n```\n\n#### 예제 출력 1\n\n```\n27\n```\n\n#### 예제 입력 2\n\n```\n4 6\n0 0 0 0 0 0\n1 0 0 0 0 2\n1 1 1 0 0 2\n0 0 0 0 0 2\n```\n\n#### 예제 출력 2 \n\n```\n9\n```\n\n#### 예제 입력 3\n\n```\n8 8\n2 0 0 0 0 0 0 2\n2 0 0 0 0 0 0 2\n2 0 0 0 0 0 0 2\n2 0 0 0 0 0 0 2\n2 0 0 0 0 0 0 2\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n```\n\n#### 예제 출력 3\n\n```\n3\n```\n\n\n\n##### 출처\n\n- 문제를 만든 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)\n- 빠진 조건을 찾은 사람: [bupjae](https://www.acmicpc.net/user/bupjae) [dotorya](https://www.acmicpc.net/user/dotorya)\n\n\n\n# 풀이\n\n\n\n조합과 DFS(또는 BFS)를 이용하여 푸는 문제이다.\n\n조합을 통해 벽(1)을 3개 세우는 경우의 수를 모두 구한 다음, 모든 경우의 수에 대해 DFS를 통해 바이러스를 퍼뜨린 후 안전지역의 최대의 수를 구한다.\n\n\n\n```python\nfrom itertools import combinations\nfrom copy import deepcopy\n\ndef spread_virus(room,wall,virus,zero_count):\n    foot_prints = []\n    \n    for y,x in wall:\n        room[y][x] = 1\n        \n    count =0\n    for vi in virus:\n        queue = []\n        queue.append(vi)\n\n        while(queue):\n            if(len(foot_prints) > zero_count):\n                print(\"hello\")\n                break\n            [y,x] = queue.pop(0)\n            foot_prints.append([y,x])\n        \n            if x > 0 and room[y][x-1] == 0 and [y,x-1] not in foot_prints and [y,x-1] not in queue:\n                queue.append([y,x-1])\n                room[y][x-1] = 2\n                count +=1\n            if x < len(room[0])-1 and room[y][x+1] == 0 and [y,x+1] not in foot_prints and [y,x+1] not in queue:\n                queue.append([y,x+1])\n                room[y][x+1] = 2\n                count +=1\n            if y > 0 and room[y-1][x] == 0 and [y-1,x] not in foot_prints and [y-1,x] not in queue:\n                queue.append([y-1,x])\n                room[y-1][x] = 2\n                count +=1\n            if y < len(room)-1 and room[y+1][x] == 0 and [y+1,x] not in foot_prints and [y+1,x] not in queue:\n                queue.append([y+1,x])  \n                room[y+1][x] = 2\n                count +=1\n    \n    print(count)\n    return zero_count-count-3\n\ndef solution():\n    n,m = map(int,input().split()) # n = 행 , m = 열\n    room = []\n    for i in range(n): # 현재 방 상태 받아오기\n    room.append(list(map(int, str(input()))))\n    \n\n    empty_room = []\n    virus = []\n    for y in range(m):\n        for x in range(n):\n            if(room[y][x] == 0):\n                empty_room.append([y,x])\n            elif(room[y][x] == 2):\n                virus.append([y,x])\n  \n    c_wall = list(combinations(empty_room,3))\n    print(len(empty_room))\n    safe_space = []\n    tmp = []\n    max = 0\n    result = 0\n    for wall in c_wall:\n        tmp = deepcopy(room)\n        result = spread_virus(tmp,wall,virus,len(empty_room))\n        if max < result:\n            max = result\n    \n\nsolution()\n```\n\n런타임 에러 원인을 찾지 못해서 찾는 중이다 ! ㅠ-ㅠ","source":"_posts/backjoon-14502.md","raw":"---\ntitle: \"[알고리즘] 백준알고리즘 - 14502번: 연구소 (파이썬/python)\"\ndate: 2020-05-02 15:29:00\ntags: 알고리즘\n---\n\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답  | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :---- | :-------- | :-------- |\n| 2 초      | 512 MB      | 27661 | 15804 | 8693      | 54.642%   |\n\n인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 다행히 바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고 한다.\n\n연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은 칸 하나를 가득 차지한다. \n\n일부 칸은 바이러스가 존재하며, 이 바이러스는 상하좌우로 인접한 빈 칸으로 모두 퍼져나갈 수 있다. 새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.\n\n예를 들어, 아래와 같이 연구소가 생긴 경우를 살펴보자.\n\n```\n2 0 0 0 1 1 0\n0 0 1 0 1 2 0\n0 1 1 0 1 0 0\n0 1 0 0 0 0 0\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0\n```\n\n이때, 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.\n\n2행 1열, 1행 2열, 4행 6열에 벽을 세운다면 지도의 모양은 아래와 같아지게 된다.\n\n```\n2 1 0 0 1 1 0\n1 0 1 0 1 2 0\n0 1 1 0 1 0 0\n0 1 0 0 0 1 0\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0\n```\n\n바이러스가 퍼진 뒤의 모습은 아래와 같아진다.\n\n```\n2 1 0 0 1 1 2\n1 0 1 0 1 2 2\n0 1 1 0 1 2 2\n0 1 0 0 0 1 2\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0\n```\n\n벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서 안전 영역의 크기는 27이다.\n\n연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최댓값을 구하는 프로그램을 작성하시오.\n\n### 입력\n\n첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)\n\n둘째 줄부터 N개의 줄에 지도의 모양이 주어진다. 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 위치이다. 2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.\n\n빈 칸의 개수는 3개 이상이다.\n\n### 출력\n\n첫째 줄에 얻을 수 있는 안전 영역의 최대 크기를 출력한다.\n\n#### 예제 입력 1\n\n```\n7 7\n2 0 0 0 1 1 0\n0 0 1 0 1 2 0\n0 1 1 0 1 0 0\n0 1 0 0 0 0 0\n0 0 0 0 0 1 1\n0 1 0 0 0 0 0\n0 1 0 0 0 0 0\n```\n\n#### 예제 출력 1\n\n```\n27\n```\n\n#### 예제 입력 2\n\n```\n4 6\n0 0 0 0 0 0\n1 0 0 0 0 2\n1 1 1 0 0 2\n0 0 0 0 0 2\n```\n\n#### 예제 출력 2 \n\n```\n9\n```\n\n#### 예제 입력 3\n\n```\n8 8\n2 0 0 0 0 0 0 2\n2 0 0 0 0 0 0 2\n2 0 0 0 0 0 0 2\n2 0 0 0 0 0 0 2\n2 0 0 0 0 0 0 2\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n0 0 0 0 0 0 0 0\n```\n\n#### 예제 출력 3\n\n```\n3\n```\n\n\n\n##### 출처\n\n- 문제를 만든 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)\n- 빠진 조건을 찾은 사람: [bupjae](https://www.acmicpc.net/user/bupjae) [dotorya](https://www.acmicpc.net/user/dotorya)\n\n\n\n# 풀이\n\n\n\n조합과 DFS(또는 BFS)를 이용하여 푸는 문제이다.\n\n조합을 통해 벽(1)을 3개 세우는 경우의 수를 모두 구한 다음, 모든 경우의 수에 대해 DFS를 통해 바이러스를 퍼뜨린 후 안전지역의 최대의 수를 구한다.\n\n\n\n```python\nfrom itertools import combinations\nfrom copy import deepcopy\n\ndef spread_virus(room,wall,virus,zero_count):\n    foot_prints = []\n    \n    for y,x in wall:\n        room[y][x] = 1\n        \n    count =0\n    for vi in virus:\n        queue = []\n        queue.append(vi)\n\n        while(queue):\n            if(len(foot_prints) > zero_count):\n                print(\"hello\")\n                break\n            [y,x] = queue.pop(0)\n            foot_prints.append([y,x])\n        \n            if x > 0 and room[y][x-1] == 0 and [y,x-1] not in foot_prints and [y,x-1] not in queue:\n                queue.append([y,x-1])\n                room[y][x-1] = 2\n                count +=1\n            if x < len(room[0])-1 and room[y][x+1] == 0 and [y,x+1] not in foot_prints and [y,x+1] not in queue:\n                queue.append([y,x+1])\n                room[y][x+1] = 2\n                count +=1\n            if y > 0 and room[y-1][x] == 0 and [y-1,x] not in foot_prints and [y-1,x] not in queue:\n                queue.append([y-1,x])\n                room[y-1][x] = 2\n                count +=1\n            if y < len(room)-1 and room[y+1][x] == 0 and [y+1,x] not in foot_prints and [y+1,x] not in queue:\n                queue.append([y+1,x])  \n                room[y+1][x] = 2\n                count +=1\n    \n    print(count)\n    return zero_count-count-3\n\ndef solution():\n    n,m = map(int,input().split()) # n = 행 , m = 열\n    room = []\n    for i in range(n): # 현재 방 상태 받아오기\n    room.append(list(map(int, str(input()))))\n    \n\n    empty_room = []\n    virus = []\n    for y in range(m):\n        for x in range(n):\n            if(room[y][x] == 0):\n                empty_room.append([y,x])\n            elif(room[y][x] == 2):\n                virus.append([y,x])\n  \n    c_wall = list(combinations(empty_room,3))\n    print(len(empty_room))\n    safe_space = []\n    tmp = []\n    max = 0\n    result = 0\n    for wall in c_wall:\n        tmp = deepcopy(room)\n        result = spread_virus(tmp,wall,virus,len(empty_room))\n        if max < result:\n            max = result\n    \n\nsolution()\n```\n\n런타임 에러 원인을 찾지 못해서 찾는 중이다 ! ㅠ-ㅠ","slug":"backjoon-14502","published":1,"updated":"2021-02-08T18:25:07.078Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0js000yf9c9bu6g54ob","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2 초</td>\n<td align=\"left\">512 MB</td>\n<td align=\"left\">27661</td>\n<td align=\"left\">15804</td>\n<td align=\"left\">8693</td>\n<td align=\"left\">54.642%</td>\n</tr>\n</tbody></table>\n<p>인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 다행히 바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고 한다.</p>\n<p>연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은 칸 하나를 가득 차지한다. </p>\n<p>일부 칸은 바이러스가 존재하며, 이 바이러스는 상하좌우로 인접한 빈 칸으로 모두 퍼져나갈 수 있다. 새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.</p>\n<p>예를 들어, 아래와 같이 연구소가 생긴 경우를 살펴보자.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 0 0 0 1 1 0</span><br><span class=\"line\">0 0 1 0 1 2 0</span><br><span class=\"line\">0 1 1 0 1 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 0 0 0 0 1 1</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n<p>이때, 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.</p>\n<p>2행 1열, 1행 2열, 4행 6열에 벽을 세운다면 지도의 모양은 아래와 같아지게 된다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 1 0 0 1 1 0</span><br><span class=\"line\">1 0 1 0 1 2 0</span><br><span class=\"line\">0 1 1 0 1 0 0</span><br><span class=\"line\">0 1 0 0 0 1 0</span><br><span class=\"line\">0 0 0 0 0 1 1</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n<p>바이러스가 퍼진 뒤의 모습은 아래와 같아진다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 1 0 0 1 1 2</span><br><span class=\"line\">1 0 1 0 1 2 2</span><br><span class=\"line\">0 1 1 0 1 2 2</span><br><span class=\"line\">0 1 0 0 0 1 2</span><br><span class=\"line\">0 0 0 0 0 1 1</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n<p>벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서 안전 영역의 크기는 27이다.</p>\n<p>연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최댓값을 구하는 프로그램을 작성하시오.</p>\n<h3 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h3><p>첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)</p>\n<p>둘째 줄부터 N개의 줄에 지도의 모양이 주어진다. 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 위치이다. 2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.</p>\n<p>빈 칸의 개수는 3개 이상이다.</p>\n<h3 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h3><p>첫째 줄에 얻을 수 있는 안전 영역의 최대 크기를 출력한다.</p>\n<h4 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7 7</span><br><span class=\"line\">2 0 0 0 1 1 0</span><br><span class=\"line\">0 0 1 0 1 2 0</span><br><span class=\"line\">0 1 1 0 1 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 0 0 0 0 1 1</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">27</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 6</span><br><span class=\"line\">0 0 0 0 0 0</span><br><span class=\"line\">1 0 0 0 0 2</span><br><span class=\"line\">1 1 1 0 0 2</span><br><span class=\"line\">0 0 0 0 0 2</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 8</span><br><span class=\"line\">2 0 0 0 0 0 0 2</span><br><span class=\"line\">2 0 0 0 0 0 0 2</span><br><span class=\"line\">2 0 0 0 0 0 0 2</span><br><span class=\"line\">2 0 0 0 0 0 0 2</span><br><span class=\"line\">2 0 0 0 0 0 0 2</span><br><span class=\"line\">0 0 0 0 0 0 0 0</span><br><span class=\"line\">0 0 0 0 0 0 0 0</span><br><span class=\"line\">0 0 0 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h5><ul>\n<li>문제를 만든 사람: <a href=\"https://www.acmicpc.net/user/baekjoon\">baekjoon</a></li>\n<li>빠진 조건을 찾은 사람: <a href=\"https://www.acmicpc.net/user/bupjae\">bupjae</a> <a href=\"https://www.acmicpc.net/user/dotorya\">dotorya</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>조합과 DFS(또는 BFS)를 이용하여 푸는 문제이다.</p>\n<p>조합을 통해 벽(1)을 3개 세우는 경우의 수를 모두 구한 다음, 모든 경우의 수에 대해 DFS를 통해 바이러스를 퍼뜨린 후 안전지역의 최대의 수를 구한다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations</span><br><span class=\"line\"><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">spread_virus</span>(<span class=\"params\">room,wall,virus,zero_count</span>):</span></span><br><span class=\"line\">    foot_prints = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> y,x <span class=\"keyword\">in</span> wall:</span><br><span class=\"line\">        room[y][x] = <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    count =<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> vi <span class=\"keyword\">in</span> virus:</span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        queue.append(vi)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(queue):</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">len</span>(foot_prints) &gt; zero_count):</span><br><span class=\"line\">                print(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            [y,x] = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            foot_prints.append([y,x])</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> room[y][x-<span class=\"number\">1</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> [y,x-<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [y,x-<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">                queue.append([y,x-<span class=\"number\">1</span>])</span><br><span class=\"line\">                room[y][x-<span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">                count +=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &lt; <span class=\"built_in\">len</span>(room[<span class=\"number\">0</span>])-<span class=\"number\">1</span> <span class=\"keyword\">and</span> room[y][x+<span class=\"number\">1</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> [y,x+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [y,x+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">                queue.append([y,x+<span class=\"number\">1</span>])</span><br><span class=\"line\">                room[y][x+<span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">                count +=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> y &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> room[y-<span class=\"number\">1</span>][x] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> [y-<span class=\"number\">1</span>,x] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [y-<span class=\"number\">1</span>,x] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">                queue.append([y-<span class=\"number\">1</span>,x])</span><br><span class=\"line\">                room[y-<span class=\"number\">1</span>][x] = <span class=\"number\">2</span></span><br><span class=\"line\">                count +=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> y &lt; <span class=\"built_in\">len</span>(room)-<span class=\"number\">1</span> <span class=\"keyword\">and</span> room[y+<span class=\"number\">1</span>][x] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> [y+<span class=\"number\">1</span>,x] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [y+<span class=\"number\">1</span>,x] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">                queue.append([y+<span class=\"number\">1</span>,x])  </span><br><span class=\"line\">                room[y+<span class=\"number\">1</span>][x] = <span class=\"number\">2</span></span><br><span class=\"line\">                count +=<span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    print(count)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zero_count-count-<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>():</span></span><br><span class=\"line\">    n,m = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split()) <span class=\"comment\"># n = 행 , m = 열</span></span><br><span class=\"line\">    room = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n): <span class=\"comment\"># 현재 방 상태 받아오기</span></span><br><span class=\"line\">    room.append(<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>()))))</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    empty_room = []</span><br><span class=\"line\">    virus = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(room[y][x] == <span class=\"number\">0</span>):</span><br><span class=\"line\">                empty_room.append([y,x])</span><br><span class=\"line\">            <span class=\"keyword\">elif</span>(room[y][x] == <span class=\"number\">2</span>):</span><br><span class=\"line\">                virus.append([y,x])</span><br><span class=\"line\">  </span><br><span class=\"line\">    c_wall = <span class=\"built_in\">list</span>(combinations(empty_room,<span class=\"number\">3</span>))</span><br><span class=\"line\">    print(<span class=\"built_in\">len</span>(empty_room))</span><br><span class=\"line\">    safe_space = []</span><br><span class=\"line\">    tmp = []</span><br><span class=\"line\">    <span class=\"built_in\">max</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> wall <span class=\"keyword\">in</span> c_wall:</span><br><span class=\"line\">        tmp = deepcopy(room)</span><br><span class=\"line\">        result = spread_virus(tmp,wall,virus,<span class=\"built_in\">len</span>(empty_room))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">max</span> &lt; result:</span><br><span class=\"line\">            <span class=\"built_in\">max</span> = result</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">solution()</span><br></pre></td></tr></table></figure>\n<p>런타임 에러 원인을 찾지 못해서 찾는 중이다 ! ㅠ-ㅠ</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">2 초</td>\n<td align=\"left\">512 MB</td>\n<td align=\"left\">27661</td>\n<td align=\"left\">15804</td>\n<td align=\"left\">8693</td>\n<td align=\"left\">54.642%</td>\n</tr>\n</tbody></table>\n<p>인체에 치명적인 바이러스를 연구하던 연구소에서 바이러스가 유출되었다. 다행히 바이러스는 아직 퍼지지 않았고, 바이러스의 확산을 막기 위해서 연구소에 벽을 세우려고 한다.</p>\n<p>연구소는 크기가 N×M인 직사각형으로 나타낼 수 있으며, 직사각형은 1×1 크기의 정사각형으로 나누어져 있다. 연구소는 빈 칸, 벽으로 이루어져 있으며, 벽은 칸 하나를 가득 차지한다. </p>\n<p>일부 칸은 바이러스가 존재하며, 이 바이러스는 상하좌우로 인접한 빈 칸으로 모두 퍼져나갈 수 있다. 새로 세울 수 있는 벽의 개수는 3개이며, 꼭 3개를 세워야 한다.</p>\n<p>예를 들어, 아래와 같이 연구소가 생긴 경우를 살펴보자.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 0 0 0 1 1 0</span><br><span class=\"line\">0 0 1 0 1 2 0</span><br><span class=\"line\">0 1 1 0 1 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 0 0 0 0 1 1</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n<p>이때, 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 곳이다. 아무런 벽을 세우지 않는다면, 바이러스는 모든 빈 칸으로 퍼져나갈 수 있다.</p>\n<p>2행 1열, 1행 2열, 4행 6열에 벽을 세운다면 지도의 모양은 아래와 같아지게 된다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 1 0 0 1 1 0</span><br><span class=\"line\">1 0 1 0 1 2 0</span><br><span class=\"line\">0 1 1 0 1 0 0</span><br><span class=\"line\">0 1 0 0 0 1 0</span><br><span class=\"line\">0 0 0 0 0 1 1</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n<p>바이러스가 퍼진 뒤의 모습은 아래와 같아진다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 1 0 0 1 1 2</span><br><span class=\"line\">1 0 1 0 1 2 2</span><br><span class=\"line\">0 1 1 0 1 2 2</span><br><span class=\"line\">0 1 0 0 0 1 2</span><br><span class=\"line\">0 0 0 0 0 1 1</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n<p>벽을 3개 세운 뒤, 바이러스가 퍼질 수 없는 곳을 안전 영역이라고 한다. 위의 지도에서 안전 영역의 크기는 27이다.</p>\n<p>연구소의 지도가 주어졌을 때 얻을 수 있는 안전 영역 크기의 최댓값을 구하는 프로그램을 작성하시오.</p>\n<h3 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h3><p>첫째 줄에 지도의 세로 크기 N과 가로 크기 M이 주어진다. (3 ≤ N, M ≤ 8)</p>\n<p>둘째 줄부터 N개의 줄에 지도의 모양이 주어진다. 0은 빈 칸, 1은 벽, 2는 바이러스가 있는 위치이다. 2의 개수는 2보다 크거나 같고, 10보다 작거나 같은 자연수이다.</p>\n<p>빈 칸의 개수는 3개 이상이다.</p>\n<h3 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h3><p>첫째 줄에 얻을 수 있는 안전 영역의 최대 크기를 출력한다.</p>\n<h4 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7 7</span><br><span class=\"line\">2 0 0 0 1 1 0</span><br><span class=\"line\">0 0 1 0 1 2 0</span><br><span class=\"line\">0 1 1 0 1 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 0 0 0 0 1 1</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br><span class=\"line\">0 1 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">27</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 6</span><br><span class=\"line\">0 0 0 0 0 0</span><br><span class=\"line\">1 0 0 0 0 2</span><br><span class=\"line\">1 1 1 0 0 2</span><br><span class=\"line\">0 0 0 0 0 2</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">8 8</span><br><span class=\"line\">2 0 0 0 0 0 0 2</span><br><span class=\"line\">2 0 0 0 0 0 0 2</span><br><span class=\"line\">2 0 0 0 0 0 0 2</span><br><span class=\"line\">2 0 0 0 0 0 0 2</span><br><span class=\"line\">2 0 0 0 0 0 0 2</span><br><span class=\"line\">0 0 0 0 0 0 0 0</span><br><span class=\"line\">0 0 0 0 0 0 0 0</span><br><span class=\"line\">0 0 0 0 0 0 0 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h5><ul>\n<li>문제를 만든 사람: <a href=\"https://www.acmicpc.net/user/baekjoon\">baekjoon</a></li>\n<li>빠진 조건을 찾은 사람: <a href=\"https://www.acmicpc.net/user/bupjae\">bupjae</a> <a href=\"https://www.acmicpc.net/user/dotorya\">dotorya</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>조합과 DFS(또는 BFS)를 이용하여 푸는 문제이다.</p>\n<p>조합을 통해 벽(1)을 3개 세우는 경우의 수를 모두 구한 다음, 모든 경우의 수에 대해 DFS를 통해 바이러스를 퍼뜨린 후 안전지역의 최대의 수를 구한다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations</span><br><span class=\"line\"><span class=\"keyword\">from</span> copy <span class=\"keyword\">import</span> deepcopy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">spread_virus</span>(<span class=\"params\">room,wall,virus,zero_count</span>):</span></span><br><span class=\"line\">    foot_prints = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> y,x <span class=\"keyword\">in</span> wall:</span><br><span class=\"line\">        room[y][x] = <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    count =<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> vi <span class=\"keyword\">in</span> virus:</span><br><span class=\"line\">        queue = []</span><br><span class=\"line\">        queue.append(vi)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(queue):</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">len</span>(foot_prints) &gt; zero_count):</span><br><span class=\"line\">                print(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            [y,x] = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            foot_prints.append([y,x])</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> room[y][x-<span class=\"number\">1</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> [y,x-<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [y,x-<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">                queue.append([y,x-<span class=\"number\">1</span>])</span><br><span class=\"line\">                room[y][x-<span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">                count +=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> x &lt; <span class=\"built_in\">len</span>(room[<span class=\"number\">0</span>])-<span class=\"number\">1</span> <span class=\"keyword\">and</span> room[y][x+<span class=\"number\">1</span>] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> [y,x+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [y,x+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">                queue.append([y,x+<span class=\"number\">1</span>])</span><br><span class=\"line\">                room[y][x+<span class=\"number\">1</span>] = <span class=\"number\">2</span></span><br><span class=\"line\">                count +=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> y &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> room[y-<span class=\"number\">1</span>][x] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> [y-<span class=\"number\">1</span>,x] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [y-<span class=\"number\">1</span>,x] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">                queue.append([y-<span class=\"number\">1</span>,x])</span><br><span class=\"line\">                room[y-<span class=\"number\">1</span>][x] = <span class=\"number\">2</span></span><br><span class=\"line\">                count +=<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> y &lt; <span class=\"built_in\">len</span>(room)-<span class=\"number\">1</span> <span class=\"keyword\">and</span> room[y+<span class=\"number\">1</span>][x] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> [y+<span class=\"number\">1</span>,x] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [y+<span class=\"number\">1</span>,x] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">                queue.append([y+<span class=\"number\">1</span>,x])  </span><br><span class=\"line\">                room[y+<span class=\"number\">1</span>][x] = <span class=\"number\">2</span></span><br><span class=\"line\">                count +=<span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    print(count)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zero_count-count-<span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>():</span></span><br><span class=\"line\">    n,m = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split()) <span class=\"comment\"># n = 행 , m = 열</span></span><br><span class=\"line\">    room = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n): <span class=\"comment\"># 현재 방 상태 받아오기</span></span><br><span class=\"line\">    room.append(<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>()))))</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    empty_room = []</span><br><span class=\"line\">    virus = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(room[y][x] == <span class=\"number\">0</span>):</span><br><span class=\"line\">                empty_room.append([y,x])</span><br><span class=\"line\">            <span class=\"keyword\">elif</span>(room[y][x] == <span class=\"number\">2</span>):</span><br><span class=\"line\">                virus.append([y,x])</span><br><span class=\"line\">  </span><br><span class=\"line\">    c_wall = <span class=\"built_in\">list</span>(combinations(empty_room,<span class=\"number\">3</span>))</span><br><span class=\"line\">    print(<span class=\"built_in\">len</span>(empty_room))</span><br><span class=\"line\">    safe_space = []</span><br><span class=\"line\">    tmp = []</span><br><span class=\"line\">    <span class=\"built_in\">max</span> = <span class=\"number\">0</span></span><br><span class=\"line\">    result = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> wall <span class=\"keyword\">in</span> c_wall:</span><br><span class=\"line\">        tmp = deepcopy(room)</span><br><span class=\"line\">        result = spread_virus(tmp,wall,virus,<span class=\"built_in\">len</span>(empty_room))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">max</span> &lt; result:</span><br><span class=\"line\">            <span class=\"built_in\">max</span> = result</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">solution()</span><br></pre></td></tr></table></figure>\n<p>런타임 에러 원인을 찾지 못해서 찾는 중이다 ! ㅠ-ㅠ</p>\n"},{"title":"[백준알고리즘/ boj] N과 M(1) - 15649 (파이썬/ python)","dates":"2020-08-25T18:12:00.000Z","_content":"\n| 시간 제한 | 메모리 제한 | 제출  | 정답  | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :---- | :-------- | :-------- |\n| 1 초      | 512 MB      | 20319 | 12289 | 8369      | 60.261%   |\n\n\n\n# 문제\n\n실버 3 문제이당\n\n자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.\n\n- 1부터 N까지 자연수 중에서 중복 없이 M개를 고른 수열\n\n\n\n## 입력\n\n첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)\n\n\n\n## 출력\n\n한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.\n\n수열은 사전 순으로 증가하는 순서로 출력해야 한다.\n\n\n\n### 예제 입력 1 \n\n```\n3 1\n```\n\n### 예제 출력 1 \n\n```\n1\n2\n3\n```\n\n### 예제 입력 2 \n\n```\n4 2\n```\n\n### 예제 출력 2 \n\n```\n1 2\n1 3\n1 4\n2 1\n2 3\n2 4\n3 1\n3 2\n3 4\n4 1\n4 2\n4 3\n```\n\n### 예제 입력 3\n\n```\n4 4\n```\n\n### 예제 출력 3\n\n```\n1 2 3 4\n1 2 4 3\n1 3 2 4\n1 3 4 2\n1 4 2 3\n1 4 3 2\n2 1 3 4\n2 1 4 3\n2 3 1 4\n2 3 4 1\n2 4 1 3\n2 4 3 1\n3 1 2 4\n3 1 4 2\n3 2 1 4\n3 2 4 1\n3 4 1 2\n3 4 2 1\n4 1 2 3\n4 1 3 2\n4 2 1 3\n4 2 3 1\n4 3 1 2\n4 3 2 1\n```\n\n\n\n# 풀이\n\n순열이랑 dfs 익히기 위해서 풀어보았당.\n\n1. 순열을 이용하는 방법 (순서 o)\n\n   ```python\n   import sys\n   from itertools import permutations\n   \n   input = sys.stdin.readline\n   N, M = map(int,input().split())\n   \n   answer = permutations(range(1, N+1),M)\n   \n   for i in answer:\n       print(' '.join(map(str, i)))\n   ```\n\n   * 1 부터 N 까지니까 `range(1, N+1)`\n   *  `print(' '.join(map(str, i)))` \n     * 한 칸 띄우고 join 한다, 출력이 string 형태여서 map 한다. \n   * itertools ! permutations ! 외우기 !\n     \n\n2. DFS 를 이용하는 방법\n\n   ```python\n   import sys\n   input = sys.stdin.readline\n   \n   N, M = map(int, input().split())\n   visited = [0 for _ in range(N)]\n   answer = []\n   \n   def dfs(depth):\n       if depth == M:\n           print(' '.join(map(str, answer)))\n           return\n       for i in range(len(visited)):\n           if visited[i] == 0:\n               visited[i] = 1\n               answer.append(i+1)\n               dfs(depth +1)\n               visited[i] = 0\n               answer.pop()\n   \n   dfs(0)\n   ```\n   \n   ","source":"_posts/backjoon-15649.md","raw":"---\ntitle: \"[백준알고리즘/ boj] N과 M(1) - 15649 (파이썬/ python)\"\ndates: 2020-08-26 03:12:00\ntag: 알고리즘\n---\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답  | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :---- | :-------- | :-------- |\n| 1 초      | 512 MB      | 20319 | 12289 | 8369      | 60.261%   |\n\n\n\n# 문제\n\n실버 3 문제이당\n\n자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.\n\n- 1부터 N까지 자연수 중에서 중복 없이 M개를 고른 수열\n\n\n\n## 입력\n\n첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)\n\n\n\n## 출력\n\n한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.\n\n수열은 사전 순으로 증가하는 순서로 출력해야 한다.\n\n\n\n### 예제 입력 1 \n\n```\n3 1\n```\n\n### 예제 출력 1 \n\n```\n1\n2\n3\n```\n\n### 예제 입력 2 \n\n```\n4 2\n```\n\n### 예제 출력 2 \n\n```\n1 2\n1 3\n1 4\n2 1\n2 3\n2 4\n3 1\n3 2\n3 4\n4 1\n4 2\n4 3\n```\n\n### 예제 입력 3\n\n```\n4 4\n```\n\n### 예제 출력 3\n\n```\n1 2 3 4\n1 2 4 3\n1 3 2 4\n1 3 4 2\n1 4 2 3\n1 4 3 2\n2 1 3 4\n2 1 4 3\n2 3 1 4\n2 3 4 1\n2 4 1 3\n2 4 3 1\n3 1 2 4\n3 1 4 2\n3 2 1 4\n3 2 4 1\n3 4 1 2\n3 4 2 1\n4 1 2 3\n4 1 3 2\n4 2 1 3\n4 2 3 1\n4 3 1 2\n4 3 2 1\n```\n\n\n\n# 풀이\n\n순열이랑 dfs 익히기 위해서 풀어보았당.\n\n1. 순열을 이용하는 방법 (순서 o)\n\n   ```python\n   import sys\n   from itertools import permutations\n   \n   input = sys.stdin.readline\n   N, M = map(int,input().split())\n   \n   answer = permutations(range(1, N+1),M)\n   \n   for i in answer:\n       print(' '.join(map(str, i)))\n   ```\n\n   * 1 부터 N 까지니까 `range(1, N+1)`\n   *  `print(' '.join(map(str, i)))` \n     * 한 칸 띄우고 join 한다, 출력이 string 형태여서 map 한다. \n   * itertools ! permutations ! 외우기 !\n     \n\n2. DFS 를 이용하는 방법\n\n   ```python\n   import sys\n   input = sys.stdin.readline\n   \n   N, M = map(int, input().split())\n   visited = [0 for _ in range(N)]\n   answer = []\n   \n   def dfs(depth):\n       if depth == M:\n           print(' '.join(map(str, answer)))\n           return\n       for i in range(len(visited)):\n           if visited[i] == 0:\n               visited[i] = 1\n               answer.append(i+1)\n               dfs(depth +1)\n               visited[i] = 0\n               answer.pop()\n   \n   dfs(0)\n   ```\n   \n   ","slug":"backjoon-15649","published":1,"date":"2021-02-08T18:25:07.029Z","updated":"2021-02-08T18:25:07.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jt000zf9c99zj5ez3x","content":"<table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">512 MB</td>\n<td align=\"left\">20319</td>\n<td align=\"left\">12289</td>\n<td align=\"left\">8369</td>\n<td align=\"left\">60.261%</td>\n</tr>\n</tbody></table>\n<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>실버 3 문제이당</p>\n<p>자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.</p>\n<ul>\n<li>1부터 N까지 자연수 중에서 중복 없이 M개를 고른 수열</li>\n</ul>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>\n<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2</span><br><span class=\"line\">1 3</span><br><span class=\"line\">1 4</span><br><span class=\"line\">2 1</span><br><span class=\"line\">2 3</span><br><span class=\"line\">2 4</span><br><span class=\"line\">3 1</span><br><span class=\"line\">3 2</span><br><span class=\"line\">3 4</span><br><span class=\"line\">4 1</span><br><span class=\"line\">4 2</span><br><span class=\"line\">4 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4</span><br><span class=\"line\">1 2 4 3</span><br><span class=\"line\">1 3 2 4</span><br><span class=\"line\">1 3 4 2</span><br><span class=\"line\">1 4 2 3</span><br><span class=\"line\">1 4 3 2</span><br><span class=\"line\">2 1 3 4</span><br><span class=\"line\">2 1 4 3</span><br><span class=\"line\">2 3 1 4</span><br><span class=\"line\">2 3 4 1</span><br><span class=\"line\">2 4 1 3</span><br><span class=\"line\">2 4 3 1</span><br><span class=\"line\">3 1 2 4</span><br><span class=\"line\">3 1 4 2</span><br><span class=\"line\">3 2 1 4</span><br><span class=\"line\">3 2 4 1</span><br><span class=\"line\">3 4 1 2</span><br><span class=\"line\">3 4 2 1</span><br><span class=\"line\">4 1 2 3</span><br><span class=\"line\">4 1 3 2</span><br><span class=\"line\">4 2 1 3</span><br><span class=\"line\">4 2 3 1</span><br><span class=\"line\">4 3 1 2</span><br><span class=\"line\">4 3 2 1</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>순열이랑 dfs 익히기 위해서 풀어보았당.</p>\n<ol>\n<li><p>순열을 이용하는 방법 (순서 o)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> permutations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\">N, M = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\"></span><br><span class=\"line\">answer = permutations(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>, N+<span class=\"number\">1</span>),M)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> answer:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27; &#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, i)))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 부터 N 까지니까 <code>range(1, N+1)</code></li>\n<li><code>print(&#39; &#39;.join(map(str, i)))</code> <ul>\n<li>한 칸 띄우고 join 한다, 출력이 string 형태여서 map 한다. </li>\n</ul>\n</li>\n<li>itertools ! permutations ! 외우기 !</li>\n</ul>\n</li>\n<li><p>DFS 를 이용하는 방법</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\">N, M = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">visited = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N)]</span><br><span class=\"line\">answer = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">depth</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> depth == M:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27; &#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, answer)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(visited)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> visited[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            visited[i] = <span class=\"number\">1</span></span><br><span class=\"line\">            answer.append(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            dfs(depth +<span class=\"number\">1</span>)</span><br><span class=\"line\">            visited[i] = <span class=\"number\">0</span></span><br><span class=\"line\">            answer.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">dfs(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">512 MB</td>\n<td align=\"left\">20319</td>\n<td align=\"left\">12289</td>\n<td align=\"left\">8369</td>\n<td align=\"left\">60.261%</td>\n</tr>\n</tbody></table>\n<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>실버 3 문제이당</p>\n<p>자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.</p>\n<ul>\n<li>1부터 N까지 자연수 중에서 중복 없이 M개를 고른 수열</li>\n</ul>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>\n<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2</span><br><span class=\"line\">1 3</span><br><span class=\"line\">1 4</span><br><span class=\"line\">2 1</span><br><span class=\"line\">2 3</span><br><span class=\"line\">2 4</span><br><span class=\"line\">3 1</span><br><span class=\"line\">3 2</span><br><span class=\"line\">3 4</span><br><span class=\"line\">4 1</span><br><span class=\"line\">4 2</span><br><span class=\"line\">4 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 2 3 4</span><br><span class=\"line\">1 2 4 3</span><br><span class=\"line\">1 3 2 4</span><br><span class=\"line\">1 3 4 2</span><br><span class=\"line\">1 4 2 3</span><br><span class=\"line\">1 4 3 2</span><br><span class=\"line\">2 1 3 4</span><br><span class=\"line\">2 1 4 3</span><br><span class=\"line\">2 3 1 4</span><br><span class=\"line\">2 3 4 1</span><br><span class=\"line\">2 4 1 3</span><br><span class=\"line\">2 4 3 1</span><br><span class=\"line\">3 1 2 4</span><br><span class=\"line\">3 1 4 2</span><br><span class=\"line\">3 2 1 4</span><br><span class=\"line\">3 2 4 1</span><br><span class=\"line\">3 4 1 2</span><br><span class=\"line\">3 4 2 1</span><br><span class=\"line\">4 1 2 3</span><br><span class=\"line\">4 1 3 2</span><br><span class=\"line\">4 2 1 3</span><br><span class=\"line\">4 2 3 1</span><br><span class=\"line\">4 3 1 2</span><br><span class=\"line\">4 3 2 1</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>순열이랑 dfs 익히기 위해서 풀어보았당.</p>\n<ol>\n<li><p>순열을 이용하는 방법 (순서 o)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> permutations</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\">N, M = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\"></span><br><span class=\"line\">answer = permutations(<span class=\"built_in\">range</span>(<span class=\"number\">1</span>, N+<span class=\"number\">1</span>),M)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> answer:</span><br><span class=\"line\">    print(<span class=\"string\">&#x27; &#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, i)))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1 부터 N 까지니까 <code>range(1, N+1)</code></li>\n<li><code>print(&#39; &#39;.join(map(str, i)))</code> <ul>\n<li>한 칸 띄우고 join 한다, 출력이 string 형태여서 map 한다. </li>\n</ul>\n</li>\n<li>itertools ! permutations ! 외우기 !</li>\n</ul>\n</li>\n<li><p>DFS 를 이용하는 방법</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\">N, M = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">visited = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N)]</span><br><span class=\"line\">answer = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">depth</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> depth == M:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27; &#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, answer)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(visited)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> visited[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            visited[i] = <span class=\"number\">1</span></span><br><span class=\"line\">            answer.append(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">            dfs(depth +<span class=\"number\">1</span>)</span><br><span class=\"line\">            visited[i] = <span class=\"number\">0</span></span><br><span class=\"line\">            answer.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">dfs(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n"},{"title":"[백준알고리즘] 퍼즐 - 1525 (파이썬/python)","dates":"2020-09-03T18:14:00.000Z","_content":"\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출 | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :--- | :--- | :-------- | :-------- |\n| 1 초      | 32 MB       | 9234 | 3778 | 2219      | 39.386%   |\n\n\n\n3×3 표에 다음과 같이 수가 채워져 있다. 오른쪽 아래 가장 끝 칸은 비어 있는 칸이다.\n\n| 1    | 2    | 3    |\n| :--- | ---- | ---- |\n| 4    | 5    | 6    |\n| 7    | 8    |      |\n\n어떤 수와 인접해 있는 네 개의 칸 중에 하나가 비어 있으면, 수를 그 칸으로 이동시킬 수가 있다. 물론 표 바깥으로 나가는 경우는 불가능하다. 우리의 목표는 초기 상태가 주어졌을 때, 최소의 이동으로 위와 같은 정리된 상태를 만드는 것이다. 다음의 예를 보자.\n\n| 1    |      | 3    |\n| ---- | ---- | ---- |\n| 4    | 2    | 5    |\n| 7    | 8    | 6    |\n\n| 1    | 2    | 3    |\n| ---- | ---- | ---- |\n| 4    |      | 5    |\n| 7    | 8    | 6    |\n\n| 1    | 2    | 3    |\n| ---- | ---- | ---- |\n| 4    | 5    |      |\n| 7    | 8    | 6    |\n\n| 1    | 2    | 3    |\n| ---- | ---- | ---- |\n| 4    | 5    | 6    |\n| 7    | 8    |      |\n\n가장 윗 상태에서 세 번의 이동을 통해 정리된 상태를 만들 수 있다. 이와 같이 최소 이동 횟수를 구하는 프로그램을 작성하시오.\n\n## 입력\n\n세 줄에 걸쳐서 표에 채워져 있는 아홉 개의 수가 주어진다. 한 줄에 세 개의 수가 주어지며, 빈 칸은 0으로 나타낸다.\n\n## 출력\n\n첫째 줄에 최소의 이동 횟수를 출력한다. 이동이 불가능한 경우 -1을 출력한다.\n\n### 예제 입력 1\n\n```\n1 0 3\n4 2 5\n7 8 6\n```\n\n### 예제 출력 1\n\n```\n3\n```\n\n### 예제 입력 2\n\n```\n3 6 0\n8 1 2\n7 4 5\n```\n\n### 예제 출력 2\n\n```\n-1\n```\n\n\n\n## 출처\n\n- 문제를 번역한 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)\n- 잘못된 데이터를 찾은 사람: [djm03178](https://www.acmicpc.net/user/djm03178)\n- 데이터를 추가한 사람: [hello70825](https://www.acmicpc.net/user/hello70825)\n- 메모리 제한을 수정한 사람: [portableangel](https://www.acmicpc.net/user/portableangel)\n\n\n\n## 알고리즘 분류\n\n- [그래프 이론](https://www.acmicpc.net/problem/tag/7)\n- [그래프 탐색](https://www.acmicpc.net/problem/tag/11)\n- [너비 우선 탐색](https://www.acmicpc.net/problem/tag/126)\n- [비트마스킹](https://www.acmicpc.net/problem/tag/14)\n\n# 풀이\n\nBFS로 푸는 문제이다. 저번에 미로 문제를 풀 때 썼던 방식과 유사하게 풀면 될것이라 생각해서 풀었더니 완전 틀려버렸다ㅠㅠ..\n\n처음 제출했던 코드 (틀림)\n\n```python\nimport sys\ninput = sys.stdin.readline\n\ntable = []\nfor _ in range(3):\n    table.append(list(map(int,input().split())))\n\nsorted = [[1,2,3],[4,5,6],[7,8,0]]\nvisited = []\nqueue = [[0,0]]\n\ndef solution():\n    answer = 0\n    while queue:\n        [i, j] = queue.pop(0)\n        visited.append([i,j])\n        if i>0 and [i-1,j] not in visited:\n            if table[i-1][j] != sorted[i-1][j] and table[i][j] == 0:\n                answer += 1\n                table[i][j] = table[i-1][j]\n                table[i-1][j] = 0\n            queue.append([i-1,j])\n        if j>0 and [i,j-1] not in visited:\n            if table[i][j-1] != sorted[i][j-1] and table[i][j] == 0:\n                answer += 1\n                table[i][j] = table[i][j-1]\n                table[i][j-1] = 0\n            queue.append([i,j-1])\n        if j<2 and [i,j+1] not in visited:\n            if table[i][j+1] != sorted[i][j+1] and table[i][j] == 0:\n                answer += 1\n                table[i][j] = table[i][j+1]\n                table[i][j+1] = 0\n            queue.append([i,j+1])\n        if i<2 and [i+1,j] not in visited:\n            if table[i+1][j] != sorted[i+1][j] and table[i][j] == 0:\n                answer += 1\n                table[i][j] = table[i+1][j]\n                table[i+1][j] = 0\n            queue.append([i+1,j])\n\n    if table != sorted:\n        return -1\n\n    return answer\n\nprint(solution())\n```\n\n문제점 -> 0이 움직일 수 있는 모든 조건을 검사하는 것이 아니다. 0이 움직일 수 있는 모든 조건을 검사하려면 queue 에 table 배열이 쌓여야하는데 이는 구현이 복잡할 뿐더러 메모리 제한 오류가 발생한다고 한다. 이 개념을 가능하게 하려면 배열이 아닌 string 형태로 table을 받아와 다루면 된다 (검색을 통해 알게 되었다.)\n\n\n\n```python\nimport sys\n\ndef solution():\n    queue = [table]\n    visited = {table:0} # 딕셔너리 key: table , value: 움직인 수\n    \n    while queue:\n        q = queue.pop(0)\n        step = visited.get(q) # 해당 테이블까지 움직인 step 수를 얻어온다.\n        zeroIdx = q.index('0')\n \n        if q == '123456780':\n            return step\n \n        # q가 배열의 모습일 때, 0의 인덱스를 구한다.\n        i = zeroIdx//3\n        j = zeroIdx - 3*(zeroIdx//3)\n \n        step += 1\n        ql = list(q)\n        if i > 0: # 위\n            ql[zeroIdx], ql[zeroIdx-3] = ql[zeroIdx-3], ql[zeroIdx]\n            qs = ''.join(ql)\n            if not visited.get(qs):\n                visited[qs] = step\n                queue.append(qs)\n            ql[zeroIdx], ql[zeroIdx-3] = ql[zeroIdx-3], ql[zeroIdx]\n \n        if i < 2: # 아래\n            ql[zeroIdx], ql[zeroIdx+3] = ql[zeroIdx+3], ql[zeroIdx]\n            qs = ''.join(ql)\n            if not visited.get(qs):\n                visited[qs] = step\n                queue.append(qs)\n            ql[zeroIdx], ql[zeroIdx+3] = ql[zeroIdx+3], ql[zeroIdx]\n        \n        if j > 0: # 왼쪽\n            ql[zeroIdx], ql[zeroIdx-1] = ql[zeroIdx-1], ql[zeroIdx]\n            qs = ''.join(ql)\n            if not visited.get(qs):\n                visited[qs] = step\n                queue.append(qs)\n            ql[zeroIdx], ql[zeroIdx-1] = ql[zeroIdx-1], ql[zeroIdx]\n            \n        if j < 2: # 오른쪽\n            ql[zeroIdx], ql[zeroIdx+1] = ql[zeroIdx+1], ql[zeroIdx]\n            qs = ''.join(ql)\n            if not visited.get(qs):\n                visited[qs] = step\n                queue.append(qs)\n            ql[zeroIdx], ql[zeroIdx+1] = ql[zeroIdx+1], ql[zeroIdx]\n \n    return -1\n \n# 배열이 아닌 str 형태로 받아온다.\ntable = ''\nfor _ in range(3):\n    table += ''.join(sys.stdin.readline().split())\n \nprint(solution())\n```\n\n난 아직 많이 부족하다는 것을 깨달았다 ㅠ-ㅠ 그래도 딕셔너리 / 새로운 bfs 방식 / 새로운 문제 접근 방식 을 배운 것에 만족하자 ! \n\n","source":"_posts/backjoon-1525.md","raw":"---\ntitle: \"[백준알고리즘] 퍼즐 - 1525 (파이썬/python)\"\ndates: 2020-09-04 03:14:00\ntag: 알고리즘\n---\n\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출 | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :--- | :--- | :-------- | :-------- |\n| 1 초      | 32 MB       | 9234 | 3778 | 2219      | 39.386%   |\n\n\n\n3×3 표에 다음과 같이 수가 채워져 있다. 오른쪽 아래 가장 끝 칸은 비어 있는 칸이다.\n\n| 1    | 2    | 3    |\n| :--- | ---- | ---- |\n| 4    | 5    | 6    |\n| 7    | 8    |      |\n\n어떤 수와 인접해 있는 네 개의 칸 중에 하나가 비어 있으면, 수를 그 칸으로 이동시킬 수가 있다. 물론 표 바깥으로 나가는 경우는 불가능하다. 우리의 목표는 초기 상태가 주어졌을 때, 최소의 이동으로 위와 같은 정리된 상태를 만드는 것이다. 다음의 예를 보자.\n\n| 1    |      | 3    |\n| ---- | ---- | ---- |\n| 4    | 2    | 5    |\n| 7    | 8    | 6    |\n\n| 1    | 2    | 3    |\n| ---- | ---- | ---- |\n| 4    |      | 5    |\n| 7    | 8    | 6    |\n\n| 1    | 2    | 3    |\n| ---- | ---- | ---- |\n| 4    | 5    |      |\n| 7    | 8    | 6    |\n\n| 1    | 2    | 3    |\n| ---- | ---- | ---- |\n| 4    | 5    | 6    |\n| 7    | 8    |      |\n\n가장 윗 상태에서 세 번의 이동을 통해 정리된 상태를 만들 수 있다. 이와 같이 최소 이동 횟수를 구하는 프로그램을 작성하시오.\n\n## 입력\n\n세 줄에 걸쳐서 표에 채워져 있는 아홉 개의 수가 주어진다. 한 줄에 세 개의 수가 주어지며, 빈 칸은 0으로 나타낸다.\n\n## 출력\n\n첫째 줄에 최소의 이동 횟수를 출력한다. 이동이 불가능한 경우 -1을 출력한다.\n\n### 예제 입력 1\n\n```\n1 0 3\n4 2 5\n7 8 6\n```\n\n### 예제 출력 1\n\n```\n3\n```\n\n### 예제 입력 2\n\n```\n3 6 0\n8 1 2\n7 4 5\n```\n\n### 예제 출력 2\n\n```\n-1\n```\n\n\n\n## 출처\n\n- 문제를 번역한 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)\n- 잘못된 데이터를 찾은 사람: [djm03178](https://www.acmicpc.net/user/djm03178)\n- 데이터를 추가한 사람: [hello70825](https://www.acmicpc.net/user/hello70825)\n- 메모리 제한을 수정한 사람: [portableangel](https://www.acmicpc.net/user/portableangel)\n\n\n\n## 알고리즘 분류\n\n- [그래프 이론](https://www.acmicpc.net/problem/tag/7)\n- [그래프 탐색](https://www.acmicpc.net/problem/tag/11)\n- [너비 우선 탐색](https://www.acmicpc.net/problem/tag/126)\n- [비트마스킹](https://www.acmicpc.net/problem/tag/14)\n\n# 풀이\n\nBFS로 푸는 문제이다. 저번에 미로 문제를 풀 때 썼던 방식과 유사하게 풀면 될것이라 생각해서 풀었더니 완전 틀려버렸다ㅠㅠ..\n\n처음 제출했던 코드 (틀림)\n\n```python\nimport sys\ninput = sys.stdin.readline\n\ntable = []\nfor _ in range(3):\n    table.append(list(map(int,input().split())))\n\nsorted = [[1,2,3],[4,5,6],[7,8,0]]\nvisited = []\nqueue = [[0,0]]\n\ndef solution():\n    answer = 0\n    while queue:\n        [i, j] = queue.pop(0)\n        visited.append([i,j])\n        if i>0 and [i-1,j] not in visited:\n            if table[i-1][j] != sorted[i-1][j] and table[i][j] == 0:\n                answer += 1\n                table[i][j] = table[i-1][j]\n                table[i-1][j] = 0\n            queue.append([i-1,j])\n        if j>0 and [i,j-1] not in visited:\n            if table[i][j-1] != sorted[i][j-1] and table[i][j] == 0:\n                answer += 1\n                table[i][j] = table[i][j-1]\n                table[i][j-1] = 0\n            queue.append([i,j-1])\n        if j<2 and [i,j+1] not in visited:\n            if table[i][j+1] != sorted[i][j+1] and table[i][j] == 0:\n                answer += 1\n                table[i][j] = table[i][j+1]\n                table[i][j+1] = 0\n            queue.append([i,j+1])\n        if i<2 and [i+1,j] not in visited:\n            if table[i+1][j] != sorted[i+1][j] and table[i][j] == 0:\n                answer += 1\n                table[i][j] = table[i+1][j]\n                table[i+1][j] = 0\n            queue.append([i+1,j])\n\n    if table != sorted:\n        return -1\n\n    return answer\n\nprint(solution())\n```\n\n문제점 -> 0이 움직일 수 있는 모든 조건을 검사하는 것이 아니다. 0이 움직일 수 있는 모든 조건을 검사하려면 queue 에 table 배열이 쌓여야하는데 이는 구현이 복잡할 뿐더러 메모리 제한 오류가 발생한다고 한다. 이 개념을 가능하게 하려면 배열이 아닌 string 형태로 table을 받아와 다루면 된다 (검색을 통해 알게 되었다.)\n\n\n\n```python\nimport sys\n\ndef solution():\n    queue = [table]\n    visited = {table:0} # 딕셔너리 key: table , value: 움직인 수\n    \n    while queue:\n        q = queue.pop(0)\n        step = visited.get(q) # 해당 테이블까지 움직인 step 수를 얻어온다.\n        zeroIdx = q.index('0')\n \n        if q == '123456780':\n            return step\n \n        # q가 배열의 모습일 때, 0의 인덱스를 구한다.\n        i = zeroIdx//3\n        j = zeroIdx - 3*(zeroIdx//3)\n \n        step += 1\n        ql = list(q)\n        if i > 0: # 위\n            ql[zeroIdx], ql[zeroIdx-3] = ql[zeroIdx-3], ql[zeroIdx]\n            qs = ''.join(ql)\n            if not visited.get(qs):\n                visited[qs] = step\n                queue.append(qs)\n            ql[zeroIdx], ql[zeroIdx-3] = ql[zeroIdx-3], ql[zeroIdx]\n \n        if i < 2: # 아래\n            ql[zeroIdx], ql[zeroIdx+3] = ql[zeroIdx+3], ql[zeroIdx]\n            qs = ''.join(ql)\n            if not visited.get(qs):\n                visited[qs] = step\n                queue.append(qs)\n            ql[zeroIdx], ql[zeroIdx+3] = ql[zeroIdx+3], ql[zeroIdx]\n        \n        if j > 0: # 왼쪽\n            ql[zeroIdx], ql[zeroIdx-1] = ql[zeroIdx-1], ql[zeroIdx]\n            qs = ''.join(ql)\n            if not visited.get(qs):\n                visited[qs] = step\n                queue.append(qs)\n            ql[zeroIdx], ql[zeroIdx-1] = ql[zeroIdx-1], ql[zeroIdx]\n            \n        if j < 2: # 오른쪽\n            ql[zeroIdx], ql[zeroIdx+1] = ql[zeroIdx+1], ql[zeroIdx]\n            qs = ''.join(ql)\n            if not visited.get(qs):\n                visited[qs] = step\n                queue.append(qs)\n            ql[zeroIdx], ql[zeroIdx+1] = ql[zeroIdx+1], ql[zeroIdx]\n \n    return -1\n \n# 배열이 아닌 str 형태로 받아온다.\ntable = ''\nfor _ in range(3):\n    table += ''.join(sys.stdin.readline().split())\n \nprint(solution())\n```\n\n난 아직 많이 부족하다는 것을 깨달았다 ㅠ-ㅠ 그래도 딕셔너리 / 새로운 bfs 방식 / 새로운 문제 접근 방식 을 배운 것에 만족하자 ! \n\n","slug":"backjoon-1525","published":1,"date":"2021-02-08T18:25:12.015Z","updated":"2021-02-08T18:25:12.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0ju0012f9c97c0cbjoz","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">32 MB</td>\n<td align=\"left\">9234</td>\n<td align=\"left\">3778</td>\n<td align=\"left\">2219</td>\n<td align=\"left\">39.386%</td>\n</tr>\n</tbody></table>\n<p>3×3 표에 다음과 같이 수가 채워져 있다. 오른쪽 아래 가장 끝 칸은 비어 있는 칸이다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">4</td>\n<td>5</td>\n<td>6</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td>8</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>어떤 수와 인접해 있는 네 개의 칸 중에 하나가 비어 있으면, 수를 그 칸으로 이동시킬 수가 있다. 물론 표 바깥으로 나가는 경우는 불가능하다. 우리의 목표는 초기 상태가 주어졌을 때, 최소의 이동으로 위와 같은 정리된 상태를 만드는 것이다. 다음의 예를 보자.</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th></th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td>6</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4</td>\n<td></td>\n<td>5</td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td>6</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4</td>\n<td>5</td>\n<td></td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td>6</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>가장 윗 상태에서 세 번의 이동을 통해 정리된 상태를 만들 수 있다. 이와 같이 최소 이동 횟수를 구하는 프로그램을 작성하시오.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>세 줄에 걸쳐서 표에 채워져 있는 아홉 개의 수가 주어진다. 한 줄에 세 개의 수가 주어지며, 빈 칸은 0으로 나타낸다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 최소의 이동 횟수를 출력한다. 이동이 불가능한 경우 -1을 출력한다.</p>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0 3</span><br><span class=\"line\">4 2 5</span><br><span class=\"line\">7 8 6</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 6 0</span><br><span class=\"line\">8 1 2</span><br><span class=\"line\">7 4 5</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h2><ul>\n<li>문제를 번역한 사람: <a href=\"https://www.acmicpc.net/user/baekjoon\">baekjoon</a></li>\n<li>잘못된 데이터를 찾은 사람: <a href=\"https://www.acmicpc.net/user/djm03178\">djm03178</a></li>\n<li>데이터를 추가한 사람: <a href=\"https://www.acmicpc.net/user/hello70825\">hello70825</a></li>\n<li>메모리 제한을 수정한 사람: <a href=\"https://www.acmicpc.net/user/portableangel\">portableangel</a></li>\n</ul>\n<h2 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h2><ul>\n<li><a href=\"https://www.acmicpc.net/problem/tag/7\">그래프 이론</a></li>\n<li><a href=\"https://www.acmicpc.net/problem/tag/11\">그래프 탐색</a></li>\n<li><a href=\"https://www.acmicpc.net/problem/tag/126\">너비 우선 탐색</a></li>\n<li><a href=\"https://www.acmicpc.net/problem/tag/14\">비트마스킹</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>BFS로 푸는 문제이다. 저번에 미로 문제를 풀 때 썼던 방식과 유사하게 풀면 될것이라 생각해서 풀었더니 완전 틀려버렸다ㅠㅠ..</p>\n<p>처음 제출했던 코드 (틀림)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\">table = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    table.append(<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sorted</span> = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">visited = []</span><br><span class=\"line\">queue = [[<span class=\"number\">0</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>():</span></span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        [i, j] = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        visited.append([i,j])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> [i-<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> table[i-<span class=\"number\">1</span>][j] != <span class=\"built_in\">sorted</span>[i-<span class=\"number\">1</span>][j] <span class=\"keyword\">and</span> table[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                answer += <span class=\"number\">1</span></span><br><span class=\"line\">                table[i][j] = table[i-<span class=\"number\">1</span>][j]</span><br><span class=\"line\">                table[i-<span class=\"number\">1</span>][j] = <span class=\"number\">0</span></span><br><span class=\"line\">            queue.append([i-<span class=\"number\">1</span>,j])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> [i,j-<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> table[i][j-<span class=\"number\">1</span>] != <span class=\"built_in\">sorted</span>[i][j-<span class=\"number\">1</span>] <span class=\"keyword\">and</span> table[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                answer += <span class=\"number\">1</span></span><br><span class=\"line\">                table[i][j] = table[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                table[i][j-<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">            queue.append([i,j-<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j&lt;<span class=\"number\">2</span> <span class=\"keyword\">and</span> [i,j+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> table[i][j+<span class=\"number\">1</span>] != <span class=\"built_in\">sorted</span>[i][j+<span class=\"number\">1</span>] <span class=\"keyword\">and</span> table[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                answer += <span class=\"number\">1</span></span><br><span class=\"line\">                table[i][j] = table[i][j+<span class=\"number\">1</span>]</span><br><span class=\"line\">                table[i][j+<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">            queue.append([i,j+<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i&lt;<span class=\"number\">2</span> <span class=\"keyword\">and</span> [i+<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> table[i+<span class=\"number\">1</span>][j] != <span class=\"built_in\">sorted</span>[i+<span class=\"number\">1</span>][j] <span class=\"keyword\">and</span> table[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                answer += <span class=\"number\">1</span></span><br><span class=\"line\">                table[i][j] = table[i+<span class=\"number\">1</span>][j]</span><br><span class=\"line\">                table[i+<span class=\"number\">1</span>][j] = <span class=\"number\">0</span></span><br><span class=\"line\">            queue.append([i+<span class=\"number\">1</span>,j])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> table != <span class=\"built_in\">sorted</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br><span class=\"line\"></span><br><span class=\"line\">print(solution())</span><br></pre></td></tr></table></figure>\n<p>문제점 -&gt; 0이 움직일 수 있는 모든 조건을 검사하는 것이 아니다. 0이 움직일 수 있는 모든 조건을 검사하려면 queue 에 table 배열이 쌓여야하는데 이는 구현이 복잡할 뿐더러 메모리 제한 오류가 발생한다고 한다. 이 개념을 가능하게 하려면 배열이 아닌 string 형태로 table을 받아와 다루면 된다 (검색을 통해 알게 되었다.)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>():</span></span><br><span class=\"line\">    queue = [table]</span><br><span class=\"line\">    visited = &#123;table:<span class=\"number\">0</span>&#125; <span class=\"comment\"># 딕셔너리 key: table , value: 움직인 수</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        q = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        step = visited.get(q) <span class=\"comment\"># 해당 테이블까지 움직인 step 수를 얻어온다.</span></span><br><span class=\"line\">        zeroIdx = q.index(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> q == <span class=\"string\">&#x27;123456780&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> step</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># q가 배열의 모습일 때, 0의 인덱스를 구한다.</span></span><br><span class=\"line\">        i = zeroIdx//<span class=\"number\">3</span></span><br><span class=\"line\">        j = zeroIdx - <span class=\"number\">3</span>*(zeroIdx//<span class=\"number\">3</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">        step += <span class=\"number\">1</span></span><br><span class=\"line\">        ql = <span class=\"built_in\">list</span>(q)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span>: <span class=\"comment\"># 위</span></span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx-<span class=\"number\">3</span>] = ql[zeroIdx-<span class=\"number\">3</span>], ql[zeroIdx]</span><br><span class=\"line\">            qs = <span class=\"string\">&#x27;&#x27;</span>.join(ql)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited.get(qs):</span><br><span class=\"line\">                visited[qs] = step</span><br><span class=\"line\">                queue.append(qs)</span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx-<span class=\"number\">3</span>] = ql[zeroIdx-<span class=\"number\">3</span>], ql[zeroIdx]</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt; <span class=\"number\">2</span>: <span class=\"comment\"># 아래</span></span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx+<span class=\"number\">3</span>] = ql[zeroIdx+<span class=\"number\">3</span>], ql[zeroIdx]</span><br><span class=\"line\">            qs = <span class=\"string\">&#x27;&#x27;</span>.join(ql)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited.get(qs):</span><br><span class=\"line\">                visited[qs] = step</span><br><span class=\"line\">                queue.append(qs)</span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx+<span class=\"number\">3</span>] = ql[zeroIdx+<span class=\"number\">3</span>], ql[zeroIdx]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &gt; <span class=\"number\">0</span>: <span class=\"comment\"># 왼쪽</span></span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx-<span class=\"number\">1</span>] = ql[zeroIdx-<span class=\"number\">1</span>], ql[zeroIdx]</span><br><span class=\"line\">            qs = <span class=\"string\">&#x27;&#x27;</span>.join(ql)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited.get(qs):</span><br><span class=\"line\">                visited[qs] = step</span><br><span class=\"line\">                queue.append(qs)</span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx-<span class=\"number\">1</span>] = ql[zeroIdx-<span class=\"number\">1</span>], ql[zeroIdx]</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &lt; <span class=\"number\">2</span>: <span class=\"comment\"># 오른쪽</span></span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx+<span class=\"number\">1</span>] = ql[zeroIdx+<span class=\"number\">1</span>], ql[zeroIdx]</span><br><span class=\"line\">            qs = <span class=\"string\">&#x27;&#x27;</span>.join(ql)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited.get(qs):</span><br><span class=\"line\">                visited[qs] = step</span><br><span class=\"line\">                queue.append(qs)</span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx+<span class=\"number\">1</span>] = ql[zeroIdx+<span class=\"number\">1</span>], ql[zeroIdx]</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 배열이 아닌 str 형태로 받아온다.</span></span><br><span class=\"line\">table = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    table += <span class=\"string\">&#x27;&#x27;</span>.join(sys.stdin.readline().split())</span><br><span class=\"line\"> </span><br><span class=\"line\">print(solution())</span><br></pre></td></tr></table></figure>\n<p>난 아직 많이 부족하다는 것을 깨달았다 ㅠ-ㅠ 그래도 딕셔너리 / 새로운 bfs 방식 / 새로운 문제 접근 방식 을 배운 것에 만족하자 ! </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">32 MB</td>\n<td align=\"left\">9234</td>\n<td align=\"left\">3778</td>\n<td align=\"left\">2219</td>\n<td align=\"left\">39.386%</td>\n</tr>\n</tbody></table>\n<p>3×3 표에 다음과 같이 수가 채워져 있다. 오른쪽 아래 가장 끝 칸은 비어 있는 칸이다.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">4</td>\n<td>5</td>\n<td>6</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td>8</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>어떤 수와 인접해 있는 네 개의 칸 중에 하나가 비어 있으면, 수를 그 칸으로 이동시킬 수가 있다. 물론 표 바깥으로 나가는 경우는 불가능하다. 우리의 목표는 초기 상태가 주어졌을 때, 최소의 이동으로 위와 같은 정리된 상태를 만드는 것이다. 다음의 예를 보자.</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th></th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td>6</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4</td>\n<td></td>\n<td>5</td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td>6</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4</td>\n<td>5</td>\n<td></td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td>6</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>2</th>\n<th>3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>4</td>\n<td>5</td>\n<td>6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>8</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>가장 윗 상태에서 세 번의 이동을 통해 정리된 상태를 만들 수 있다. 이와 같이 최소 이동 횟수를 구하는 프로그램을 작성하시오.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>세 줄에 걸쳐서 표에 채워져 있는 아홉 개의 수가 주어진다. 한 줄에 세 개의 수가 주어지며, 빈 칸은 0으로 나타낸다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 최소의 이동 횟수를 출력한다. 이동이 불가능한 경우 -1을 출력한다.</p>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0 3</span><br><span class=\"line\">4 2 5</span><br><span class=\"line\">7 8 6</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 6 0</span><br><span class=\"line\">8 1 2</span><br><span class=\"line\">7 4 5</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h2><ul>\n<li>문제를 번역한 사람: <a href=\"https://www.acmicpc.net/user/baekjoon\">baekjoon</a></li>\n<li>잘못된 데이터를 찾은 사람: <a href=\"https://www.acmicpc.net/user/djm03178\">djm03178</a></li>\n<li>데이터를 추가한 사람: <a href=\"https://www.acmicpc.net/user/hello70825\">hello70825</a></li>\n<li>메모리 제한을 수정한 사람: <a href=\"https://www.acmicpc.net/user/portableangel\">portableangel</a></li>\n</ul>\n<h2 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h2><ul>\n<li><a href=\"https://www.acmicpc.net/problem/tag/7\">그래프 이론</a></li>\n<li><a href=\"https://www.acmicpc.net/problem/tag/11\">그래프 탐색</a></li>\n<li><a href=\"https://www.acmicpc.net/problem/tag/126\">너비 우선 탐색</a></li>\n<li><a href=\"https://www.acmicpc.net/problem/tag/14\">비트마스킹</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>BFS로 푸는 문제이다. 저번에 미로 문제를 풀 때 썼던 방식과 유사하게 풀면 될것이라 생각해서 풀었더니 완전 틀려버렸다ㅠㅠ..</p>\n<p>처음 제출했던 코드 (틀림)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\">table = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    table.append(<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">sorted</span> = [[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],[<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>],[<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">visited = []</span><br><span class=\"line\">queue = [[<span class=\"number\">0</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>():</span></span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        [i, j] = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        visited.append([i,j])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> [i-<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> table[i-<span class=\"number\">1</span>][j] != <span class=\"built_in\">sorted</span>[i-<span class=\"number\">1</span>][j] <span class=\"keyword\">and</span> table[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                answer += <span class=\"number\">1</span></span><br><span class=\"line\">                table[i][j] = table[i-<span class=\"number\">1</span>][j]</span><br><span class=\"line\">                table[i-<span class=\"number\">1</span>][j] = <span class=\"number\">0</span></span><br><span class=\"line\">            queue.append([i-<span class=\"number\">1</span>,j])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> [i,j-<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> table[i][j-<span class=\"number\">1</span>] != <span class=\"built_in\">sorted</span>[i][j-<span class=\"number\">1</span>] <span class=\"keyword\">and</span> table[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                answer += <span class=\"number\">1</span></span><br><span class=\"line\">                table[i][j] = table[i][j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                table[i][j-<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">            queue.append([i,j-<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j&lt;<span class=\"number\">2</span> <span class=\"keyword\">and</span> [i,j+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> table[i][j+<span class=\"number\">1</span>] != <span class=\"built_in\">sorted</span>[i][j+<span class=\"number\">1</span>] <span class=\"keyword\">and</span> table[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                answer += <span class=\"number\">1</span></span><br><span class=\"line\">                table[i][j] = table[i][j+<span class=\"number\">1</span>]</span><br><span class=\"line\">                table[i][j+<span class=\"number\">1</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">            queue.append([i,j+<span class=\"number\">1</span>])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i&lt;<span class=\"number\">2</span> <span class=\"keyword\">and</span> [i+<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> visited:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> table[i+<span class=\"number\">1</span>][j] != <span class=\"built_in\">sorted</span>[i+<span class=\"number\">1</span>][j] <span class=\"keyword\">and</span> table[i][j] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                answer += <span class=\"number\">1</span></span><br><span class=\"line\">                table[i][j] = table[i+<span class=\"number\">1</span>][j]</span><br><span class=\"line\">                table[i+<span class=\"number\">1</span>][j] = <span class=\"number\">0</span></span><br><span class=\"line\">            queue.append([i+<span class=\"number\">1</span>,j])</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> table != <span class=\"built_in\">sorted</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br><span class=\"line\"></span><br><span class=\"line\">print(solution())</span><br></pre></td></tr></table></figure>\n<p>문제점 -&gt; 0이 움직일 수 있는 모든 조건을 검사하는 것이 아니다. 0이 움직일 수 있는 모든 조건을 검사하려면 queue 에 table 배열이 쌓여야하는데 이는 구현이 복잡할 뿐더러 메모리 제한 오류가 발생한다고 한다. 이 개념을 가능하게 하려면 배열이 아닌 string 형태로 table을 받아와 다루면 된다 (검색을 통해 알게 되었다.)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>():</span></span><br><span class=\"line\">    queue = [table]</span><br><span class=\"line\">    visited = &#123;table:<span class=\"number\">0</span>&#125; <span class=\"comment\"># 딕셔너리 key: table , value: 움직인 수</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        q = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        step = visited.get(q) <span class=\"comment\"># 해당 테이블까지 움직인 step 수를 얻어온다.</span></span><br><span class=\"line\">        zeroIdx = q.index(<span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> q == <span class=\"string\">&#x27;123456780&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> step</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># q가 배열의 모습일 때, 0의 인덱스를 구한다.</span></span><br><span class=\"line\">        i = zeroIdx//<span class=\"number\">3</span></span><br><span class=\"line\">        j = zeroIdx - <span class=\"number\">3</span>*(zeroIdx//<span class=\"number\">3</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">        step += <span class=\"number\">1</span></span><br><span class=\"line\">        ql = <span class=\"built_in\">list</span>(q)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span>: <span class=\"comment\"># 위</span></span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx-<span class=\"number\">3</span>] = ql[zeroIdx-<span class=\"number\">3</span>], ql[zeroIdx]</span><br><span class=\"line\">            qs = <span class=\"string\">&#x27;&#x27;</span>.join(ql)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited.get(qs):</span><br><span class=\"line\">                visited[qs] = step</span><br><span class=\"line\">                queue.append(qs)</span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx-<span class=\"number\">3</span>] = ql[zeroIdx-<span class=\"number\">3</span>], ql[zeroIdx]</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt; <span class=\"number\">2</span>: <span class=\"comment\"># 아래</span></span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx+<span class=\"number\">3</span>] = ql[zeroIdx+<span class=\"number\">3</span>], ql[zeroIdx]</span><br><span class=\"line\">            qs = <span class=\"string\">&#x27;&#x27;</span>.join(ql)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited.get(qs):</span><br><span class=\"line\">                visited[qs] = step</span><br><span class=\"line\">                queue.append(qs)</span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx+<span class=\"number\">3</span>] = ql[zeroIdx+<span class=\"number\">3</span>], ql[zeroIdx]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &gt; <span class=\"number\">0</span>: <span class=\"comment\"># 왼쪽</span></span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx-<span class=\"number\">1</span>] = ql[zeroIdx-<span class=\"number\">1</span>], ql[zeroIdx]</span><br><span class=\"line\">            qs = <span class=\"string\">&#x27;&#x27;</span>.join(ql)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited.get(qs):</span><br><span class=\"line\">                visited[qs] = step</span><br><span class=\"line\">                queue.append(qs)</span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx-<span class=\"number\">1</span>] = ql[zeroIdx-<span class=\"number\">1</span>], ql[zeroIdx]</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &lt; <span class=\"number\">2</span>: <span class=\"comment\"># 오른쪽</span></span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx+<span class=\"number\">1</span>] = ql[zeroIdx+<span class=\"number\">1</span>], ql[zeroIdx]</span><br><span class=\"line\">            qs = <span class=\"string\">&#x27;&#x27;</span>.join(ql)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> visited.get(qs):</span><br><span class=\"line\">                visited[qs] = step</span><br><span class=\"line\">                queue.append(qs)</span><br><span class=\"line\">            ql[zeroIdx], ql[zeroIdx+<span class=\"number\">1</span>] = ql[zeroIdx+<span class=\"number\">1</span>], ql[zeroIdx]</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 배열이 아닌 str 형태로 받아온다.</span></span><br><span class=\"line\">table = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>):</span><br><span class=\"line\">    table += <span class=\"string\">&#x27;&#x27;</span>.join(sys.stdin.readline().split())</span><br><span class=\"line\"> </span><br><span class=\"line\">print(solution())</span><br></pre></td></tr></table></figure>\n<p>난 아직 많이 부족하다는 것을 깨달았다 ㅠ-ㅠ 그래도 딕셔너리 / 새로운 bfs 방식 / 새로운 문제 접근 방식 을 배운 것에 만족하자 ! </p>\n"},{"title":"[백준알고리즘] N과 M(3) - 15651 (파이썬/ python)","dates":"2020-08-28T04:38:00.000Z","_content":"\n\n\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :--- | :-------- | :-------- |\n| 1 초      | 512 MB      | 13368 | 8665 | 6751      | 65.486%   |\n\n\n\n자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.\n\n- 1부터 N까지 자연수 중에서 M개를 고른 수열\n- 같은 수를 여러 번 골라도 된다.\n\n## 입력\n\n첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 7)\n\n## 출력\n\n한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.\n\n수열은 사전 순으로 증가하는 순서로 출력해야 한다.\n\n### 예제 입력 1 \n\n```\n3 1\n```\n\n### 예제 출력 1 \n\n```\n1\n2\n3\n```\n\n### 예제 입력 2 \n\n```\n4 2\n```\n\n### 예제 출력 2 \n\n```\n1 1\n1 2\n1 3\n1 4\n2 1\n2 2\n2 3\n2 4\n3 1\n3 2\n3 3\n3 4\n4 1\n4 2\n4 3\n4 4\n```\n\n### 예제 입력 3 \n\n```\n3 3\n```\n\n### 예제 출력 3 \n\n```\n1 1 1\n1 1 2\n1 1 3\n1 2 1\n1 2 2\n1 2 3\n1 3 1\n1 3 2\n1 3 3\n2 1 1\n2 1 2\n2 1 3\n2 2 1\n2 2 2\n2 2 3\n2 3 1\n2 3 2\n2 3 3\n3 1 1\n3 1 2\n3 1 3\n3 2 1\n3 2 2\n3 2 3\n3 3 1\n3 3 2\n3 3 3\n```\n\n\n\n# 풀이\n\n```python\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nqueue = []\n\ndef dfs(depth):\n    if depth == M:\n        print(' '.join(map(str, queue)))\n        return\n    for i in range(N):\n        queue.append(i+1)\n        dfs(depth+1)\n        queue.pop()\n\ndfs(0)\n```\n\n\n\nN과 M(1) 과 다르게 중복을 허용하기 때문에 방문여부를 체크하지 않아도 된다 !","source":"_posts/backjoon-15651.md","raw":"---\ntitle: \"[백준알고리즘] N과 M(3) - 15651 (파이썬/ python)\"\ndates: 2020-08-28 13:38:00\ntag: 알고리즘\n---\n\n\n\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :--- | :-------- | :-------- |\n| 1 초      | 512 MB      | 13368 | 8665 | 6751      | 65.486%   |\n\n\n\n자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.\n\n- 1부터 N까지 자연수 중에서 M개를 고른 수열\n- 같은 수를 여러 번 골라도 된다.\n\n## 입력\n\n첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 7)\n\n## 출력\n\n한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.\n\n수열은 사전 순으로 증가하는 순서로 출력해야 한다.\n\n### 예제 입력 1 \n\n```\n3 1\n```\n\n### 예제 출력 1 \n\n```\n1\n2\n3\n```\n\n### 예제 입력 2 \n\n```\n4 2\n```\n\n### 예제 출력 2 \n\n```\n1 1\n1 2\n1 3\n1 4\n2 1\n2 2\n2 3\n2 4\n3 1\n3 2\n3 3\n3 4\n4 1\n4 2\n4 3\n4 4\n```\n\n### 예제 입력 3 \n\n```\n3 3\n```\n\n### 예제 출력 3 \n\n```\n1 1 1\n1 1 2\n1 1 3\n1 2 1\n1 2 2\n1 2 3\n1 3 1\n1 3 2\n1 3 3\n2 1 1\n2 1 2\n2 1 3\n2 2 1\n2 2 2\n2 2 3\n2 3 1\n2 3 2\n2 3 3\n3 1 1\n3 1 2\n3 1 3\n3 2 1\n3 2 2\n3 2 3\n3 3 1\n3 3 2\n3 3 3\n```\n\n\n\n# 풀이\n\n```python\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nqueue = []\n\ndef dfs(depth):\n    if depth == M:\n        print(' '.join(map(str, queue)))\n        return\n    for i in range(N):\n        queue.append(i+1)\n        dfs(depth+1)\n        queue.pop()\n\ndfs(0)\n```\n\n\n\nN과 M(1) 과 다르게 중복을 허용하기 때문에 방문여부를 체크하지 않아도 된다 !","slug":"backjoon-15651","published":1,"date":"2021-02-08T18:25:06.981Z","updated":"2021-02-08T18:25:06.981Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jv0013f9c923ck66ym","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">512 MB</td>\n<td align=\"left\">13368</td>\n<td align=\"left\">8665</td>\n<td align=\"left\">6751</td>\n<td align=\"left\">65.486%</td>\n</tr>\n</tbody></table>\n<p>자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.</p>\n<ul>\n<li>1부터 N까지 자연수 중에서 M개를 고른 수열</li>\n<li>같은 수를 여러 번 골라도 된다.</li>\n</ul>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 7)</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>\n<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1</span><br><span class=\"line\">1 2</span><br><span class=\"line\">1 3</span><br><span class=\"line\">1 4</span><br><span class=\"line\">2 1</span><br><span class=\"line\">2 2</span><br><span class=\"line\">2 3</span><br><span class=\"line\">2 4</span><br><span class=\"line\">3 1</span><br><span class=\"line\">3 2</span><br><span class=\"line\">3 3</span><br><span class=\"line\">3 4</span><br><span class=\"line\">4 1</span><br><span class=\"line\">4 2</span><br><span class=\"line\">4 3</span><br><span class=\"line\">4 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 1</span><br><span class=\"line\">1 1 2</span><br><span class=\"line\">1 1 3</span><br><span class=\"line\">1 2 1</span><br><span class=\"line\">1 2 2</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">1 3 1</span><br><span class=\"line\">1 3 2</span><br><span class=\"line\">1 3 3</span><br><span class=\"line\">2 1 1</span><br><span class=\"line\">2 1 2</span><br><span class=\"line\">2 1 3</span><br><span class=\"line\">2 2 1</span><br><span class=\"line\">2 2 2</span><br><span class=\"line\">2 2 3</span><br><span class=\"line\">2 3 1</span><br><span class=\"line\">2 3 2</span><br><span class=\"line\">2 3 3</span><br><span class=\"line\">3 1 1</span><br><span class=\"line\">3 1 2</span><br><span class=\"line\">3 1 3</span><br><span class=\"line\">3 2 1</span><br><span class=\"line\">3 2 2</span><br><span class=\"line\">3 2 3</span><br><span class=\"line\">3 3 1</span><br><span class=\"line\">3 3 2</span><br><span class=\"line\">3 3 3</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\">N, M = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">queue = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">depth</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> depth == M:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27; &#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, queue)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N):</span><br><span class=\"line\">        queue.append(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        dfs(depth+<span class=\"number\">1</span>)</span><br><span class=\"line\">        queue.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">dfs(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p>N과 M(1) 과 다르게 중복을 허용하기 때문에 방문여부를 체크하지 않아도 된다 !</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">512 MB</td>\n<td align=\"left\">13368</td>\n<td align=\"left\">8665</td>\n<td align=\"left\">6751</td>\n<td align=\"left\">65.486%</td>\n</tr>\n</tbody></table>\n<p>자연수 N과 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오.</p>\n<ul>\n<li>1부터 N까지 자연수 중에서 M개를 고른 수열</li>\n<li>같은 수를 여러 번 골라도 된다.</li>\n</ul>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 자연수 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 7)</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>\n<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1</span><br><span class=\"line\">1 2</span><br><span class=\"line\">1 3</span><br><span class=\"line\">1 4</span><br><span class=\"line\">2 1</span><br><span class=\"line\">2 2</span><br><span class=\"line\">2 3</span><br><span class=\"line\">2 4</span><br><span class=\"line\">3 1</span><br><span class=\"line\">3 2</span><br><span class=\"line\">3 3</span><br><span class=\"line\">3 4</span><br><span class=\"line\">4 1</span><br><span class=\"line\">4 2</span><br><span class=\"line\">4 3</span><br><span class=\"line\">4 4</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 3</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 1</span><br><span class=\"line\">1 1 2</span><br><span class=\"line\">1 1 3</span><br><span class=\"line\">1 2 1</span><br><span class=\"line\">1 2 2</span><br><span class=\"line\">1 2 3</span><br><span class=\"line\">1 3 1</span><br><span class=\"line\">1 3 2</span><br><span class=\"line\">1 3 3</span><br><span class=\"line\">2 1 1</span><br><span class=\"line\">2 1 2</span><br><span class=\"line\">2 1 3</span><br><span class=\"line\">2 2 1</span><br><span class=\"line\">2 2 2</span><br><span class=\"line\">2 2 3</span><br><span class=\"line\">2 3 1</span><br><span class=\"line\">2 3 2</span><br><span class=\"line\">2 3 3</span><br><span class=\"line\">3 1 1</span><br><span class=\"line\">3 1 2</span><br><span class=\"line\">3 1 3</span><br><span class=\"line\">3 2 1</span><br><span class=\"line\">3 2 2</span><br><span class=\"line\">3 2 3</span><br><span class=\"line\">3 3 1</span><br><span class=\"line\">3 3 2</span><br><span class=\"line\">3 3 3</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\">N, M = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">queue = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">depth</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> depth == M:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27; &#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, queue)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N):</span><br><span class=\"line\">        queue.append(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">        dfs(depth+<span class=\"number\">1</span>)</span><br><span class=\"line\">        queue.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">dfs(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n\n\n<p>N과 M(1) 과 다르게 중복을 허용하기 때문에 방문여부를 체크하지 않아도 된다 !</p>\n"},{"title":"[백준알고리즘] N과 M(5) - 15654 (파이썬/ python)","dates":"2020-08-28T05:23:00.000Z","_content":"\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출 | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :--- | :--- | :-------- | :-------- |\n| 1 초      | 512 MB      | 6458 | 4805 | 3849      | 74.219%   |\n\n\n\nN개의 자연수와 자연수 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오. N개의 자연수는 모두 다른 수이다.\n\n- N개의 자연수 중에서 M개를 고른 수열\n\n## 입력\n\n첫째 줄에 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)\n\n둘째 줄에 N개의 수가 주어진다. 입력으로 주어지는 수는 10,000보다 작거나 같은 자연수이다.\n\n## 출력\n\n한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.\n\n수열은 사전 순으로 증가하는 순서로 출력해야 한다.\n\n### 예제 입력 1 \n\n```\n3 1\n4 5 2\n```\n\n### 예제 출력 1\n\n```\n2\n4\n5\n```\n\n### 예제 입력 2\n\n```\n4 2\n9 8 7 1\n```\n\n### 예제 출력 2 \n\n```\n1 7\n1 8\n1 9\n7 1\n7 8\n7 9\n8 1\n8 7\n8 9\n9 1\n9 7\n9 8\n```\n\n### 예제 입력 3 \n\n```\n4 4\n1231 1232 1233 1234\n```\n\n### 예제 출력 3 \n\n```\n1231 1232 1233 1234\n1231 1232 1234 1233\n1231 1233 1232 1234\n1231 1233 1234 1232\n1231 1234 1232 1233\n1231 1234 1233 1232\n1232 1231 1233 1234\n1232 1231 1234 1233\n1232 1233 1231 1234\n1232 1233 1234 1231\n1232 1234 1231 1233\n1232 1234 1233 1231\n1233 1231 1232 1234\n1233 1231 1234 1232\n1233 1232 1231 1234\n1233 1232 1234 1231\n1233 1234 1231 1232\n1233 1234 1232 1231\n1234 1231 1232 1233\n1234 1231 1233 1232\n1234 1232 1231 1233\n1234 1232 1233 1231\n1234 1233 1231 1232\n1234 1233 1232 1231\n```\n\n\n\n# 풀이\n\n```python\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nnums = list(map(int, input().split()))\nnums.sort()\n\nout = [0 for _ in range(M)]\nvisited = [0 for _ in range(N)]\n\ndef dfs(depth):\n    if depth == M:\n        print(' '.join(map(str, out)))\n        return\n    for i in range(N):\n        if visited[i] == 0:\n            visited[i] = 1\n            out[depth] = nums[i]\n            dfs(depth+1)\n            visited[i] = 0\n\ndfs(0)\n```\n\n다른 N과 M 문제와 다른 점은 N의 수가 지정되어 있다는 점이다.\n\nN의 수들을 sort 한 다음 똑같이 dfs를 수행한다. 중복을 허용하지 않기 때문에 visited를 검사한다.\n\n\n\n* 다른 N과 M 문제처럼 out 리스트에 append 후 pop 하는 코드로 구현하였더니, pop 할 때마다 원소들이 재 정렬되기 때문에 런타임 에러가 발생하였다. \n\n  -> 어차피 print 할 때마다 out은 초기화 되어야 하기 때문에 out을 m길이의 list로 정의 하고 depth를 탐색할 때 out[depth]를 탐색한 nums 로 지정한다. \n\n* int로 받아오고 str 로 print 하는 과정이 꼬이면 틀렸습니다가 나온다ㅠ \n\n","source":"_posts/backjoon-15654.md","raw":"---\ntitle: \"[백준알고리즘] N과 M(5) - 15654 (파이썬/ python)\"\ndates: 2020-08-28 14:23:00\ntag: 알고리즘\n---\n\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출 | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :--- | :--- | :-------- | :-------- |\n| 1 초      | 512 MB      | 6458 | 4805 | 3849      | 74.219%   |\n\n\n\nN개의 자연수와 자연수 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오. N개의 자연수는 모두 다른 수이다.\n\n- N개의 자연수 중에서 M개를 고른 수열\n\n## 입력\n\n첫째 줄에 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)\n\n둘째 줄에 N개의 수가 주어진다. 입력으로 주어지는 수는 10,000보다 작거나 같은 자연수이다.\n\n## 출력\n\n한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.\n\n수열은 사전 순으로 증가하는 순서로 출력해야 한다.\n\n### 예제 입력 1 \n\n```\n3 1\n4 5 2\n```\n\n### 예제 출력 1\n\n```\n2\n4\n5\n```\n\n### 예제 입력 2\n\n```\n4 2\n9 8 7 1\n```\n\n### 예제 출력 2 \n\n```\n1 7\n1 8\n1 9\n7 1\n7 8\n7 9\n8 1\n8 7\n8 9\n9 1\n9 7\n9 8\n```\n\n### 예제 입력 3 \n\n```\n4 4\n1231 1232 1233 1234\n```\n\n### 예제 출력 3 \n\n```\n1231 1232 1233 1234\n1231 1232 1234 1233\n1231 1233 1232 1234\n1231 1233 1234 1232\n1231 1234 1232 1233\n1231 1234 1233 1232\n1232 1231 1233 1234\n1232 1231 1234 1233\n1232 1233 1231 1234\n1232 1233 1234 1231\n1232 1234 1231 1233\n1232 1234 1233 1231\n1233 1231 1232 1234\n1233 1231 1234 1232\n1233 1232 1231 1234\n1233 1232 1234 1231\n1233 1234 1231 1232\n1233 1234 1232 1231\n1234 1231 1232 1233\n1234 1231 1233 1232\n1234 1232 1231 1233\n1234 1232 1233 1231\n1234 1233 1231 1232\n1234 1233 1232 1231\n```\n\n\n\n# 풀이\n\n```python\nimport sys\ninput = sys.stdin.readline\n\nN, M = map(int, input().split())\nnums = list(map(int, input().split()))\nnums.sort()\n\nout = [0 for _ in range(M)]\nvisited = [0 for _ in range(N)]\n\ndef dfs(depth):\n    if depth == M:\n        print(' '.join(map(str, out)))\n        return\n    for i in range(N):\n        if visited[i] == 0:\n            visited[i] = 1\n            out[depth] = nums[i]\n            dfs(depth+1)\n            visited[i] = 0\n\ndfs(0)\n```\n\n다른 N과 M 문제와 다른 점은 N의 수가 지정되어 있다는 점이다.\n\nN의 수들을 sort 한 다음 똑같이 dfs를 수행한다. 중복을 허용하지 않기 때문에 visited를 검사한다.\n\n\n\n* 다른 N과 M 문제처럼 out 리스트에 append 후 pop 하는 코드로 구현하였더니, pop 할 때마다 원소들이 재 정렬되기 때문에 런타임 에러가 발생하였다. \n\n  -> 어차피 print 할 때마다 out은 초기화 되어야 하기 때문에 out을 m길이의 list로 정의 하고 depth를 탐색할 때 out[depth]를 탐색한 nums 로 지정한다. \n\n* int로 받아오고 str 로 print 하는 과정이 꼬이면 틀렸습니다가 나온다ㅠ \n\n","slug":"backjoon-15654","published":1,"date":"2021-02-08T18:25:07.243Z","updated":"2021-02-08T18:25:07.243Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jw0016f9c9c3k40zgf","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">512 MB</td>\n<td align=\"left\">6458</td>\n<td align=\"left\">4805</td>\n<td align=\"left\">3849</td>\n<td align=\"left\">74.219%</td>\n</tr>\n</tbody></table>\n<p>N개의 자연수와 자연수 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오. N개의 자연수는 모두 다른 수이다.</p>\n<ul>\n<li>N개의 자연수 중에서 M개를 고른 수열</li>\n</ul>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)</p>\n<p>둘째 줄에 N개의 수가 주어진다. 입력으로 주어지는 수는 10,000보다 작거나 같은 자연수이다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>\n<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 1</span><br><span class=\"line\">4 5 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 2</span><br><span class=\"line\">9 8 7 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 7</span><br><span class=\"line\">1 8</span><br><span class=\"line\">1 9</span><br><span class=\"line\">7 1</span><br><span class=\"line\">7 8</span><br><span class=\"line\">7 9</span><br><span class=\"line\">8 1</span><br><span class=\"line\">8 7</span><br><span class=\"line\">8 9</span><br><span class=\"line\">9 1</span><br><span class=\"line\">9 7</span><br><span class=\"line\">9 8</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 4</span><br><span class=\"line\">1231 1232 1233 1234</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1231 1232 1233 1234</span><br><span class=\"line\">1231 1232 1234 1233</span><br><span class=\"line\">1231 1233 1232 1234</span><br><span class=\"line\">1231 1233 1234 1232</span><br><span class=\"line\">1231 1234 1232 1233</span><br><span class=\"line\">1231 1234 1233 1232</span><br><span class=\"line\">1232 1231 1233 1234</span><br><span class=\"line\">1232 1231 1234 1233</span><br><span class=\"line\">1232 1233 1231 1234</span><br><span class=\"line\">1232 1233 1234 1231</span><br><span class=\"line\">1232 1234 1231 1233</span><br><span class=\"line\">1232 1234 1233 1231</span><br><span class=\"line\">1233 1231 1232 1234</span><br><span class=\"line\">1233 1231 1234 1232</span><br><span class=\"line\">1233 1232 1231 1234</span><br><span class=\"line\">1233 1232 1234 1231</span><br><span class=\"line\">1233 1234 1231 1232</span><br><span class=\"line\">1233 1234 1232 1231</span><br><span class=\"line\">1234 1231 1232 1233</span><br><span class=\"line\">1234 1231 1233 1232</span><br><span class=\"line\">1234 1232 1231 1233</span><br><span class=\"line\">1234 1232 1233 1231</span><br><span class=\"line\">1234 1233 1231 1232</span><br><span class=\"line\">1234 1233 1232 1231</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\">N, M = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">nums = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\">nums.sort()</span><br><span class=\"line\"></span><br><span class=\"line\">out = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(M)]</span><br><span class=\"line\">visited = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">depth</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> depth == M:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27; &#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, out)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> visited[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            visited[i] = <span class=\"number\">1</span></span><br><span class=\"line\">            out[depth] = nums[i]</span><br><span class=\"line\">            dfs(depth+<span class=\"number\">1</span>)</span><br><span class=\"line\">            visited[i] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">dfs(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>다른 N과 M 문제와 다른 점은 N의 수가 지정되어 있다는 점이다.</p>\n<p>N의 수들을 sort 한 다음 똑같이 dfs를 수행한다. 중복을 허용하지 않기 때문에 visited를 검사한다.</p>\n<ul>\n<li><p>다른 N과 M 문제처럼 out 리스트에 append 후 pop 하는 코드로 구현하였더니, pop 할 때마다 원소들이 재 정렬되기 때문에 런타임 에러가 발생하였다. </p>\n<p>-&gt; 어차피 print 할 때마다 out은 초기화 되어야 하기 때문에 out을 m길이의 list로 정의 하고 depth를 탐색할 때 out[depth]를 탐색한 nums 로 지정한다. </p>\n</li>\n<li><p>int로 받아오고 str 로 print 하는 과정이 꼬이면 틀렸습니다가 나온다ㅠ </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">512 MB</td>\n<td align=\"left\">6458</td>\n<td align=\"left\">4805</td>\n<td align=\"left\">3849</td>\n<td align=\"left\">74.219%</td>\n</tr>\n</tbody></table>\n<p>N개의 자연수와 자연수 M이 주어졌을 때, 아래 조건을 만족하는 길이가 M인 수열을 모두 구하는 프로그램을 작성하시오. N개의 자연수는 모두 다른 수이다.</p>\n<ul>\n<li>N개의 자연수 중에서 M개를 고른 수열</li>\n</ul>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 N과 M이 주어진다. (1 ≤ M ≤ N ≤ 8)</p>\n<p>둘째 줄에 N개의 수가 주어진다. 입력으로 주어지는 수는 10,000보다 작거나 같은 자연수이다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>한 줄에 하나씩 문제의 조건을 만족하는 수열을 출력한다. 중복되는 수열을 여러 번 출력하면 안되며, 각 수열은 공백으로 구분해서 출력해야 한다.</p>\n<p>수열은 사전 순으로 증가하는 순서로 출력해야 한다.</p>\n<h3 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 1</span><br><span class=\"line\">4 5 2</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 2</span><br><span class=\"line\">9 8 7 1</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 7</span><br><span class=\"line\">1 8</span><br><span class=\"line\">1 9</span><br><span class=\"line\">7 1</span><br><span class=\"line\">7 8</span><br><span class=\"line\">7 9</span><br><span class=\"line\">8 1</span><br><span class=\"line\">8 7</span><br><span class=\"line\">8 9</span><br><span class=\"line\">9 1</span><br><span class=\"line\">9 7</span><br><span class=\"line\">9 8</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 4</span><br><span class=\"line\">1231 1232 1233 1234</span><br></pre></td></tr></table></figure>\n<h3 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1231 1232 1233 1234</span><br><span class=\"line\">1231 1232 1234 1233</span><br><span class=\"line\">1231 1233 1232 1234</span><br><span class=\"line\">1231 1233 1234 1232</span><br><span class=\"line\">1231 1234 1232 1233</span><br><span class=\"line\">1231 1234 1233 1232</span><br><span class=\"line\">1232 1231 1233 1234</span><br><span class=\"line\">1232 1231 1234 1233</span><br><span class=\"line\">1232 1233 1231 1234</span><br><span class=\"line\">1232 1233 1234 1231</span><br><span class=\"line\">1232 1234 1231 1233</span><br><span class=\"line\">1232 1234 1233 1231</span><br><span class=\"line\">1233 1231 1232 1234</span><br><span class=\"line\">1233 1231 1234 1232</span><br><span class=\"line\">1233 1232 1231 1234</span><br><span class=\"line\">1233 1232 1234 1231</span><br><span class=\"line\">1233 1234 1231 1232</span><br><span class=\"line\">1233 1234 1232 1231</span><br><span class=\"line\">1234 1231 1232 1233</span><br><span class=\"line\">1234 1231 1233 1232</span><br><span class=\"line\">1234 1232 1231 1233</span><br><span class=\"line\">1234 1232 1233 1231</span><br><span class=\"line\">1234 1233 1231 1232</span><br><span class=\"line\">1234 1233 1232 1231</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\">N, M = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">nums = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\">nums.sort()</span><br><span class=\"line\"></span><br><span class=\"line\">out = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(M)]</span><br><span class=\"line\">visited = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">depth</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> depth == M:</span><br><span class=\"line\">        print(<span class=\"string\">&#x27; &#x27;</span>.join(<span class=\"built_in\">map</span>(<span class=\"built_in\">str</span>, out)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> visited[i] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            visited[i] = <span class=\"number\">1</span></span><br><span class=\"line\">            out[depth] = nums[i]</span><br><span class=\"line\">            dfs(depth+<span class=\"number\">1</span>)</span><br><span class=\"line\">            visited[i] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">dfs(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>다른 N과 M 문제와 다른 점은 N의 수가 지정되어 있다는 점이다.</p>\n<p>N의 수들을 sort 한 다음 똑같이 dfs를 수행한다. 중복을 허용하지 않기 때문에 visited를 검사한다.</p>\n<ul>\n<li><p>다른 N과 M 문제처럼 out 리스트에 append 후 pop 하는 코드로 구현하였더니, pop 할 때마다 원소들이 재 정렬되기 때문에 런타임 에러가 발생하였다. </p>\n<p>-&gt; 어차피 print 할 때마다 out은 초기화 되어야 하기 때문에 out을 m길이의 list로 정의 하고 depth를 탐색할 때 out[depth]를 탐색한 nums 로 지정한다. </p>\n</li>\n<li><p>int로 받아오고 str 로 print 하는 과정이 꼬이면 틀렸습니다가 나온다ㅠ </p>\n</li>\n</ul>\n"},{"title":"[알고리즘] 백준알고리즘 1912 연속합 (파이썬/python)","date":"2020-05-09T14:26:00.000Z","_content":"\n\n\n# 문제\n\nn개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다. 단, 수는 한 개 이상 선택해야 한다.\n\n예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 정답은 12+21인 33이 정답이 된다.\n\n#### 입력\n\n첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.\n\n#### 출력\n\n첫째 줄에 답을 출력한다.\n\n#### 예제 입력 1 \n\n```\n10\n10 -4 3 1 5 6 -35 12 21 -1\n```\n\n#### 예제 출력 1 \n\n```\n33\n```\n\n#### 예제 입력 2 \n\n```\n10\n2 1 -4 3 4 -4 6 5 -5 1\n```\n\n#### 예제 출력 2 \n\n```\n14\n```\n\n#### 예제 입력 3 \n\n```\n5\n-1 -2 -3 -4 -5\n```\n\n#### 예제 출력 3 \n\n```\n-1\n```\n\n#### 출처\n\n- 데이터를 추가한 사람: [djm03178](https://www.acmicpc.net/user/djm03178) [dohyeokkim](https://www.acmicpc.net/user/dohyeokkim) [doju](https://www.acmicpc.net/user/doju) [jh05013](https://www.acmicpc.net/user/jh05013) [kimdr123](https://www.acmicpc.net/user/kimdr123) [seedkin](https://www.acmicpc.net/user/seedkin)\n- 빠진 조건을 찾은 사람: [isac322](https://www.acmicpc.net/user/isac322) [Qwaz](https://www.acmicpc.net/user/Qwaz)\n- 문제의 오타를 찾은 사람: [jh05013](https://www.acmicpc.net/user/jh05013)\n- 잘못된 데이터를 찾은 사람: [tncks0121](https://www.acmicpc.net/user/tncks0121)\n\n#### 알고리즘 분류\n\n- [다이나믹 프로그래밍](https://www.acmicpc.net/problem/tag/다이나믹 프로그래밍)\n- [수학](https://www.acmicpc.net/problem/tag/수학)\n\n\n\n# 풀이\n\n#### 틀린 풀이\n\n```python\nn = map(int, input())\nnums = list(map(int, input().split()))\n\nmax_num = 0\nbefore = 0\nwhile nums:\n  for num in nums:\n    total = before + num\n    if total > before and max_num < total:\n      max_num = total\n      before = total\n    else:\n      break\n  nums.pop(0)\n  before = 0\n\nprint(max_num)\n```\n\n위 풀이는 컴파일러로 해봤을 때 동작은 되지만 문제의 **시간 제한**을 넘어서서 다른 블로그의 방법들을 찾아보고 이해해 보았다.\n\n\n\n#### 맞은 풀이\n\n```python\nn = int(input())\nnums = [0]\nnums += list(map(int, input().split()))\n\n# 0번째 인덱스는 0으로 두기 위해 n+1 크기로 배열 생성\ntemp = [0 for _ in range(n+1)]\n\nresult = -1001 # 최소 숫자가 -1000이기 때문\nfor i in range(1,n+1):\n    temp[i] = max(temp[i-1]+nums[i], nums[i])\n    result = max(result, temp[i])\n    \nprint(result)\n\n```\n\n##### 런타임 에러 해결\n위에 코드에서 n = map(int, input()) 로 했을 때엔 런타임 에러가 떴는데,  n = int(input()) 으로 바꾸니까 런타임에러가 해결됐다 ..(?)\n\n\n\n##### 풀이방법\n\n* 이전 값을 사용해야 하기 때문에 temp, nums 배열 모두 0번째 인덱스는 0으로 두었다. \n* 이전까지 더해온 값들에 현재값을 더한값과(temp[i-1]+nums[i]) 현재값(nums[i]) 중 더 큰 값을 temp 배열에 저장한다.\n* 이전 temp 값들과 temp[i]를 비교하여 더 큰 값을 result로 지정한다.","source":"_posts/backjoon-1912.md","raw":"---\ntitle: \"[알고리즘] 백준알고리즘 1912 연속합 (파이썬/python)\"\ndate: 2020-05-09 23:26:00\ntags: 알고리즘\n---\n\n\n\n# 문제\n\nn개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다. 단, 수는 한 개 이상 선택해야 한다.\n\n예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 정답은 12+21인 33이 정답이 된다.\n\n#### 입력\n\n첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.\n\n#### 출력\n\n첫째 줄에 답을 출력한다.\n\n#### 예제 입력 1 \n\n```\n10\n10 -4 3 1 5 6 -35 12 21 -1\n```\n\n#### 예제 출력 1 \n\n```\n33\n```\n\n#### 예제 입력 2 \n\n```\n10\n2 1 -4 3 4 -4 6 5 -5 1\n```\n\n#### 예제 출력 2 \n\n```\n14\n```\n\n#### 예제 입력 3 \n\n```\n5\n-1 -2 -3 -4 -5\n```\n\n#### 예제 출력 3 \n\n```\n-1\n```\n\n#### 출처\n\n- 데이터를 추가한 사람: [djm03178](https://www.acmicpc.net/user/djm03178) [dohyeokkim](https://www.acmicpc.net/user/dohyeokkim) [doju](https://www.acmicpc.net/user/doju) [jh05013](https://www.acmicpc.net/user/jh05013) [kimdr123](https://www.acmicpc.net/user/kimdr123) [seedkin](https://www.acmicpc.net/user/seedkin)\n- 빠진 조건을 찾은 사람: [isac322](https://www.acmicpc.net/user/isac322) [Qwaz](https://www.acmicpc.net/user/Qwaz)\n- 문제의 오타를 찾은 사람: [jh05013](https://www.acmicpc.net/user/jh05013)\n- 잘못된 데이터를 찾은 사람: [tncks0121](https://www.acmicpc.net/user/tncks0121)\n\n#### 알고리즘 분류\n\n- [다이나믹 프로그래밍](https://www.acmicpc.net/problem/tag/다이나믹 프로그래밍)\n- [수학](https://www.acmicpc.net/problem/tag/수학)\n\n\n\n# 풀이\n\n#### 틀린 풀이\n\n```python\nn = map(int, input())\nnums = list(map(int, input().split()))\n\nmax_num = 0\nbefore = 0\nwhile nums:\n  for num in nums:\n    total = before + num\n    if total > before and max_num < total:\n      max_num = total\n      before = total\n    else:\n      break\n  nums.pop(0)\n  before = 0\n\nprint(max_num)\n```\n\n위 풀이는 컴파일러로 해봤을 때 동작은 되지만 문제의 **시간 제한**을 넘어서서 다른 블로그의 방법들을 찾아보고 이해해 보았다.\n\n\n\n#### 맞은 풀이\n\n```python\nn = int(input())\nnums = [0]\nnums += list(map(int, input().split()))\n\n# 0번째 인덱스는 0으로 두기 위해 n+1 크기로 배열 생성\ntemp = [0 for _ in range(n+1)]\n\nresult = -1001 # 최소 숫자가 -1000이기 때문\nfor i in range(1,n+1):\n    temp[i] = max(temp[i-1]+nums[i], nums[i])\n    result = max(result, temp[i])\n    \nprint(result)\n\n```\n\n##### 런타임 에러 해결\n위에 코드에서 n = map(int, input()) 로 했을 때엔 런타임 에러가 떴는데,  n = int(input()) 으로 바꾸니까 런타임에러가 해결됐다 ..(?)\n\n\n\n##### 풀이방법\n\n* 이전 값을 사용해야 하기 때문에 temp, nums 배열 모두 0번째 인덱스는 0으로 두었다. \n* 이전까지 더해온 값들에 현재값을 더한값과(temp[i-1]+nums[i]) 현재값(nums[i]) 중 더 큰 값을 temp 배열에 저장한다.\n* 이전 temp 값들과 temp[i]를 비교하여 더 큰 값을 result로 지정한다.","slug":"backjoon-1912","published":1,"updated":"2021-02-08T18:25:12.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jw0017f9c96qtb0zs0","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>n개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다. 단, 수는 한 개 이상 선택해야 한다.</p>\n<p>예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 정답은 12+21인 33이 정답이 된다.</p>\n<h4 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h4><p>첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.</p>\n<h4 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h4><p>첫째 줄에 답을 출력한다.</p>\n<h4 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">10 -4 3 1 5 6 -35 12 21 -1</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">33</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">2 1 -4 3 4 -4 6 5 -5 1</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">-1 -2 -3 -4 -5</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n<h4 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h4><ul>\n<li>데이터를 추가한 사람: <a href=\"https://www.acmicpc.net/user/djm03178\">djm03178</a> <a href=\"https://www.acmicpc.net/user/dohyeokkim\">dohyeokkim</a> <a href=\"https://www.acmicpc.net/user/doju\">doju</a> <a href=\"https://www.acmicpc.net/user/jh05013\">jh05013</a> <a href=\"https://www.acmicpc.net/user/kimdr123\">kimdr123</a> <a href=\"https://www.acmicpc.net/user/seedkin\">seedkin</a></li>\n<li>빠진 조건을 찾은 사람: <a href=\"https://www.acmicpc.net/user/isac322\">isac322</a> <a href=\"https://www.acmicpc.net/user/Qwaz\">Qwaz</a></li>\n<li>문제의 오타를 찾은 사람: <a href=\"https://www.acmicpc.net/user/jh05013\">jh05013</a></li>\n<li>잘못된 데이터를 찾은 사람: <a href=\"https://www.acmicpc.net/user/tncks0121\">tncks0121</a></li>\n</ul>\n<h4 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h4><ul>\n<li>[다이나믹 프로그래밍](<a href=\"https://www.acmicpc.net/problem/tag/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9\">https://www.acmicpc.net/problem/tag/다이나믹</a> 프로그래밍)</li>\n<li><a href=\"https://www.acmicpc.net/problem/tag/%EC%88%98%ED%95%99\">수학</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><h4 id=\"틀린-풀이\"><a href=\"#틀린-풀이\" class=\"headerlink\" title=\"틀린 풀이\"></a>틀린 풀이</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>())</span><br><span class=\"line\">nums = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\"></span><br><span class=\"line\">max_num = <span class=\"number\">0</span></span><br><span class=\"line\">before = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> nums:</span><br><span class=\"line\">  <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">    total = before + num</span><br><span class=\"line\">    <span class=\"keyword\">if</span> total &gt; before <span class=\"keyword\">and</span> max_num &lt; total:</span><br><span class=\"line\">      max_num = total</span><br><span class=\"line\">      before = total</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  nums.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">  before = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(max_num)</span><br></pre></td></tr></table></figure>\n<p>위 풀이는 컴파일러로 해봤을 때 동작은 되지만 문제의 <strong>시간 제한</strong>을 넘어서서 다른 블로그의 방법들을 찾아보고 이해해 보았다.</p>\n<h4 id=\"맞은-풀이\"><a href=\"#맞은-풀이\" class=\"headerlink\" title=\"맞은 풀이\"></a>맞은 풀이</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">nums = [<span class=\"number\">0</span>]</span><br><span class=\"line\">nums += <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 0번째 인덱스는 0으로 두기 위해 n+1 크기로 배열 생성</span></span><br><span class=\"line\">temp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">result = -<span class=\"number\">1001</span> <span class=\"comment\"># 최소 숫자가 -1000이기 때문</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">    temp[i] = <span class=\"built_in\">max</span>(temp[i-<span class=\"number\">1</span>]+nums[i], nums[i])</span><br><span class=\"line\">    result = <span class=\"built_in\">max</span>(result, temp[i])</span><br><span class=\"line\">    </span><br><span class=\"line\">print(result)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"런타임-에러-해결\"><a href=\"#런타임-에러-해결\" class=\"headerlink\" title=\"런타임 에러 해결\"></a>런타임 에러 해결</h5><p>위에 코드에서 n = map(int, input()) 로 했을 때엔 런타임 에러가 떴는데,  n = int(input()) 으로 바꾸니까 런타임에러가 해결됐다 ..(?)</p>\n<h5 id=\"풀이방법\"><a href=\"#풀이방법\" class=\"headerlink\" title=\"풀이방법\"></a>풀이방법</h5><ul>\n<li>이전 값을 사용해야 하기 때문에 temp, nums 배열 모두 0번째 인덱스는 0으로 두었다. </li>\n<li>이전까지 더해온 값들에 현재값을 더한값과(temp[i-1]+nums[i]) 현재값(nums[i]) 중 더 큰 값을 temp 배열에 저장한다.</li>\n<li>이전 temp 값들과 temp[i]를 비교하여 더 큰 값을 result로 지정한다.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>n개의 정수로 이루어진 임의의 수열이 주어진다. 우리는 이 중 연속된 몇 개의 수를 선택해서 구할 수 있는 합 중 가장 큰 합을 구하려고 한다. 단, 수는 한 개 이상 선택해야 한다.</p>\n<p>예를 들어서 10, -4, 3, 1, 5, 6, -35, 12, 21, -1 이라는 수열이 주어졌다고 하자. 여기서 정답은 12+21인 33이 정답이 된다.</p>\n<h4 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h4><p>첫째 줄에 정수 n(1 ≤ n ≤ 100,000)이 주어지고 둘째 줄에는 n개의 정수로 이루어진 수열이 주어진다. 수는 -1,000보다 크거나 같고, 1,000보다 작거나 같은 정수이다.</p>\n<h4 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h4><p>첫째 줄에 답을 출력한다.</p>\n<h4 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">10 -4 3 1 5 6 -35 12 21 -1</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">33</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">2 1 -4 3 4 -4 6 5 -5 1</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">14</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5</span><br><span class=\"line\">-1 -2 -3 -4 -5</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-1</span><br></pre></td></tr></table></figure>\n<h4 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h4><ul>\n<li>데이터를 추가한 사람: <a href=\"https://www.acmicpc.net/user/djm03178\">djm03178</a> <a href=\"https://www.acmicpc.net/user/dohyeokkim\">dohyeokkim</a> <a href=\"https://www.acmicpc.net/user/doju\">doju</a> <a href=\"https://www.acmicpc.net/user/jh05013\">jh05013</a> <a href=\"https://www.acmicpc.net/user/kimdr123\">kimdr123</a> <a href=\"https://www.acmicpc.net/user/seedkin\">seedkin</a></li>\n<li>빠진 조건을 찾은 사람: <a href=\"https://www.acmicpc.net/user/isac322\">isac322</a> <a href=\"https://www.acmicpc.net/user/Qwaz\">Qwaz</a></li>\n<li>문제의 오타를 찾은 사람: <a href=\"https://www.acmicpc.net/user/jh05013\">jh05013</a></li>\n<li>잘못된 데이터를 찾은 사람: <a href=\"https://www.acmicpc.net/user/tncks0121\">tncks0121</a></li>\n</ul>\n<h4 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h4><ul>\n<li>[다이나믹 프로그래밍](<a href=\"https://www.acmicpc.net/problem/tag/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9\">https://www.acmicpc.net/problem/tag/다이나믹</a> 프로그래밍)</li>\n<li><a href=\"https://www.acmicpc.net/problem/tag/%EC%88%98%ED%95%99\">수학</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><h4 id=\"틀린-풀이\"><a href=\"#틀린-풀이\" class=\"headerlink\" title=\"틀린 풀이\"></a>틀린 풀이</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>())</span><br><span class=\"line\">nums = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\"></span><br><span class=\"line\">max_num = <span class=\"number\">0</span></span><br><span class=\"line\">before = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> nums:</span><br><span class=\"line\">  <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">    total = before + num</span><br><span class=\"line\">    <span class=\"keyword\">if</span> total &gt; before <span class=\"keyword\">and</span> max_num &lt; total:</span><br><span class=\"line\">      max_num = total</span><br><span class=\"line\">      before = total</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">  nums.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">  before = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(max_num)</span><br></pre></td></tr></table></figure>\n<p>위 풀이는 컴파일러로 해봤을 때 동작은 되지만 문제의 <strong>시간 제한</strong>을 넘어서서 다른 블로그의 방법들을 찾아보고 이해해 보았다.</p>\n<h4 id=\"맞은-풀이\"><a href=\"#맞은-풀이\" class=\"headerlink\" title=\"맞은 풀이\"></a>맞은 풀이</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">nums = [<span class=\"number\">0</span>]</span><br><span class=\"line\">nums += <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 0번째 인덱스는 0으로 두기 위해 n+1 크기로 배열 생성</span></span><br><span class=\"line\">temp = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n+<span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">result = -<span class=\"number\">1001</span> <span class=\"comment\"># 최소 숫자가 -1000이기 때문</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>,n+<span class=\"number\">1</span>):</span><br><span class=\"line\">    temp[i] = <span class=\"built_in\">max</span>(temp[i-<span class=\"number\">1</span>]+nums[i], nums[i])</span><br><span class=\"line\">    result = <span class=\"built_in\">max</span>(result, temp[i])</span><br><span class=\"line\">    </span><br><span class=\"line\">print(result)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"런타임-에러-해결\"><a href=\"#런타임-에러-해결\" class=\"headerlink\" title=\"런타임 에러 해결\"></a>런타임 에러 해결</h5><p>위에 코드에서 n = map(int, input()) 로 했을 때엔 런타임 에러가 떴는데,  n = int(input()) 으로 바꾸니까 런타임에러가 해결됐다 ..(?)</p>\n<h5 id=\"풀이방법\"><a href=\"#풀이방법\" class=\"headerlink\" title=\"풀이방법\"></a>풀이방법</h5><ul>\n<li>이전 값을 사용해야 하기 때문에 temp, nums 배열 모두 0번째 인덱스는 0으로 두었다. </li>\n<li>이전까지 더해온 값들에 현재값을 더한값과(temp[i-1]+nums[i]) 현재값(nums[i]) 중 더 큰 값을 temp 배열에 저장한다.</li>\n<li>이전 temp 값들과 temp[i]를 비교하여 더 큰 값을 result로 지정한다.</li>\n</ul>\n"},{"title":"[백준알고리즘] 2178번: 미로 탐색- 파이썬(python)","date":"2020-03-23T12:00:00.000Z","_content":"\n# 문제\n\nN×M크기의 배열로 표현되는 미로가 있다.\n\n| 1    | 0    | 1    | 1    | 1    | 1    |\n| ---- | ---- | ---- | ---- | ---- | ---- |\n| 1    | 0    | 1    | 0    | 1    | 0    |\n| 1    | 0    | 1    | 0    | 1    | 1    |\n| 1    | 1    | 1    | 0    | 1    | 1    |\n\n미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.\n\n위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.\n\n## 입력\n\n첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 **붙어서** 입력으로 주어진다.\n\n## 출력\n\n첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.\n\n#### 예제 입력 1\n\n```\n4 6\n101111\n101010\n101011\n111011\n```\n\n#### 예제 출력 1\n\n```\n15\n```\n\n#### 예제 입력 2\n\n```\n4 6\n110110\n110110\n111111\n111101\n```\n\n#### 예제 출력 2\n\n```\n9\n```\n\n#### 예제 입력 3\n\n```\n2 25\n1011101110111011101110111\n1110111011101110111011101\n```\n\n#### 예제 출력 3\n\n```\n38\n```\n\n#### 예제 입력 4\n\n```\n7 7\n1011111\n1110001\n1000001\n1000001\n1000001\n1000001\n1111111\n```\n\n#### 예제 출력 4\n\n```\n13\n```\n\n\n\n# 풀이\n\n```python\ndef main():\n    n, m = map(int, input().split())\n    data = []\n    for _ in range(n):\n        data.append(list(map(int, str(input()))))\n    distance = [[0 for _ in range(m)] for _ in range(n)]\n    distance[0][0] = 1\n    queue = [[0,0]]\n    foot_prints = []\n\n    while queue:\n        [i, j] = queue.pop(0)\n        foot_prints.append([i,j])\n    \n        if j > 0 and data[i][j-1] == 1 and [i,j-1] not in foot_prints and [i,j-1] not in queue:\n            queue.append([i,j-1])\n            distance[i][j-1] = distance[i][j] + 1\n        if j < m-1 and data[i][j+1] == 1 and [i,j+1] not in foot_prints and [i,j+1] not in queue:\n            queue.append([i,j+1])\n            distance[i][j+1] = distance[i][j] + 1\n        if i > 0 and data[i-1][j] == 1 and [i-1,j] not in foot_prints and [i-1,j] not in queue:\n            queue.append([i-1,j])\n            distance[i-1][j] = distance[i][j] + 1\n        if i < n-1 and data[i+1][j] == 1 and [i+1,j] not in foot_prints and [i+1,j] not in queue:\n            queue.append([i+1,j])    \n            distance[i+1][j] = distance[i][j] + 1\n\n    return distance[n-1][m-1]\n    \nprint(main())\n```\n\n\n\n큐를 이용한 bfs를 통해 문제 풀이를 하였다.\n\n\n\n(출처)[https://claude-u.tistory.com/212]","source":"_posts/backjoon-2178.md","raw":"---\ntitle: \"[백준알고리즘] 2178번: 미로 탐색- 파이썬(python)\"\ndate: 2020-03-23 21:00:00\ntags: 알고리즘\n---\n\n# 문제\n\nN×M크기의 배열로 표현되는 미로가 있다.\n\n| 1    | 0    | 1    | 1    | 1    | 1    |\n| ---- | ---- | ---- | ---- | ---- | ---- |\n| 1    | 0    | 1    | 0    | 1    | 0    |\n| 1    | 0    | 1    | 0    | 1    | 1    |\n| 1    | 1    | 1    | 0    | 1    | 1    |\n\n미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.\n\n위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.\n\n## 입력\n\n첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 **붙어서** 입력으로 주어진다.\n\n## 출력\n\n첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.\n\n#### 예제 입력 1\n\n```\n4 6\n101111\n101010\n101011\n111011\n```\n\n#### 예제 출력 1\n\n```\n15\n```\n\n#### 예제 입력 2\n\n```\n4 6\n110110\n110110\n111111\n111101\n```\n\n#### 예제 출력 2\n\n```\n9\n```\n\n#### 예제 입력 3\n\n```\n2 25\n1011101110111011101110111\n1110111011101110111011101\n```\n\n#### 예제 출력 3\n\n```\n38\n```\n\n#### 예제 입력 4\n\n```\n7 7\n1011111\n1110001\n1000001\n1000001\n1000001\n1000001\n1111111\n```\n\n#### 예제 출력 4\n\n```\n13\n```\n\n\n\n# 풀이\n\n```python\ndef main():\n    n, m = map(int, input().split())\n    data = []\n    for _ in range(n):\n        data.append(list(map(int, str(input()))))\n    distance = [[0 for _ in range(m)] for _ in range(n)]\n    distance[0][0] = 1\n    queue = [[0,0]]\n    foot_prints = []\n\n    while queue:\n        [i, j] = queue.pop(0)\n        foot_prints.append([i,j])\n    \n        if j > 0 and data[i][j-1] == 1 and [i,j-1] not in foot_prints and [i,j-1] not in queue:\n            queue.append([i,j-1])\n            distance[i][j-1] = distance[i][j] + 1\n        if j < m-1 and data[i][j+1] == 1 and [i,j+1] not in foot_prints and [i,j+1] not in queue:\n            queue.append([i,j+1])\n            distance[i][j+1] = distance[i][j] + 1\n        if i > 0 and data[i-1][j] == 1 and [i-1,j] not in foot_prints and [i-1,j] not in queue:\n            queue.append([i-1,j])\n            distance[i-1][j] = distance[i][j] + 1\n        if i < n-1 and data[i+1][j] == 1 and [i+1,j] not in foot_prints and [i+1,j] not in queue:\n            queue.append([i+1,j])    \n            distance[i+1][j] = distance[i][j] + 1\n\n    return distance[n-1][m-1]\n    \nprint(main())\n```\n\n\n\n큐를 이용한 bfs를 통해 문제 풀이를 하였다.\n\n\n\n(출처)[https://claude-u.tistory.com/212]","slug":"backjoon-2178","published":1,"updated":"2021-02-08T18:25:12.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jy001af9c9gbbq0u6c","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>N×M크기의 배열로 표현되는 미로가 있다.</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>0</th>\n<th>1</th>\n<th>1</th>\n<th>1</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.</p>\n<p>위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 <strong>붙어서</strong> 입력으로 주어진다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.</p>\n<h4 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 6</span><br><span class=\"line\">101111</span><br><span class=\"line\">101010</span><br><span class=\"line\">101011</span><br><span class=\"line\">111011</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 6</span><br><span class=\"line\">110110</span><br><span class=\"line\">110110</span><br><span class=\"line\">111111</span><br><span class=\"line\">111101</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 25</span><br><span class=\"line\">1011101110111011101110111</span><br><span class=\"line\">1110111011101110111011101</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">38</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-4\"><a href=\"#예제-입력-4\" class=\"headerlink\" title=\"예제 입력 4\"></a>예제 입력 4</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7 7</span><br><span class=\"line\">1011111</span><br><span class=\"line\">1110001</span><br><span class=\"line\">1000001</span><br><span class=\"line\">1000001</span><br><span class=\"line\">1000001</span><br><span class=\"line\">1000001</span><br><span class=\"line\">1111111</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-4\"><a href=\"#예제-출력-4\" class=\"headerlink\" title=\"예제 출력 4\"></a>예제 출력 4</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    n, m = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">    data = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        data.append(<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>()))))</span><br><span class=\"line\">    distance = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    distance[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    queue = [[<span class=\"number\">0</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">    foot_prints = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        [i, j] = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        foot_prints.append([i,j])</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> data[i][j-<span class=\"number\">1</span>] == <span class=\"number\">1</span> <span class=\"keyword\">and</span> [i,j-<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [i,j-<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">            queue.append([i,j-<span class=\"number\">1</span>])</span><br><span class=\"line\">            distance[i][j-<span class=\"number\">1</span>] = distance[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &lt; m-<span class=\"number\">1</span> <span class=\"keyword\">and</span> data[i][j+<span class=\"number\">1</span>] == <span class=\"number\">1</span> <span class=\"keyword\">and</span> [i,j+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [i,j+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">            queue.append([i,j+<span class=\"number\">1</span>])</span><br><span class=\"line\">            distance[i][j+<span class=\"number\">1</span>] = distance[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> data[i-<span class=\"number\">1</span>][j] == <span class=\"number\">1</span> <span class=\"keyword\">and</span> [i-<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [i-<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">            queue.append([i-<span class=\"number\">1</span>,j])</span><br><span class=\"line\">            distance[i-<span class=\"number\">1</span>][j] = distance[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt; n-<span class=\"number\">1</span> <span class=\"keyword\">and</span> data[i+<span class=\"number\">1</span>][j] == <span class=\"number\">1</span> <span class=\"keyword\">and</span> [i+<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [i+<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">            queue.append([i+<span class=\"number\">1</span>,j])    </span><br><span class=\"line\">            distance[i+<span class=\"number\">1</span>][j] = distance[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> distance[n-<span class=\"number\">1</span>][m-<span class=\"number\">1</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">print(main())</span><br></pre></td></tr></table></figure>\n\n\n<p>큐를 이용한 bfs를 통해 문제 풀이를 하였다.</p>\n<p>(출처)[<a href=\"https://claude-u.tistory.com/212]\">https://claude-u.tistory.com/212]</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>N×M크기의 배열로 표현되는 미로가 있다.</p>\n<table>\n<thead>\n<tr>\n<th>1</th>\n<th>0</th>\n<th>1</th>\n<th>1</th>\n<th>1</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n</tr>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>0</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.</p>\n<p>위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 <strong>붙어서</strong> 입력으로 주어진다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.</p>\n<h4 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 6</span><br><span class=\"line\">101111</span><br><span class=\"line\">101010</span><br><span class=\"line\">101011</span><br><span class=\"line\">111011</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 6</span><br><span class=\"line\">110110</span><br><span class=\"line\">110110</span><br><span class=\"line\">111111</span><br><span class=\"line\">111101</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">9</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-3\"><a href=\"#예제-입력-3\" class=\"headerlink\" title=\"예제 입력 3\"></a>예제 입력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 25</span><br><span class=\"line\">1011101110111011101110111</span><br><span class=\"line\">1110111011101110111011101</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-3\"><a href=\"#예제-출력-3\" class=\"headerlink\" title=\"예제 출력 3\"></a>예제 출력 3</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">38</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-입력-4\"><a href=\"#예제-입력-4\" class=\"headerlink\" title=\"예제 입력 4\"></a>예제 입력 4</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7 7</span><br><span class=\"line\">1011111</span><br><span class=\"line\">1110001</span><br><span class=\"line\">1000001</span><br><span class=\"line\">1000001</span><br><span class=\"line\">1000001</span><br><span class=\"line\">1000001</span><br><span class=\"line\">1111111</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-4\"><a href=\"#예제-출력-4\" class=\"headerlink\" title=\"예제 출력 4\"></a>예제 출력 4</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">13</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">main</span>():</span></span><br><span class=\"line\">    n, m = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">    data = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        data.append(<span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>()))))</span><br><span class=\"line\">    distance = [[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(m)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    distance[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">    queue = [[<span class=\"number\">0</span>,<span class=\"number\">0</span>]]</span><br><span class=\"line\">    foot_prints = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        [i, j] = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        foot_prints.append([i,j])</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> data[i][j-<span class=\"number\">1</span>] == <span class=\"number\">1</span> <span class=\"keyword\">and</span> [i,j-<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [i,j-<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">            queue.append([i,j-<span class=\"number\">1</span>])</span><br><span class=\"line\">            distance[i][j-<span class=\"number\">1</span>] = distance[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j &lt; m-<span class=\"number\">1</span> <span class=\"keyword\">and</span> data[i][j+<span class=\"number\">1</span>] == <span class=\"number\">1</span> <span class=\"keyword\">and</span> [i,j+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [i,j+<span class=\"number\">1</span>] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">            queue.append([i,j+<span class=\"number\">1</span>])</span><br><span class=\"line\">            distance[i][j+<span class=\"number\">1</span>] = distance[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> data[i-<span class=\"number\">1</span>][j] == <span class=\"number\">1</span> <span class=\"keyword\">and</span> [i-<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [i-<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">            queue.append([i-<span class=\"number\">1</span>,j])</span><br><span class=\"line\">            distance[i-<span class=\"number\">1</span>][j] = distance[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt; n-<span class=\"number\">1</span> <span class=\"keyword\">and</span> data[i+<span class=\"number\">1</span>][j] == <span class=\"number\">1</span> <span class=\"keyword\">and</span> [i+<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints <span class=\"keyword\">and</span> [i+<span class=\"number\">1</span>,j] <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> queue:</span><br><span class=\"line\">            queue.append([i+<span class=\"number\">1</span>,j])    </span><br><span class=\"line\">            distance[i+<span class=\"number\">1</span>][j] = distance[i][j] + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> distance[n-<span class=\"number\">1</span>][m-<span class=\"number\">1</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">print(main())</span><br></pre></td></tr></table></figure>\n\n\n<p>큐를 이용한 bfs를 통해 문제 풀이를 하였다.</p>\n<p>(출처)[<a href=\"https://claude-u.tistory.com/212]\">https://claude-u.tistory.com/212]</a></p>\n"},{"title":"[알고리즘] 백준알고리즘 9251 - LCS (파이썬/python)","date":"2020-05-11T13:16:00.000Z","_content":"\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :--- | :-------- | :-------- |\n| 1 초      | 256 MB      | 20545 | 8389 | 6261      | 41.156%   |\n\nLCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.\n\n예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.\n\n## 입력\n\n첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.\n\n## 출력\n\n첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를 출력한다.\n\n## 예제 입력 1\n\n```\nACAYKP\nCAPCAK\n```\n\n## 예제 출력 1\n\n```\n4\n```\n\n## 출처\n\n- 문제를 만든 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)\n- 데이터를 추가한 사람: [qpwoeiruty](https://www.acmicpc.net/user/qpwoeiruty)\n\n## 알고리즘 분류\n\n- [다이나믹 프로그래밍](https://www.acmicpc.net/problem/tag/다이나믹 프로그래밍)\n\n# 풀이\n\n**LCS(Longest Common Subsequence)** 는 문제에 나왔듯이 최장 공통 부분 수열을 뜻하며, \n\n**LCS(Longest Common Substring, 최장 공통 부분 문자열)**과 헷갈릴 수 있다.\n\n공통 부분 문자열은 두 문자열이 가지는 공통적인 문자열 중 끊기지않고 연속적인 부분을 의미하고,\n\n공통 부분 수열은 두 문자열이 가지는 공통적인 문자열이 끊기더라도 순서가 맞으면 LCS로 인정하는 것을 의미한다.\n\n\n\n**ABCDHEF** / **BCDEF** 두 문자열이 존재할 때\n\n최장 공통 부분 문자열은 BCD , 최장 공통 부분 수열은 BCDEF이다.\n\n\n\n### 코드\n\n```python\nn = list(str(input()))\nm = list(str(input()))\n\nlcs_list =[[0 for _ in range(len(n) + 1)] for _ in range(len(m) + 1)]\nanswer = 0\n\nfor i in range(len(n)):\n    for j in range(len(m)):\n        if n[i] ==m[j]:\n            lcs_list[j+1][i+1] = lcs_list[j][i] + 1\n        else:\n            lcs_list[j+1][i+1] = max(lcs_list[j][i+1],lcs_list[j+1][i])\n            \nprint(lcs_list[-1][-1])\n```\n\n\n\n아래의 표를 만들어가는 코드이다. \n\n이 문제는 길이만 출력하면 되기 때문에 lcs_list 의 마지막(맨 오른쪽 아래) 값을 출력한다.\n\n\n\n​\t   A C A Y K P\n\n​\t0 0 0 0 0 0 0 \n\nC  0 0 1 1 1 1 1 \n\nA  0 **1** 1 2 2 2 2 \n\nP  0 1 1 2 2 2 3 \n\nC  0 1 **2** 2 2 2 3\n\nA  0 1 2 **3** 3 3 3 \n\nK  0 1 2 3 3 **4** 4\n\n\n\n여기서 LCS 는 **ACAK** 가 된다. \n\n","source":"_posts/backjoon-9251.md","raw":"---\ntitle: \"[알고리즘] 백준알고리즘 9251 - LCS (파이썬/python)\"\ndate: 2020-05-11 22:16:00\ntags: 알고리즘\n---\n\n# 문제\n\n| 시간 제한 | 메모리 제한 | 제출  | 정답 | 맞은 사람 | 정답 비율 |\n| :-------- | :---------- | :---- | :--- | :-------- | :-------- |\n| 1 초      | 256 MB      | 20545 | 8389 | 6261      | 41.156%   |\n\nLCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.\n\n예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.\n\n## 입력\n\n첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.\n\n## 출력\n\n첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를 출력한다.\n\n## 예제 입력 1\n\n```\nACAYKP\nCAPCAK\n```\n\n## 예제 출력 1\n\n```\n4\n```\n\n## 출처\n\n- 문제를 만든 사람: [baekjoon](https://www.acmicpc.net/user/baekjoon)\n- 데이터를 추가한 사람: [qpwoeiruty](https://www.acmicpc.net/user/qpwoeiruty)\n\n## 알고리즘 분류\n\n- [다이나믹 프로그래밍](https://www.acmicpc.net/problem/tag/다이나믹 프로그래밍)\n\n# 풀이\n\n**LCS(Longest Common Subsequence)** 는 문제에 나왔듯이 최장 공통 부분 수열을 뜻하며, \n\n**LCS(Longest Common Substring, 최장 공통 부분 문자열)**과 헷갈릴 수 있다.\n\n공통 부분 문자열은 두 문자열이 가지는 공통적인 문자열 중 끊기지않고 연속적인 부분을 의미하고,\n\n공통 부분 수열은 두 문자열이 가지는 공통적인 문자열이 끊기더라도 순서가 맞으면 LCS로 인정하는 것을 의미한다.\n\n\n\n**ABCDHEF** / **BCDEF** 두 문자열이 존재할 때\n\n최장 공통 부분 문자열은 BCD , 최장 공통 부분 수열은 BCDEF이다.\n\n\n\n### 코드\n\n```python\nn = list(str(input()))\nm = list(str(input()))\n\nlcs_list =[[0 for _ in range(len(n) + 1)] for _ in range(len(m) + 1)]\nanswer = 0\n\nfor i in range(len(n)):\n    for j in range(len(m)):\n        if n[i] ==m[j]:\n            lcs_list[j+1][i+1] = lcs_list[j][i] + 1\n        else:\n            lcs_list[j+1][i+1] = max(lcs_list[j][i+1],lcs_list[j+1][i])\n            \nprint(lcs_list[-1][-1])\n```\n\n\n\n아래의 표를 만들어가는 코드이다. \n\n이 문제는 길이만 출력하면 되기 때문에 lcs_list 의 마지막(맨 오른쪽 아래) 값을 출력한다.\n\n\n\n​\t   A C A Y K P\n\n​\t0 0 0 0 0 0 0 \n\nC  0 0 1 1 1 1 1 \n\nA  0 **1** 1 2 2 2 2 \n\nP  0 1 1 2 2 2 3 \n\nC  0 1 **2** 2 2 2 3\n\nA  0 1 2 **3** 3 3 3 \n\nK  0 1 2 3 3 **4** 4\n\n\n\n여기서 LCS 는 **ACAK** 가 된다. \n\n","slug":"backjoon-9251","published":1,"updated":"2021-02-08T18:25:07.687Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jy001bf9c9dt25bm28","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">256 MB</td>\n<td align=\"left\">20545</td>\n<td align=\"left\">8389</td>\n<td align=\"left\">6261</td>\n<td align=\"left\">41.156%</td>\n</tr>\n</tbody></table>\n<p>LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.</p>\n<p>예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를 출력한다.</p>\n<h2 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACAYKP</span><br><span class=\"line\">CAPCAK</span><br></pre></td></tr></table></figure>\n<h2 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<h2 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h2><ul>\n<li>문제를 만든 사람: <a href=\"https://www.acmicpc.net/user/baekjoon\">baekjoon</a></li>\n<li>데이터를 추가한 사람: <a href=\"https://www.acmicpc.net/user/qpwoeiruty\">qpwoeiruty</a></li>\n</ul>\n<h2 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h2><ul>\n<li>[다이나믹 프로그래밍](<a href=\"https://www.acmicpc.net/problem/tag/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9\">https://www.acmicpc.net/problem/tag/다이나믹</a> 프로그래밍)</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p><strong>LCS(Longest Common Subsequence)</strong> 는 문제에 나왔듯이 최장 공통 부분 수열을 뜻하며, </p>\n<p>**LCS(Longest Common Substring, 최장 공통 부분 문자열)**과 헷갈릴 수 있다.</p>\n<p>공통 부분 문자열은 두 문자열이 가지는 공통적인 문자열 중 끊기지않고 연속적인 부분을 의미하고,</p>\n<p>공통 부분 수열은 두 문자열이 가지는 공통적인 문자열이 끊기더라도 순서가 맞으면 LCS로 인정하는 것을 의미한다.</p>\n<p><strong>ABCDHEF</strong> / <strong>BCDEF</strong> 두 문자열이 존재할 때</p>\n<p>최장 공통 부분 문자열은 BCD , 최장 공통 부분 수열은 BCDEF이다.</p>\n<h3 id=\"코드\"><a href=\"#코드\" class=\"headerlink\" title=\"코드\"></a>코드</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">list</span>(<span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>()))</span><br><span class=\"line\">m = <span class=\"built_in\">list</span>(<span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>()))</span><br><span class=\"line\"></span><br><span class=\"line\">lcs_list =[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(n) + <span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(m) + <span class=\"number\">1</span>)]</span><br><span class=\"line\">answer = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(n)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(m)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n[i] ==m[j]:</span><br><span class=\"line\">            lcs_list[j+<span class=\"number\">1</span>][i+<span class=\"number\">1</span>] = lcs_list[j][i] + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            lcs_list[j+<span class=\"number\">1</span>][i+<span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(lcs_list[j][i+<span class=\"number\">1</span>],lcs_list[j+<span class=\"number\">1</span>][i])</span><br><span class=\"line\">            </span><br><span class=\"line\">print(lcs_list[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n\n\n<p>아래의 표를 만들어가는 코드이다. </p>\n<p>이 문제는 길이만 출력하면 되기 때문에 lcs_list 의 마지막(맨 오른쪽 아래) 값을 출력한다.</p>\n<p>​       A C A Y K P</p>\n<p>​    0 0 0 0 0 0 0 </p>\n<p>C  0 0 1 1 1 1 1 </p>\n<p>A  0 <strong>1</strong> 1 2 2 2 2 </p>\n<p>P  0 1 1 2 2 2 3 </p>\n<p>C  0 1 <strong>2</strong> 2 2 2 3</p>\n<p>A  0 1 2 <strong>3</strong> 3 3 3 </p>\n<p>K  0 1 2 3 3 <strong>4</strong> 4</p>\n<p>여기서 LCS 는 <strong>ACAK</strong> 가 된다. </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><table>\n<thead>\n<tr>\n<th align=\"left\">시간 제한</th>\n<th align=\"left\">메모리 제한</th>\n<th align=\"left\">제출</th>\n<th align=\"left\">정답</th>\n<th align=\"left\">맞은 사람</th>\n<th align=\"left\">정답 비율</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1 초</td>\n<td align=\"left\">256 MB</td>\n<td align=\"left\">20545</td>\n<td align=\"left\">8389</td>\n<td align=\"left\">6261</td>\n<td align=\"left\">41.156%</td>\n</tr>\n</tbody></table>\n<p>LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.</p>\n<p>예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를 출력한다.</p>\n<h2 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACAYKP</span><br><span class=\"line\">CAPCAK</span><br></pre></td></tr></table></figure>\n<h2 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<h2 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h2><ul>\n<li>문제를 만든 사람: <a href=\"https://www.acmicpc.net/user/baekjoon\">baekjoon</a></li>\n<li>데이터를 추가한 사람: <a href=\"https://www.acmicpc.net/user/qpwoeiruty\">qpwoeiruty</a></li>\n</ul>\n<h2 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h2><ul>\n<li>[다이나믹 프로그래밍](<a href=\"https://www.acmicpc.net/problem/tag/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9\">https://www.acmicpc.net/problem/tag/다이나믹</a> 프로그래밍)</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p><strong>LCS(Longest Common Subsequence)</strong> 는 문제에 나왔듯이 최장 공통 부분 수열을 뜻하며, </p>\n<p>**LCS(Longest Common Substring, 최장 공통 부분 문자열)**과 헷갈릴 수 있다.</p>\n<p>공통 부분 문자열은 두 문자열이 가지는 공통적인 문자열 중 끊기지않고 연속적인 부분을 의미하고,</p>\n<p>공통 부분 수열은 두 문자열이 가지는 공통적인 문자열이 끊기더라도 순서가 맞으면 LCS로 인정하는 것을 의미한다.</p>\n<p><strong>ABCDHEF</strong> / <strong>BCDEF</strong> 두 문자열이 존재할 때</p>\n<p>최장 공통 부분 문자열은 BCD , 최장 공통 부분 수열은 BCDEF이다.</p>\n<h3 id=\"코드\"><a href=\"#코드\" class=\"headerlink\" title=\"코드\"></a>코드</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">list</span>(<span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>()))</span><br><span class=\"line\">m = <span class=\"built_in\">list</span>(<span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>()))</span><br><span class=\"line\"></span><br><span class=\"line\">lcs_list =[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(n) + <span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(m) + <span class=\"number\">1</span>)]</span><br><span class=\"line\">answer = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(n)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(m)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n[i] ==m[j]:</span><br><span class=\"line\">            lcs_list[j+<span class=\"number\">1</span>][i+<span class=\"number\">1</span>] = lcs_list[j][i] + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            lcs_list[j+<span class=\"number\">1</span>][i+<span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(lcs_list[j][i+<span class=\"number\">1</span>],lcs_list[j+<span class=\"number\">1</span>][i])</span><br><span class=\"line\">            </span><br><span class=\"line\">print(lcs_list[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>])</span><br></pre></td></tr></table></figure>\n\n\n<p>아래의 표를 만들어가는 코드이다. </p>\n<p>이 문제는 길이만 출력하면 되기 때문에 lcs_list 의 마지막(맨 오른쪽 아래) 값을 출력한다.</p>\n<p>​       A C A Y K P</p>\n<p>​    0 0 0 0 0 0 0 </p>\n<p>C  0 0 1 1 1 1 1 </p>\n<p>A  0 <strong>1</strong> 1 2 2 2 2 </p>\n<p>P  0 1 1 2 2 2 3 </p>\n<p>C  0 1 <strong>2</strong> 2 2 2 3</p>\n<p>A  0 1 2 <strong>3</strong> 3 3 3 </p>\n<p>K  0 1 2 3 3 <strong>4</strong> 4</p>\n<p>여기서 LCS 는 <strong>ACAK</strong> 가 된다. </p>\n"},{"title":"[알고리즘] 백준알고리즘 - 9252 LCS2 (파이썬/python)","date":"2020-05-17T09:30:00.000Z","_content":"\n# 문제\n\nLCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.\n\n예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.\n\n## 입력\n\n첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.\n\n## 출력\n\n첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를, 둘째 줄에 LCS를 출력한다.\n\nLCS가 여러 가지인 경우에는 아무거나 출력하고, LCS의 길이가 0인 경우에는 둘째 줄을 출력하지 않는다.\n\n## 예제 입력 1\n\n```\nACAYKP\nCAPCAK\n```\n\n## 예제 출력 1\n\n```\n4\nACAK\n```\n\n## 알고리즘 분류\n\n- [다이나믹 프로그래밍](https://www.acmicpc.net/problem/tag/다이나믹 프로그래밍)\n\n\n\n# 풀이\n\n저번에 풀었던 LCS 문제는 길이만 출력을 했다면, LCS2는 LCS 값도 출력을 해야한다.\n\n### 코드\n\n```python\nn = input()\nm = input()\n\nstrings =[[0 for _ in range(len(n) + 1)] for _ in range(len(m) + 1)]\n\nfor i in range(len(n)):\n    for j in range(len(m)):\n        if n[i] ==m[j]:\n            strings[j+1][i+1] = strings[j][i] + 1\n        else:\n            strings[j+1][i+1] = max(strings[j][i+1],strings[j+1][i])\n\nnow = strings[-1][-1]\nx = len(strings[0]) -1\ny = len(strings) -1\nanswer = ''\n\nwhile now != 0:\n    if now -1 == strings[y][x-1] and now -1 == strings[y-1][x]:\n        answer = n[x-1] + answer\n        now -= 1\n        x -= 1\n        y -= 1\n    else:\n        if strings[y-1][x] > strings[y][x-1]:\n            y -= 1\n        else:\n            x -= 1\n\nprint(strings[-1][-1])\nprint(answer)\n```\n\n*strings 배열*\n\n​\t   A C A Y K P\n\n​\t0 0 0 0 0 0 0 \n\nC  0 0 1 1 1 1 1 \n\nA  0 **1** 1 2 2 2 2 \n\nP  0 1 1 2 2 2 3 \n\nC  0 1 **2** 2 2 2 3\n\nA  0 1 2 **3** 3 3 3 \n\nK  0 1 2 3 3 **4** 4\n\n\n\n위 배열의 맨 오른쪽 아래 `(strings[-1][-1])` 부터 돌면서 answer에 문자열을 더해가고, 값이 0 일 때 순회를 멈춘다.\n\n* 앞과 위의 값이 현재 값보다 -1 이면 대각선 위로 이동한다.\n* 그렇지 않다면 위의 값과 좌측 값 중\n  * 위의 값이 클 땐 위로 이동하고,\n  * 좌측값이 크다면  좌측으로 이동한다.\n* 이동할 때 answer에 현재 값을 저장한 후 이동한다.\n\n\n\n### 새로 배운점\n\n* `배열[-1][-1]` 은 맨 마지막 배열의 value를 의미한다 !","source":"_posts/backjoon-9252.md","raw":"---\ntitle: \"[알고리즘] 백준알고리즘 - 9252 LCS2 (파이썬/python)\"\ndate: 2020-05-17 18:30:00\ntags: 알고리즘\n---\n\n# 문제\n\nLCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.\n\n예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.\n\n## 입력\n\n첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.\n\n## 출력\n\n첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를, 둘째 줄에 LCS를 출력한다.\n\nLCS가 여러 가지인 경우에는 아무거나 출력하고, LCS의 길이가 0인 경우에는 둘째 줄을 출력하지 않는다.\n\n## 예제 입력 1\n\n```\nACAYKP\nCAPCAK\n```\n\n## 예제 출력 1\n\n```\n4\nACAK\n```\n\n## 알고리즘 분류\n\n- [다이나믹 프로그래밍](https://www.acmicpc.net/problem/tag/다이나믹 프로그래밍)\n\n\n\n# 풀이\n\n저번에 풀었던 LCS 문제는 길이만 출력을 했다면, LCS2는 LCS 값도 출력을 해야한다.\n\n### 코드\n\n```python\nn = input()\nm = input()\n\nstrings =[[0 for _ in range(len(n) + 1)] for _ in range(len(m) + 1)]\n\nfor i in range(len(n)):\n    for j in range(len(m)):\n        if n[i] ==m[j]:\n            strings[j+1][i+1] = strings[j][i] + 1\n        else:\n            strings[j+1][i+1] = max(strings[j][i+1],strings[j+1][i])\n\nnow = strings[-1][-1]\nx = len(strings[0]) -1\ny = len(strings) -1\nanswer = ''\n\nwhile now != 0:\n    if now -1 == strings[y][x-1] and now -1 == strings[y-1][x]:\n        answer = n[x-1] + answer\n        now -= 1\n        x -= 1\n        y -= 1\n    else:\n        if strings[y-1][x] > strings[y][x-1]:\n            y -= 1\n        else:\n            x -= 1\n\nprint(strings[-1][-1])\nprint(answer)\n```\n\n*strings 배열*\n\n​\t   A C A Y K P\n\n​\t0 0 0 0 0 0 0 \n\nC  0 0 1 1 1 1 1 \n\nA  0 **1** 1 2 2 2 2 \n\nP  0 1 1 2 2 2 3 \n\nC  0 1 **2** 2 2 2 3\n\nA  0 1 2 **3** 3 3 3 \n\nK  0 1 2 3 3 **4** 4\n\n\n\n위 배열의 맨 오른쪽 아래 `(strings[-1][-1])` 부터 돌면서 answer에 문자열을 더해가고, 값이 0 일 때 순회를 멈춘다.\n\n* 앞과 위의 값이 현재 값보다 -1 이면 대각선 위로 이동한다.\n* 그렇지 않다면 위의 값과 좌측 값 중\n  * 위의 값이 클 땐 위로 이동하고,\n  * 좌측값이 크다면  좌측으로 이동한다.\n* 이동할 때 answer에 현재 값을 저장한 후 이동한다.\n\n\n\n### 새로 배운점\n\n* `배열[-1][-1]` 은 맨 마지막 배열의 value를 의미한다 !","slug":"backjoon-9252","published":1,"updated":"2021-02-08T18:25:07.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0jz001ef9c92clnfcon","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.</p>\n<p>예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를, 둘째 줄에 LCS를 출력한다.</p>\n<p>LCS가 여러 가지인 경우에는 아무거나 출력하고, LCS의 길이가 0인 경우에는 둘째 줄을 출력하지 않는다.</p>\n<h2 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACAYKP</span><br><span class=\"line\">CAPCAK</span><br></pre></td></tr></table></figure>\n<h2 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">ACAK</span><br></pre></td></tr></table></figure>\n<h2 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h2><ul>\n<li>[다이나믹 프로그래밍](<a href=\"https://www.acmicpc.net/problem/tag/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9\">https://www.acmicpc.net/problem/tag/다이나믹</a> 프로그래밍)</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>저번에 풀었던 LCS 문제는 길이만 출력을 했다면, LCS2는 LCS 값도 출력을 해야한다.</p>\n<h3 id=\"코드\"><a href=\"#코드\" class=\"headerlink\" title=\"코드\"></a>코드</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">m = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">strings =[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(n) + <span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(m) + <span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(n)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(m)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n[i] ==m[j]:</span><br><span class=\"line\">            strings[j+<span class=\"number\">1</span>][i+<span class=\"number\">1</span>] = strings[j][i] + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            strings[j+<span class=\"number\">1</span>][i+<span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(strings[j][i+<span class=\"number\">1</span>],strings[j+<span class=\"number\">1</span>][i])</span><br><span class=\"line\"></span><br><span class=\"line\">now = strings[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>]</span><br><span class=\"line\">x = <span class=\"built_in\">len</span>(strings[<span class=\"number\">0</span>]) -<span class=\"number\">1</span></span><br><span class=\"line\">y = <span class=\"built_in\">len</span>(strings) -<span class=\"number\">1</span></span><br><span class=\"line\">answer = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> now != <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> now -<span class=\"number\">1</span> == strings[y][x-<span class=\"number\">1</span>] <span class=\"keyword\">and</span> now -<span class=\"number\">1</span> == strings[y-<span class=\"number\">1</span>][x]:</span><br><span class=\"line\">        answer = n[x-<span class=\"number\">1</span>] + answer</span><br><span class=\"line\">        now -= <span class=\"number\">1</span></span><br><span class=\"line\">        x -= <span class=\"number\">1</span></span><br><span class=\"line\">        y -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> strings[y-<span class=\"number\">1</span>][x] &gt; strings[y][x-<span class=\"number\">1</span>]:</span><br><span class=\"line\">            y -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            x -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(strings[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>])</span><br><span class=\"line\">print(answer)</span><br></pre></td></tr></table></figure>\n<p><em>strings 배열</em></p>\n<p>​       A C A Y K P</p>\n<p>​    0 0 0 0 0 0 0 </p>\n<p>C  0 0 1 1 1 1 1 </p>\n<p>A  0 <strong>1</strong> 1 2 2 2 2 </p>\n<p>P  0 1 1 2 2 2 3 </p>\n<p>C  0 1 <strong>2</strong> 2 2 2 3</p>\n<p>A  0 1 2 <strong>3</strong> 3 3 3 </p>\n<p>K  0 1 2 3 3 <strong>4</strong> 4</p>\n<p>위 배열의 맨 오른쪽 아래 <code>(strings[-1][-1])</code> 부터 돌면서 answer에 문자열을 더해가고, 값이 0 일 때 순회를 멈춘다.</p>\n<ul>\n<li>앞과 위의 값이 현재 값보다 -1 이면 대각선 위로 이동한다.</li>\n<li>그렇지 않다면 위의 값과 좌측 값 중<ul>\n<li>위의 값이 클 땐 위로 이동하고,</li>\n<li>좌측값이 크다면  좌측으로 이동한다.</li>\n</ul>\n</li>\n<li>이동할 때 answer에 현재 값을 저장한 후 이동한다.</li>\n</ul>\n<h3 id=\"새로-배운점\"><a href=\"#새로-배운점\" class=\"headerlink\" title=\"새로 배운점\"></a>새로 배운점</h3><ul>\n<li><code>배열[-1][-1]</code> 은 맨 마지막 배열의 value를 의미한다 !</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.</p>\n<p>예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를, 둘째 줄에 LCS를 출력한다.</p>\n<p>LCS가 여러 가지인 경우에는 아무거나 출력하고, LCS의 길이가 0인 경우에는 둘째 줄을 출력하지 않는다.</p>\n<h2 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ACAYKP</span><br><span class=\"line\">CAPCAK</span><br></pre></td></tr></table></figure>\n<h2 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4</span><br><span class=\"line\">ACAK</span><br></pre></td></tr></table></figure>\n<h2 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h2><ul>\n<li>[다이나믹 프로그래밍](<a href=\"https://www.acmicpc.net/problem/tag/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9\">https://www.acmicpc.net/problem/tag/다이나믹</a> 프로그래밍)</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>저번에 풀었던 LCS 문제는 길이만 출력을 했다면, LCS2는 LCS 값도 출력을 해야한다.</p>\n<h3 id=\"코드\"><a href=\"#코드\" class=\"headerlink\" title=\"코드\"></a>코드</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">m = <span class=\"built_in\">input</span>()</span><br><span class=\"line\"></span><br><span class=\"line\">strings =[[<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(n) + <span class=\"number\">1</span>)] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(m) + <span class=\"number\">1</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(n)):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(m)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> n[i] ==m[j]:</span><br><span class=\"line\">            strings[j+<span class=\"number\">1</span>][i+<span class=\"number\">1</span>] = strings[j][i] + <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            strings[j+<span class=\"number\">1</span>][i+<span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(strings[j][i+<span class=\"number\">1</span>],strings[j+<span class=\"number\">1</span>][i])</span><br><span class=\"line\"></span><br><span class=\"line\">now = strings[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>]</span><br><span class=\"line\">x = <span class=\"built_in\">len</span>(strings[<span class=\"number\">0</span>]) -<span class=\"number\">1</span></span><br><span class=\"line\">y = <span class=\"built_in\">len</span>(strings) -<span class=\"number\">1</span></span><br><span class=\"line\">answer = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> now != <span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> now -<span class=\"number\">1</span> == strings[y][x-<span class=\"number\">1</span>] <span class=\"keyword\">and</span> now -<span class=\"number\">1</span> == strings[y-<span class=\"number\">1</span>][x]:</span><br><span class=\"line\">        answer = n[x-<span class=\"number\">1</span>] + answer</span><br><span class=\"line\">        now -= <span class=\"number\">1</span></span><br><span class=\"line\">        x -= <span class=\"number\">1</span></span><br><span class=\"line\">        y -= <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> strings[y-<span class=\"number\">1</span>][x] &gt; strings[y][x-<span class=\"number\">1</span>]:</span><br><span class=\"line\">            y -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            x -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(strings[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>])</span><br><span class=\"line\">print(answer)</span><br></pre></td></tr></table></figure>\n<p><em>strings 배열</em></p>\n<p>​       A C A Y K P</p>\n<p>​    0 0 0 0 0 0 0 </p>\n<p>C  0 0 1 1 1 1 1 </p>\n<p>A  0 <strong>1</strong> 1 2 2 2 2 </p>\n<p>P  0 1 1 2 2 2 3 </p>\n<p>C  0 1 <strong>2</strong> 2 2 2 3</p>\n<p>A  0 1 2 <strong>3</strong> 3 3 3 </p>\n<p>K  0 1 2 3 3 <strong>4</strong> 4</p>\n<p>위 배열의 맨 오른쪽 아래 <code>(strings[-1][-1])</code> 부터 돌면서 answer에 문자열을 더해가고, 값이 0 일 때 순회를 멈춘다.</p>\n<ul>\n<li>앞과 위의 값이 현재 값보다 -1 이면 대각선 위로 이동한다.</li>\n<li>그렇지 않다면 위의 값과 좌측 값 중<ul>\n<li>위의 값이 클 땐 위로 이동하고,</li>\n<li>좌측값이 크다면  좌측으로 이동한다.</li>\n</ul>\n</li>\n<li>이동할 때 answer에 현재 값을 저장한 후 이동한다.</li>\n</ul>\n<h3 id=\"새로-배운점\"><a href=\"#새로-배운점\" class=\"headerlink\" title=\"새로 배운점\"></a>새로 배운점</h3><ul>\n<li><code>배열[-1][-1]</code> 은 맨 마지막 배열의 value를 의미한다 !</li>\n</ul>\n"},{"title":"[알고리즘] 백준알고리즘(boj) - 9372: 상근이의 여행 (파이썬/python)","date":"2020-08-10T17:37:00.000Z","_content":"\n# 문제\n\n상근이는 겨울방학을 맞아 N개국을 여행하면서 자아를 찾기로 마음먹었다. \n\n하지만 상근이는 새로운 비행기를 무서워하기 때문에, 최대한 적은 종류의 비행기를 타고 국가들을 이동하려고 한다.\n\n이번 방학 동안의 비행 스케줄이 주어졌을 때, 상근이가 **가장 적은 종류**의 비행기를 타고 모든 국가들을 여행할 수 있도록 도와주자.\n\n상근이가 한 국가에서 다른 국가로 이동할 때 다른 국가를 거쳐 가도(심지어 이미 방문한 국가라도) 된다.\n\n## 입력\n\n첫 번째 줄에는 테스트 케이스의 수 T(T ≤ 100)가 주어지고,\n\n각 테스트 케이스마다 다음과 같은 정보가 주어진다.\n\n- 첫 번째 줄에는 국가의 수 N(2 ≤ N ≤ 1 000)과 비행기의 종류 M(1 ≤ M ≤ 10 000) 가 주어진다.\n- 이후 M개의 줄에 a와 b 쌍들이 입력된다. a와 b를 왕복하는 비행기가 있다는 것을 의미한다. (1 ≤ a, b ≤ n; a ≠ b) \n- 주어지는 비행 스케줄은 항상 연결 그래프를 이룬다.\n\n## 출력\n\n테스트 케이스마다 한 줄을 출력한다.\n\n- 상근이가 모든 국가를 여행하기 위해 타야 하는 비행기 종류의 최소 개수를 출력한다.\n\n#### 예제 입력 1\n\n```\n2\n3 3\n1 2\n2 3\n1 3\n5 4\n2 1\n2 3\n4 3\n4 5\n```\n\n#### 예제 출력 1\n\n```\n2\n4\n```\n\n#### 출처\n\n[ICPC ](https://www.acmicpc.net/category/1)> [Regionals ](https://www.acmicpc.net/category/7)> [Europe ](https://www.acmicpc.net/category/10)> [Northwestern European Regional Contest ](https://www.acmicpc.net/category/15)> [Benelux Algorithm Programming Contest ](https://www.acmicpc.net/category/89)> [BAPC 2013](https://www.acmicpc.net/category/detail/1160) F번\n\n- 문제의 오타를 찾은 사람: [rhksdlr134](https://www.acmicpc.net/user/rhksdlr134) [vl0612](https://www.acmicpc.net/user/vl0612)\n- 문제를 번역한 사람: [WeissBlume](https://www.acmicpc.net/user/WeissBlume)\n\n## 알고리즘 분류\n\n- [최소 스패닝 트리](https://www.acmicpc.net/problem/tag/최소 스패닝 트리)\n- [BFS](https://www.acmicpc.net/problem/tag/BFS)\n\n\n\n# 풀이\n\n```python\nimport sys\ninput = sys.stdin.readline\n\ndef bfs(start):\n    queue = [start]\n    foot_prints = [start]\n    answer = 0\n    while queue:\n        start = queue.pop(0)\n        for i in range(len(airplane[start])):\n            if airplane[start][i] and i not in foot_prints:\n                queue.append(i)\n                foot_prints.append(i)\n                answer += 1\n    return answer\n\nT = int(input())\nwhile T:\n    N , M = map(int,input().split())\n    airplane = [[0] * (N+1) for _ in range(N+1)]\n    for _ in range(M):\n        a, b = map(int,input().split())\n        airplane[a][b] = 1\n        airplane[b][a] = 1\n    print(bfs(1))\n    T -= 1\n```\n\n\n\n이번 문제는 입력을 받아오는 방법이 새로웠다.\n\n1. 테스트 케이스의 개수를 T로 받아오고, **T** 개의 테스트 케이스 라인들을 받아오기 위해 **while 문**을 이용한다. \n\n2. 국가마다 이어지는 것이기 때문에 **배열(airplane) 은  N+1 * N+1 의 크기로** 생성한다. (N: 국가의 수) \n   - N+1 의 크기를 이용하는 이유 : BFS 탐색 노드를 출력하는 문제의 경우, 인덱스와 노드의 숫자가 일치하도록 배열을 생성하면  print할 때나 사용할 때 이해하기 편하다고 생각해서 !\n\n3. 이후 M개의 줄에 a b 쌍이 입력되기 때문에 **for문은 M만큼** 돌며 a b를 받아온다.\n\n4. a와 b를 왕복하는 비행기가 있다는 것은 a국가와 b국가 사이에 **간선**이 있다는 것이다. 1로 표현한다.\n\n   ```python\n   airplane[a][b] = 1\n   airplane[b][a] = 1\n   ```\n\n5. 배열을 완성한 후 **BFS**를 실행한다. (시작 노드는 1)\n\n\n\n사실 비행기들은 모든 국가를 들릴 수 있도록 이어져 있기 때문에 타야 하는 **비행기 종류의 최소 개수**는 **N-1**(국가의 수-1) 이다. \n\n하지만 BFS 구현 코드를 다시 떠올릴 겸 BFS를 이용하여 풀어보았다. \n\n* 들린 국가의 수 출력이 아닌 비행기 종류의 개수 출력이기 때문에 국가를 이동할 때마다 answer에 1을 더하여 탄 비행기 종류 개수를 반환한다. \n\n\n\n아래 코드를 추가하니 시간 초과 문제가 해결되었다.\n\n```python\nimport sys\ninput = sys.stdin.readline\n```\n\n\n\n","source":"_posts/backjoon-9372.md","raw":"---\ntitle: \"[알고리즘] 백준알고리즘(boj) - 9372: 상근이의 여행 (파이썬/python)\"\ndate: 2020-08-11 02:37:00\ntags: 알고리즘\n---\n\n# 문제\n\n상근이는 겨울방학을 맞아 N개국을 여행하면서 자아를 찾기로 마음먹었다. \n\n하지만 상근이는 새로운 비행기를 무서워하기 때문에, 최대한 적은 종류의 비행기를 타고 국가들을 이동하려고 한다.\n\n이번 방학 동안의 비행 스케줄이 주어졌을 때, 상근이가 **가장 적은 종류**의 비행기를 타고 모든 국가들을 여행할 수 있도록 도와주자.\n\n상근이가 한 국가에서 다른 국가로 이동할 때 다른 국가를 거쳐 가도(심지어 이미 방문한 국가라도) 된다.\n\n## 입력\n\n첫 번째 줄에는 테스트 케이스의 수 T(T ≤ 100)가 주어지고,\n\n각 테스트 케이스마다 다음과 같은 정보가 주어진다.\n\n- 첫 번째 줄에는 국가의 수 N(2 ≤ N ≤ 1 000)과 비행기의 종류 M(1 ≤ M ≤ 10 000) 가 주어진다.\n- 이후 M개의 줄에 a와 b 쌍들이 입력된다. a와 b를 왕복하는 비행기가 있다는 것을 의미한다. (1 ≤ a, b ≤ n; a ≠ b) \n- 주어지는 비행 스케줄은 항상 연결 그래프를 이룬다.\n\n## 출력\n\n테스트 케이스마다 한 줄을 출력한다.\n\n- 상근이가 모든 국가를 여행하기 위해 타야 하는 비행기 종류의 최소 개수를 출력한다.\n\n#### 예제 입력 1\n\n```\n2\n3 3\n1 2\n2 3\n1 3\n5 4\n2 1\n2 3\n4 3\n4 5\n```\n\n#### 예제 출력 1\n\n```\n2\n4\n```\n\n#### 출처\n\n[ICPC ](https://www.acmicpc.net/category/1)> [Regionals ](https://www.acmicpc.net/category/7)> [Europe ](https://www.acmicpc.net/category/10)> [Northwestern European Regional Contest ](https://www.acmicpc.net/category/15)> [Benelux Algorithm Programming Contest ](https://www.acmicpc.net/category/89)> [BAPC 2013](https://www.acmicpc.net/category/detail/1160) F번\n\n- 문제의 오타를 찾은 사람: [rhksdlr134](https://www.acmicpc.net/user/rhksdlr134) [vl0612](https://www.acmicpc.net/user/vl0612)\n- 문제를 번역한 사람: [WeissBlume](https://www.acmicpc.net/user/WeissBlume)\n\n## 알고리즘 분류\n\n- [최소 스패닝 트리](https://www.acmicpc.net/problem/tag/최소 스패닝 트리)\n- [BFS](https://www.acmicpc.net/problem/tag/BFS)\n\n\n\n# 풀이\n\n```python\nimport sys\ninput = sys.stdin.readline\n\ndef bfs(start):\n    queue = [start]\n    foot_prints = [start]\n    answer = 0\n    while queue:\n        start = queue.pop(0)\n        for i in range(len(airplane[start])):\n            if airplane[start][i] and i not in foot_prints:\n                queue.append(i)\n                foot_prints.append(i)\n                answer += 1\n    return answer\n\nT = int(input())\nwhile T:\n    N , M = map(int,input().split())\n    airplane = [[0] * (N+1) for _ in range(N+1)]\n    for _ in range(M):\n        a, b = map(int,input().split())\n        airplane[a][b] = 1\n        airplane[b][a] = 1\n    print(bfs(1))\n    T -= 1\n```\n\n\n\n이번 문제는 입력을 받아오는 방법이 새로웠다.\n\n1. 테스트 케이스의 개수를 T로 받아오고, **T** 개의 테스트 케이스 라인들을 받아오기 위해 **while 문**을 이용한다. \n\n2. 국가마다 이어지는 것이기 때문에 **배열(airplane) 은  N+1 * N+1 의 크기로** 생성한다. (N: 국가의 수) \n   - N+1 의 크기를 이용하는 이유 : BFS 탐색 노드를 출력하는 문제의 경우, 인덱스와 노드의 숫자가 일치하도록 배열을 생성하면  print할 때나 사용할 때 이해하기 편하다고 생각해서 !\n\n3. 이후 M개의 줄에 a b 쌍이 입력되기 때문에 **for문은 M만큼** 돌며 a b를 받아온다.\n\n4. a와 b를 왕복하는 비행기가 있다는 것은 a국가와 b국가 사이에 **간선**이 있다는 것이다. 1로 표현한다.\n\n   ```python\n   airplane[a][b] = 1\n   airplane[b][a] = 1\n   ```\n\n5. 배열을 완성한 후 **BFS**를 실행한다. (시작 노드는 1)\n\n\n\n사실 비행기들은 모든 국가를 들릴 수 있도록 이어져 있기 때문에 타야 하는 **비행기 종류의 최소 개수**는 **N-1**(국가의 수-1) 이다. \n\n하지만 BFS 구현 코드를 다시 떠올릴 겸 BFS를 이용하여 풀어보았다. \n\n* 들린 국가의 수 출력이 아닌 비행기 종류의 개수 출력이기 때문에 국가를 이동할 때마다 answer에 1을 더하여 탄 비행기 종류 개수를 반환한다. \n\n\n\n아래 코드를 추가하니 시간 초과 문제가 해결되었다.\n\n```python\nimport sys\ninput = sys.stdin.readline\n```\n\n\n\n","slug":"backjoon-9372","published":1,"updated":"2021-02-08T18:25:07.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0k0001ff9c99046cb2d","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>상근이는 겨울방학을 맞아 N개국을 여행하면서 자아를 찾기로 마음먹었다. </p>\n<p>하지만 상근이는 새로운 비행기를 무서워하기 때문에, 최대한 적은 종류의 비행기를 타고 국가들을 이동하려고 한다.</p>\n<p>이번 방학 동안의 비행 스케줄이 주어졌을 때, 상근이가 <strong>가장 적은 종류</strong>의 비행기를 타고 모든 국가들을 여행할 수 있도록 도와주자.</p>\n<p>상근이가 한 국가에서 다른 국가로 이동할 때 다른 국가를 거쳐 가도(심지어 이미 방문한 국가라도) 된다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫 번째 줄에는 테스트 케이스의 수 T(T ≤ 100)가 주어지고,</p>\n<p>각 테스트 케이스마다 다음과 같은 정보가 주어진다.</p>\n<ul>\n<li>첫 번째 줄에는 국가의 수 N(2 ≤ N ≤ 1 000)과 비행기의 종류 M(1 ≤ M ≤ 10 000) 가 주어진다.</li>\n<li>이후 M개의 줄에 a와 b 쌍들이 입력된다. a와 b를 왕복하는 비행기가 있다는 것을 의미한다. (1 ≤ a, b ≤ n; a ≠ b) </li>\n<li>주어지는 비행 스케줄은 항상 연결 그래프를 이룬다.</li>\n</ul>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>테스트 케이스마다 한 줄을 출력한다.</p>\n<ul>\n<li>상근이가 모든 국가를 여행하기 위해 타야 하는 비행기 종류의 최소 개수를 출력한다.</li>\n</ul>\n<h4 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">3 3</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 3</span><br><span class=\"line\">1 3</span><br><span class=\"line\">5 4</span><br><span class=\"line\">2 1</span><br><span class=\"line\">2 3</span><br><span class=\"line\">4 3</span><br><span class=\"line\">4 5</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<h4 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h4><p><a href=\"https://www.acmicpc.net/category/1\">ICPC </a>&gt; <a href=\"https://www.acmicpc.net/category/7\">Regionals </a>&gt; <a href=\"https://www.acmicpc.net/category/10\">Europe </a>&gt; <a href=\"https://www.acmicpc.net/category/15\">Northwestern European Regional Contest </a>&gt; <a href=\"https://www.acmicpc.net/category/89\">Benelux Algorithm Programming Contest </a>&gt; <a href=\"https://www.acmicpc.net/category/detail/1160\">BAPC 2013</a> F번</p>\n<ul>\n<li>문제의 오타를 찾은 사람: <a href=\"https://www.acmicpc.net/user/rhksdlr134\">rhksdlr134</a> <a href=\"https://www.acmicpc.net/user/vl0612\">vl0612</a></li>\n<li>문제를 번역한 사람: <a href=\"https://www.acmicpc.net/user/WeissBlume\">WeissBlume</a></li>\n</ul>\n<h2 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h2><ul>\n<li>[최소 스패닝 트리](<a href=\"https://www.acmicpc.net/problem/tag/%EC%B5%9C%EC%86%8C\">https://www.acmicpc.net/problem/tag/최소</a> 스패닝 트리)</li>\n<li><a href=\"https://www.acmicpc.net/problem/tag/BFS\">BFS</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bfs</span>(<span class=\"params\">start</span>):</span></span><br><span class=\"line\">    queue = [start]</span><br><span class=\"line\">    foot_prints = [start]</span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        start = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(airplane[start])):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> airplane[start][i] <span class=\"keyword\">and</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints:</span><br><span class=\"line\">                queue.append(i)</span><br><span class=\"line\">                foot_prints.append(i)</span><br><span class=\"line\">                answer += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br><span class=\"line\"></span><br><span class=\"line\">T = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">while</span> T:</span><br><span class=\"line\">    N , M = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">    airplane = [[<span class=\"number\">0</span>] * (N+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N+<span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(M):</span><br><span class=\"line\">        a, b = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">        airplane[a][b] = <span class=\"number\">1</span></span><br><span class=\"line\">        airplane[b][a] = <span class=\"number\">1</span></span><br><span class=\"line\">    print(bfs(<span class=\"number\">1</span>))</span><br><span class=\"line\">    T -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n<p>이번 문제는 입력을 받아오는 방법이 새로웠다.</p>\n<ol>\n<li><p>테스트 케이스의 개수를 T로 받아오고, <strong>T</strong> 개의 테스트 케이스 라인들을 받아오기 위해 <strong>while 문</strong>을 이용한다. </p>\n</li>\n<li><p>국가마다 이어지는 것이기 때문에 *<em>배열(airplane) 은  N+1 * N+1 의 크기로*</em> 생성한다. (N: 국가의 수) </p>\n<ul>\n<li>N+1 의 크기를 이용하는 이유 : BFS 탐색 노드를 출력하는 문제의 경우, 인덱스와 노드의 숫자가 일치하도록 배열을 생성하면  print할 때나 사용할 때 이해하기 편하다고 생각해서 !</li>\n</ul>\n</li>\n<li><p>이후 M개의 줄에 a b 쌍이 입력되기 때문에 <strong>for문은 M만큼</strong> 돌며 a b를 받아온다.</p>\n</li>\n<li><p>a와 b를 왕복하는 비행기가 있다는 것은 a국가와 b국가 사이에 <strong>간선</strong>이 있다는 것이다. 1로 표현한다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airplane[a][b] = <span class=\"number\">1</span></span><br><span class=\"line\">airplane[b][a] = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p>배열을 완성한 후 <strong>BFS</strong>를 실행한다. (시작 노드는 1)</p>\n</li>\n</ol>\n<p>사실 비행기들은 모든 국가를 들릴 수 있도록 이어져 있기 때문에 타야 하는 <strong>비행기 종류의 최소 개수</strong>는 <strong>N-1</strong>(국가의 수-1) 이다. </p>\n<p>하지만 BFS 구현 코드를 다시 떠올릴 겸 BFS를 이용하여 풀어보았다. </p>\n<ul>\n<li>들린 국가의 수 출력이 아닌 비행기 종류의 개수 출력이기 때문에 국가를 이동할 때마다 answer에 1을 더하여 탄 비행기 종류 개수를 반환한다. </li>\n</ul>\n<p>아래 코드를 추가하니 시간 초과 문제가 해결되었다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>상근이는 겨울방학을 맞아 N개국을 여행하면서 자아를 찾기로 마음먹었다. </p>\n<p>하지만 상근이는 새로운 비행기를 무서워하기 때문에, 최대한 적은 종류의 비행기를 타고 국가들을 이동하려고 한다.</p>\n<p>이번 방학 동안의 비행 스케줄이 주어졌을 때, 상근이가 <strong>가장 적은 종류</strong>의 비행기를 타고 모든 국가들을 여행할 수 있도록 도와주자.</p>\n<p>상근이가 한 국가에서 다른 국가로 이동할 때 다른 국가를 거쳐 가도(심지어 이미 방문한 국가라도) 된다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫 번째 줄에는 테스트 케이스의 수 T(T ≤ 100)가 주어지고,</p>\n<p>각 테스트 케이스마다 다음과 같은 정보가 주어진다.</p>\n<ul>\n<li>첫 번째 줄에는 국가의 수 N(2 ≤ N ≤ 1 000)과 비행기의 종류 M(1 ≤ M ≤ 10 000) 가 주어진다.</li>\n<li>이후 M개의 줄에 a와 b 쌍들이 입력된다. a와 b를 왕복하는 비행기가 있다는 것을 의미한다. (1 ≤ a, b ≤ n; a ≠ b) </li>\n<li>주어지는 비행 스케줄은 항상 연결 그래프를 이룬다.</li>\n</ul>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>테스트 케이스마다 한 줄을 출력한다.</p>\n<ul>\n<li>상근이가 모든 국가를 여행하기 위해 타야 하는 비행기 종류의 최소 개수를 출력한다.</li>\n</ul>\n<h4 id=\"예제-입력-1\"><a href=\"#예제-입력-1\" class=\"headerlink\" title=\"예제 입력 1\"></a>예제 입력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">3 3</span><br><span class=\"line\">1 2</span><br><span class=\"line\">2 3</span><br><span class=\"line\">1 3</span><br><span class=\"line\">5 4</span><br><span class=\"line\">2 1</span><br><span class=\"line\">2 3</span><br><span class=\"line\">4 3</span><br><span class=\"line\">4 5</span><br></pre></td></tr></table></figure>\n<h4 id=\"예제-출력-1\"><a href=\"#예제-출력-1\" class=\"headerlink\" title=\"예제 출력 1\"></a>예제 출력 1</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2</span><br><span class=\"line\">4</span><br></pre></td></tr></table></figure>\n<h4 id=\"출처\"><a href=\"#출처\" class=\"headerlink\" title=\"출처\"></a>출처</h4><p><a href=\"https://www.acmicpc.net/category/1\">ICPC </a>&gt; <a href=\"https://www.acmicpc.net/category/7\">Regionals </a>&gt; <a href=\"https://www.acmicpc.net/category/10\">Europe </a>&gt; <a href=\"https://www.acmicpc.net/category/15\">Northwestern European Regional Contest </a>&gt; <a href=\"https://www.acmicpc.net/category/89\">Benelux Algorithm Programming Contest </a>&gt; <a href=\"https://www.acmicpc.net/category/detail/1160\">BAPC 2013</a> F번</p>\n<ul>\n<li>문제의 오타를 찾은 사람: <a href=\"https://www.acmicpc.net/user/rhksdlr134\">rhksdlr134</a> <a href=\"https://www.acmicpc.net/user/vl0612\">vl0612</a></li>\n<li>문제를 번역한 사람: <a href=\"https://www.acmicpc.net/user/WeissBlume\">WeissBlume</a></li>\n</ul>\n<h2 id=\"알고리즘-분류\"><a href=\"#알고리즘-분류\" class=\"headerlink\" title=\"알고리즘 분류\"></a>알고리즘 분류</h2><ul>\n<li>[최소 스패닝 트리](<a href=\"https://www.acmicpc.net/problem/tag/%EC%B5%9C%EC%86%8C\">https://www.acmicpc.net/problem/tag/최소</a> 스패닝 트리)</li>\n<li><a href=\"https://www.acmicpc.net/problem/tag/BFS\">BFS</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bfs</span>(<span class=\"params\">start</span>):</span></span><br><span class=\"line\">    queue = [start]</span><br><span class=\"line\">    foot_prints = [start]</span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        start = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(airplane[start])):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> airplane[start][i] <span class=\"keyword\">and</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints:</span><br><span class=\"line\">                queue.append(i)</span><br><span class=\"line\">                foot_prints.append(i)</span><br><span class=\"line\">                answer += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br><span class=\"line\"></span><br><span class=\"line\">T = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"keyword\">while</span> T:</span><br><span class=\"line\">    N , M = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">    airplane = [[<span class=\"number\">0</span>] * (N+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N+<span class=\"number\">1</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(M):</span><br><span class=\"line\">        a, b = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>,<span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">        airplane[a][b] = <span class=\"number\">1</span></span><br><span class=\"line\">        airplane[b][a] = <span class=\"number\">1</span></span><br><span class=\"line\">    print(bfs(<span class=\"number\">1</span>))</span><br><span class=\"line\">    T -= <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n\n<p>이번 문제는 입력을 받아오는 방법이 새로웠다.</p>\n<ol>\n<li><p>테스트 케이스의 개수를 T로 받아오고, <strong>T</strong> 개의 테스트 케이스 라인들을 받아오기 위해 <strong>while 문</strong>을 이용한다. </p>\n</li>\n<li><p>국가마다 이어지는 것이기 때문에 *<em>배열(airplane) 은  N+1 * N+1 의 크기로*</em> 생성한다. (N: 국가의 수) </p>\n<ul>\n<li>N+1 의 크기를 이용하는 이유 : BFS 탐색 노드를 출력하는 문제의 경우, 인덱스와 노드의 숫자가 일치하도록 배열을 생성하면  print할 때나 사용할 때 이해하기 편하다고 생각해서 !</li>\n</ul>\n</li>\n<li><p>이후 M개의 줄에 a b 쌍이 입력되기 때문에 <strong>for문은 M만큼</strong> 돌며 a b를 받아온다.</p>\n</li>\n<li><p>a와 b를 왕복하는 비행기가 있다는 것은 a국가와 b국가 사이에 <strong>간선</strong>이 있다는 것이다. 1로 표현한다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airplane[a][b] = <span class=\"number\">1</span></span><br><span class=\"line\">airplane[b][a] = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></li>\n<li><p>배열을 완성한 후 <strong>BFS</strong>를 실행한다. (시작 노드는 1)</p>\n</li>\n</ol>\n<p>사실 비행기들은 모든 국가를 들릴 수 있도록 이어져 있기 때문에 타야 하는 <strong>비행기 종류의 최소 개수</strong>는 <strong>N-1</strong>(국가의 수-1) 이다. </p>\n<p>하지만 BFS 구현 코드를 다시 떠올릴 겸 BFS를 이용하여 풀어보았다. </p>\n<ul>\n<li>들린 국가의 수 출력이 아닌 비행기 종류의 개수 출력이기 때문에 국가를 이동할 때마다 answer에 1을 더하여 탄 비행기 종류 개수를 반환한다. </li>\n</ul>\n<p>아래 코드를 추가하니 시간 초과 문제가 해결되었다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"built_in\">input</span> = sys.stdin.readline</span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"[백준알고리즘] 1260번: DFS와 BFS- 파이썬(python)","date":"2020-03-23T12:00:00.000Z","_content":"\n# 문제\n\n그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.\n\n## 입력\n\n첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.\n\n## 출력\n\n첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.\n\n##### 예제 입력 2 \n\n```\n5 5 3\n5 4\n5 2\n1 2\n3 4\n3 1\n```\n\n##### 예제 출력 2 \n\n```\n3 1 2 5 4\n3 1 4 2 5\n```\n\n# 풀이\n\n> DFS - BFS에 대해 알아본 후 문제풀이를 해보자 ! \n>\n> [DFS 와 BFS의 이해를 돕는 유튜브 영상 링크][https://www.youtube.com/watch?v=_hxFgg7TLZQ]\n\n### BFS (너비 우선 탐색)\n\n같은 깊이 순서대로 탐색, 큐를 이용한다.\n\n- 먼저 matrix를 생성한다.  정점의 개수(num)보다 +1 크기의 matrix를 생성한다. \n\n  `matrix = [[0]* (num+1) for _ in range(num+1)]`\n\n* 간선을 가지고 있는 경우 matrix[간선을가진 정점] [간선을 가진정점]을 1로 지정한다.\n\n위의 예제의 경우 아래와 같은 matrix가 형성될 것이다.\n\n<img src=\"../image/KakaoTalk_20200323_224007711.png\" alt=\"KakaoTalk_20200323_224007711\" style=\"zoom:25%;\" />\n\n\n\n* BFS는 맨처음 queue배열을 생성하여 [시작 정점]을 넣으며 시작한다.\n\n* for n range(len(matrix[시작정점]))를 돌며 시작정점과 간선을 가진 정점을 만나면 모두 queue에 넣는다. \n* for문이 끝난 후 queue.pop(0)을 통해  첫번째 인덱스의 정점을 뽑아 정답 배열에 넣은 후다시 for문을 돌며 정점과 간선을 가진 모든 정점을 queue에 넣는다. \n* 이를 queue가 빌 때까지 반복하면 된다.\n\n\n\n### DFS (깊이 우선 탐색)\n\n가장 깊은 곳까지 내려갔다가 다시 탐색 시작 정점으로 올라와 탐색을 시작하는 방식, 재귀함수를 이용한다. \n\n* BFS와 동일한 matrix를 생성한다.\n\n* DFS는 for n range(len(matrix[시작정점]))를 돌며 matrix[시작정점] [n] == 1을 만나면 배열(foot_prints)에 넣는다. \n* 이 때 이미 방문한 정점은 배열에 넣지 않는다.\n* for문이 끝난 후  n을 시작정점으로써 재귀함수를 호출한다. \n\n\n\n### 코드\n\n```python\nN, M, V = map(int, input().split())\nmatrix = [[0] * (N + 1) for _ in range(N + 1)]\nfor _ in range(M):\n    link = list(map(int, input().split()))\n    matrix[link[0]][link[1]] = 1\n    matrix[link[1]][link[0]] = 1\n\n\ndef dfs(current_node, mat, foot_prints):\n    foot_prints += [current_node]\n    for search_node in range(len(mat[current_node])):\n        if mat[current_node][search_node] and search_node not in foot_prints:\n            foot_prints = dfs(search_node, mat, foot_prints)\n    return foot_prints\n\n\ndef bfs(start):\n    queue = [start]\n    foot_prints = [start]\n    while queue:\n        current_node = queue.pop(0)\n        for search_node in range(len(matrix[current_node])):\n            if matrix[current_node][search_node] and search_node not in foot_prints:\n                foot_prints += [search_node]\n                queue += [search_node]\n    return foot_prints\n\n\nprint(*dfs(V, matrix, []))\nprint(*bfs(V))\n```\n\n","source":"_posts/backjoon-dfs-bfs.md","raw":"---\ntitle: \"[백준알고리즘] 1260번: DFS와 BFS- 파이썬(python)\"\ndate: 2020-03-23 21:00:00\ntags: 알고리즘\n---\n\n# 문제\n\n그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.\n\n## 입력\n\n첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.\n\n## 출력\n\n첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.\n\n##### 예제 입력 2 \n\n```\n5 5 3\n5 4\n5 2\n1 2\n3 4\n3 1\n```\n\n##### 예제 출력 2 \n\n```\n3 1 2 5 4\n3 1 4 2 5\n```\n\n# 풀이\n\n> DFS - BFS에 대해 알아본 후 문제풀이를 해보자 ! \n>\n> [DFS 와 BFS의 이해를 돕는 유튜브 영상 링크][https://www.youtube.com/watch?v=_hxFgg7TLZQ]\n\n### BFS (너비 우선 탐색)\n\n같은 깊이 순서대로 탐색, 큐를 이용한다.\n\n- 먼저 matrix를 생성한다.  정점의 개수(num)보다 +1 크기의 matrix를 생성한다. \n\n  `matrix = [[0]* (num+1) for _ in range(num+1)]`\n\n* 간선을 가지고 있는 경우 matrix[간선을가진 정점] [간선을 가진정점]을 1로 지정한다.\n\n위의 예제의 경우 아래와 같은 matrix가 형성될 것이다.\n\n<img src=\"../image/KakaoTalk_20200323_224007711.png\" alt=\"KakaoTalk_20200323_224007711\" style=\"zoom:25%;\" />\n\n\n\n* BFS는 맨처음 queue배열을 생성하여 [시작 정점]을 넣으며 시작한다.\n\n* for n range(len(matrix[시작정점]))를 돌며 시작정점과 간선을 가진 정점을 만나면 모두 queue에 넣는다. \n* for문이 끝난 후 queue.pop(0)을 통해  첫번째 인덱스의 정점을 뽑아 정답 배열에 넣은 후다시 for문을 돌며 정점과 간선을 가진 모든 정점을 queue에 넣는다. \n* 이를 queue가 빌 때까지 반복하면 된다.\n\n\n\n### DFS (깊이 우선 탐색)\n\n가장 깊은 곳까지 내려갔다가 다시 탐색 시작 정점으로 올라와 탐색을 시작하는 방식, 재귀함수를 이용한다. \n\n* BFS와 동일한 matrix를 생성한다.\n\n* DFS는 for n range(len(matrix[시작정점]))를 돌며 matrix[시작정점] [n] == 1을 만나면 배열(foot_prints)에 넣는다. \n* 이 때 이미 방문한 정점은 배열에 넣지 않는다.\n* for문이 끝난 후  n을 시작정점으로써 재귀함수를 호출한다. \n\n\n\n### 코드\n\n```python\nN, M, V = map(int, input().split())\nmatrix = [[0] * (N + 1) for _ in range(N + 1)]\nfor _ in range(M):\n    link = list(map(int, input().split()))\n    matrix[link[0]][link[1]] = 1\n    matrix[link[1]][link[0]] = 1\n\n\ndef dfs(current_node, mat, foot_prints):\n    foot_prints += [current_node]\n    for search_node in range(len(mat[current_node])):\n        if mat[current_node][search_node] and search_node not in foot_prints:\n            foot_prints = dfs(search_node, mat, foot_prints)\n    return foot_prints\n\n\ndef bfs(start):\n    queue = [start]\n    foot_prints = [start]\n    while queue:\n        current_node = queue.pop(0)\n        for search_node in range(len(matrix[current_node])):\n            if matrix[current_node][search_node] and search_node not in foot_prints:\n                foot_prints += [search_node]\n                queue += [search_node]\n    return foot_prints\n\n\nprint(*dfs(V, matrix, []))\nprint(*bfs(V))\n```\n\n","slug":"backjoon-dfs-bfs","published":1,"updated":"2021-02-08T18:25:07.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0k2001if9c92ay7boa7","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.</p>\n<h5 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5 3</span><br><span class=\"line\">5 4</span><br><span class=\"line\">5 2</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 4</span><br><span class=\"line\">3 1</span><br></pre></td></tr></table></figure>\n<h5 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 1 2 5 4</span><br><span class=\"line\">3 1 4 2 5</span><br></pre></td></tr></table></figure>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><blockquote>\n<p>DFS - BFS에 대해 알아본 후 문제풀이를 해보자 ! </p>\n<p>[DFS 와 BFS의 이해를 돕는 유튜브 영상 링크][<a href=\"https://www.youtube.com/watch?v=_hxFgg7TLZQ%5D\">https://www.youtube.com/watch?v=_hxFgg7TLZQ]</a></p>\n</blockquote>\n<h3 id=\"BFS-너비-우선-탐색\"><a href=\"#BFS-너비-우선-탐색\" class=\"headerlink\" title=\"BFS (너비 우선 탐색)\"></a>BFS (너비 우선 탐색)</h3><p>같은 깊이 순서대로 탐색, 큐를 이용한다.</p>\n<ul>\n<li><p>먼저 matrix를 생성한다.  정점의 개수(num)보다 +1 크기의 matrix를 생성한다. </p>\n<p><code>matrix = [[0]* (num+1) for _ in range(num+1)]</code></p>\n</li>\n</ul>\n<ul>\n<li>간선을 가지고 있는 경우 matrix[간선을가진 정점] [간선을 가진정점]을 1로 지정한다.</li>\n</ul>\n<p>위의 예제의 경우 아래와 같은 matrix가 형성될 것이다.</p>\n<img src=\"../image/KakaoTalk_20200323_224007711.png\" alt=\"KakaoTalk_20200323_224007711\" style=\"zoom:25%;\" />\n\n\n\n<ul>\n<li><p>BFS는 맨처음 queue배열을 생성하여 [시작 정점]을 넣으며 시작한다.</p>\n</li>\n<li><p>for n range(len(matrix[시작정점]))를 돌며 시작정점과 간선을 가진 정점을 만나면 모두 queue에 넣는다. </p>\n</li>\n<li><p>for문이 끝난 후 queue.pop(0)을 통해  첫번째 인덱스의 정점을 뽑아 정답 배열에 넣은 후다시 for문을 돌며 정점과 간선을 가진 모든 정점을 queue에 넣는다. </p>\n</li>\n<li><p>이를 queue가 빌 때까지 반복하면 된다.</p>\n</li>\n</ul>\n<h3 id=\"DFS-깊이-우선-탐색\"><a href=\"#DFS-깊이-우선-탐색\" class=\"headerlink\" title=\"DFS (깊이 우선 탐색)\"></a>DFS (깊이 우선 탐색)</h3><p>가장 깊은 곳까지 내려갔다가 다시 탐색 시작 정점으로 올라와 탐색을 시작하는 방식, 재귀함수를 이용한다. </p>\n<ul>\n<li><p>BFS와 동일한 matrix를 생성한다.</p>\n</li>\n<li><p>DFS는 for n range(len(matrix[시작정점]))를 돌며 matrix[시작정점] [n] == 1을 만나면 배열(foot_prints)에 넣는다. </p>\n</li>\n<li><p>이 때 이미 방문한 정점은 배열에 넣지 않는다.</p>\n</li>\n<li><p>for문이 끝난 후  n을 시작정점으로써 재귀함수를 호출한다. </p>\n</li>\n</ul>\n<h3 id=\"코드\"><a href=\"#코드\" class=\"headerlink\" title=\"코드\"></a>코드</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N, M, V = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">matrix = [[<span class=\"number\">0</span>] * (N + <span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N + <span class=\"number\">1</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(M):</span><br><span class=\"line\">    link = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\">    matrix[link[<span class=\"number\">0</span>]][link[<span class=\"number\">1</span>]] = <span class=\"number\">1</span></span><br><span class=\"line\">    matrix[link[<span class=\"number\">1</span>]][link[<span class=\"number\">0</span>]] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">current_node, mat, foot_prints</span>):</span></span><br><span class=\"line\">    foot_prints += [current_node]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> search_node <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(mat[current_node])):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> mat[current_node][search_node] <span class=\"keyword\">and</span> search_node <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints:</span><br><span class=\"line\">            foot_prints = dfs(search_node, mat, foot_prints)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foot_prints</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bfs</span>(<span class=\"params\">start</span>):</span></span><br><span class=\"line\">    queue = [start]</span><br><span class=\"line\">    foot_prints = [start]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        current_node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> search_node <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(matrix[current_node])):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> matrix[current_node][search_node] <span class=\"keyword\">and</span> search_node <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints:</span><br><span class=\"line\">                foot_prints += [search_node]</span><br><span class=\"line\">                queue += [search_node]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foot_prints</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(*dfs(V, matrix, []))</span><br><span class=\"line\">print(*bfs(V))</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.</p>\n<h2 id=\"입력\"><a href=\"#입력\" class=\"headerlink\" title=\"입력\"></a>입력</h2><p>첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.</p>\n<h2 id=\"출력\"><a href=\"#출력\" class=\"headerlink\" title=\"출력\"></a>출력</h2><p>첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.</p>\n<h5 id=\"예제-입력-2\"><a href=\"#예제-입력-2\" class=\"headerlink\" title=\"예제 입력 2\"></a>예제 입력 2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 5 3</span><br><span class=\"line\">5 4</span><br><span class=\"line\">5 2</span><br><span class=\"line\">1 2</span><br><span class=\"line\">3 4</span><br><span class=\"line\">3 1</span><br></pre></td></tr></table></figure>\n<h5 id=\"예제-출력-2\"><a href=\"#예제-출력-2\" class=\"headerlink\" title=\"예제 출력 2\"></a>예제 출력 2</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">3 1 2 5 4</span><br><span class=\"line\">3 1 4 2 5</span><br></pre></td></tr></table></figure>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><blockquote>\n<p>DFS - BFS에 대해 알아본 후 문제풀이를 해보자 ! </p>\n<p>[DFS 와 BFS의 이해를 돕는 유튜브 영상 링크][<a href=\"https://www.youtube.com/watch?v=_hxFgg7TLZQ%5D\">https://www.youtube.com/watch?v=_hxFgg7TLZQ]</a></p>\n</blockquote>\n<h3 id=\"BFS-너비-우선-탐색\"><a href=\"#BFS-너비-우선-탐색\" class=\"headerlink\" title=\"BFS (너비 우선 탐색)\"></a>BFS (너비 우선 탐색)</h3><p>같은 깊이 순서대로 탐색, 큐를 이용한다.</p>\n<ul>\n<li><p>먼저 matrix를 생성한다.  정점의 개수(num)보다 +1 크기의 matrix를 생성한다. </p>\n<p><code>matrix = [[0]* (num+1) for _ in range(num+1)]</code></p>\n</li>\n</ul>\n<ul>\n<li>간선을 가지고 있는 경우 matrix[간선을가진 정점] [간선을 가진정점]을 1로 지정한다.</li>\n</ul>\n<p>위의 예제의 경우 아래와 같은 matrix가 형성될 것이다.</p>\n<img src=\"../image/KakaoTalk_20200323_224007711.png\" alt=\"KakaoTalk_20200323_224007711\" style=\"zoom:25%;\" />\n\n\n\n<ul>\n<li><p>BFS는 맨처음 queue배열을 생성하여 [시작 정점]을 넣으며 시작한다.</p>\n</li>\n<li><p>for n range(len(matrix[시작정점]))를 돌며 시작정점과 간선을 가진 정점을 만나면 모두 queue에 넣는다. </p>\n</li>\n<li><p>for문이 끝난 후 queue.pop(0)을 통해  첫번째 인덱스의 정점을 뽑아 정답 배열에 넣은 후다시 for문을 돌며 정점과 간선을 가진 모든 정점을 queue에 넣는다. </p>\n</li>\n<li><p>이를 queue가 빌 때까지 반복하면 된다.</p>\n</li>\n</ul>\n<h3 id=\"DFS-깊이-우선-탐색\"><a href=\"#DFS-깊이-우선-탐색\" class=\"headerlink\" title=\"DFS (깊이 우선 탐색)\"></a>DFS (깊이 우선 탐색)</h3><p>가장 깊은 곳까지 내려갔다가 다시 탐색 시작 정점으로 올라와 탐색을 시작하는 방식, 재귀함수를 이용한다. </p>\n<ul>\n<li><p>BFS와 동일한 matrix를 생성한다.</p>\n</li>\n<li><p>DFS는 for n range(len(matrix[시작정점]))를 돌며 matrix[시작정점] [n] == 1을 만나면 배열(foot_prints)에 넣는다. </p>\n</li>\n<li><p>이 때 이미 방문한 정점은 배열에 넣지 않는다.</p>\n</li>\n<li><p>for문이 끝난 후  n을 시작정점으로써 재귀함수를 호출한다. </p>\n</li>\n</ul>\n<h3 id=\"코드\"><a href=\"#코드\" class=\"headerlink\" title=\"코드\"></a>코드</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N, M, V = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">matrix = [[<span class=\"number\">0</span>] * (N + <span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N + <span class=\"number\">1</span>)]</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(M):</span><br><span class=\"line\">    link = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split()))</span><br><span class=\"line\">    matrix[link[<span class=\"number\">0</span>]][link[<span class=\"number\">1</span>]] = <span class=\"number\">1</span></span><br><span class=\"line\">    matrix[link[<span class=\"number\">1</span>]][link[<span class=\"number\">0</span>]] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">current_node, mat, foot_prints</span>):</span></span><br><span class=\"line\">    foot_prints += [current_node]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> search_node <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(mat[current_node])):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> mat[current_node][search_node] <span class=\"keyword\">and</span> search_node <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints:</span><br><span class=\"line\">            foot_prints = dfs(search_node, mat, foot_prints)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foot_prints</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bfs</span>(<span class=\"params\">start</span>):</span></span><br><span class=\"line\">    queue = [start]</span><br><span class=\"line\">    foot_prints = [start]</span><br><span class=\"line\">    <span class=\"keyword\">while</span> queue:</span><br><span class=\"line\">        current_node = queue.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> search_node <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(matrix[current_node])):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> matrix[current_node][search_node] <span class=\"keyword\">and</span> search_node <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> foot_prints:</span><br><span class=\"line\">                foot_prints += [search_node]</span><br><span class=\"line\">                queue += [search_node]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foot_prints</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">print(*dfs(V, matrix, []))</span><br><span class=\"line\">print(*bfs(V))</span><br></pre></td></tr></table></figure>\n"},{"title":"[boj] 2564:경비원 - 구현 (java)","date":"2021-02-08T12:48:00.000Z","_content":"\n* 문제 링크: https://www.acmicpc.net/problem/2564\n\n# 풀이\n\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main_BOJ_2564_경비원 {\n\tstatic BufferedReader br =new BufferedReader(new InputStreamReader(System.in));\n\tstatic StringTokenizer st;\n\tstatic int N, M; // 블록 경계 행, 열\n\tstatic int storeNum;\n\tstatic Stack<Pos> stack;\n\tstatic Pos dongPos;\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\t\tinput();\n\t\t\tint answer =0 ;\n\t\t\twhile(!stack.isEmpty()) {\n\t\t\t\tPos store = stack.pop();\n\t\t\t\tif(Math.abs(store.y - dongPos.y) == M) { // 1.\n\t\t\t\t\tanswer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;\n\t\t\t\t} else if(Math.abs(store.x - dongPos.x) == N) { // 2.\n\t\t\t\t\tanswer += Math.min(M-store.y + M- dongPos.y, store.y + dongPos.y) + N;\n\t\t\t\t} else { // 3.\n\t\t\t\t\tanswer+= Math.abs(store.x-dongPos.x) + Math.abs(store.y - dongPos.y);\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(answer);\n\t}\n\n\tprivate static void input() throws Exception {\n\t\tst = new StringTokenizer(br.readLine());\n\t\tM = stoi(st.nextToken()); // 열\n\t\tN = stoi(st.nextToken()); // 행\n\t\t\n\t\tstoreNum = stoi(br.readLine());\n\t\tstack = new Stack<Pos>();\n\t\tfor(int i=0 ; i< storeNum; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint dir = stoi(st.nextToken());\n\t\t\tint pos = stoi(st.nextToken());\n\t\t\tstack.add(realPos(dir, pos));\n\t\t}\n\t\tst = new StringTokenizer(br.readLine());\n\t\tdongPos = realPos(stoi(st.nextToken()), stoi(st.nextToken()));\n\t}\n\t\n\tprivate static int stoi(String input) {\n\t\treturn Integer.parseInt(input);\n\t}\n\t\n\tprivate static Pos realPos(int dir, int pos) {\n\t\tif(dir == 1) { \n\t\t\treturn new Pos(0, pos);\n\t\t} else if(dir == 2) {\n\t\t\treturn new Pos(N, pos);\n\t\t} else if(dir == 3) {\n\t\t\treturn new Pos(pos, 0);\n\t\t} else if(dir == 4) {\n\t\t\treturn new Pos(pos, M);\n\t\t}\n\t\treturn null;\n\t}\n}\n\n\nclass Pos{\n\tint x;\n\tint y;\n\t\n\tpublic Pos(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n```\n\n* 스토어와 동근이의 위치는 테두리에만 존재하기 때문에 1,2,3,4 (동서남북) 여부와 왼쪽, 위쪽으로부터의 위치가 주어지면 실제 좌표 위치를 알 수 있다. \n\n1. 동근이와 경비해야할 store가 서, 동에 위치하는 경우\n\n   <img src=\"../image/image-20210208224433936.png\" alt=\"image-20210208224433936\" style=\"zoom:67%;\" />\n\n   * Math.abs(dongPos.y - store.y) 가 M이 라는 것은 서로 동, 서쪽으로 평행하다는 것을 의미한다. \n\n   * 이때 **거리는 위로 가는 경우(회색), 아래로 가는 경우(빨간색) 중 거리가 더 가까운 값에 M 을 더한 값**이다.\n\n     ```java\n     answer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;\n     ```\n\n2. 동근이와 경비해야할 store가 북, 남에 위치하는 경우\n\n   <img src=\"../image/image-20210208224412843.png\" alt=\"image-20210208224412843\" style=\"zoom:67%;\" />\n\n   * Math.abs(dongPos.x - store.x) 가 N이 라는 것은 서로 북, 남쪽으로 평행하다는 것을 의미한다. \n\n   * 이때 **거리는 동근이가 오른쪽로 가는 경우(회색), 왼쪽으로 가는 경우(빨간색) 중 거리가 더 가까운 값에 M 을 더한 값**이다.\n\n     ```java\n     answer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;\n     ```\n\n3. 동근이와 경비해야할 store가 평행하지 않는경우\n\n   * 좌표끼리 뺀값의 절대값을 더한 값이 거리가 된다.\n\n     ```java\n     answer+= Math.abs(store.x-dongPos.x) + Math.abs(store.y - dongPos.y);\n     ```\n\n     ","source":"_posts/boj-2564.md","raw":"---\ntitle: \"[boj] 2564:경비원 - 구현 (java)\"\ndate: 2021-02-08 21:48:00\ntag: 알고리즘\n---\n\n* 문제 링크: https://www.acmicpc.net/problem/2564\n\n# 풀이\n\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Main_BOJ_2564_경비원 {\n\tstatic BufferedReader br =new BufferedReader(new InputStreamReader(System.in));\n\tstatic StringTokenizer st;\n\tstatic int N, M; // 블록 경계 행, 열\n\tstatic int storeNum;\n\tstatic Stack<Pos> stack;\n\tstatic Pos dongPos;\n\t\n\tpublic static void main(String[] args) throws Exception {\n\t\t\tinput();\n\t\t\tint answer =0 ;\n\t\t\twhile(!stack.isEmpty()) {\n\t\t\t\tPos store = stack.pop();\n\t\t\t\tif(Math.abs(store.y - dongPos.y) == M) { // 1.\n\t\t\t\t\tanswer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;\n\t\t\t\t} else if(Math.abs(store.x - dongPos.x) == N) { // 2.\n\t\t\t\t\tanswer += Math.min(M-store.y + M- dongPos.y, store.y + dongPos.y) + N;\n\t\t\t\t} else { // 3.\n\t\t\t\t\tanswer+= Math.abs(store.x-dongPos.x) + Math.abs(store.y - dongPos.y);\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t\tSystem.out.println(answer);\n\t}\n\n\tprivate static void input() throws Exception {\n\t\tst = new StringTokenizer(br.readLine());\n\t\tM = stoi(st.nextToken()); // 열\n\t\tN = stoi(st.nextToken()); // 행\n\t\t\n\t\tstoreNum = stoi(br.readLine());\n\t\tstack = new Stack<Pos>();\n\t\tfor(int i=0 ; i< storeNum; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tint dir = stoi(st.nextToken());\n\t\t\tint pos = stoi(st.nextToken());\n\t\t\tstack.add(realPos(dir, pos));\n\t\t}\n\t\tst = new StringTokenizer(br.readLine());\n\t\tdongPos = realPos(stoi(st.nextToken()), stoi(st.nextToken()));\n\t}\n\t\n\tprivate static int stoi(String input) {\n\t\treturn Integer.parseInt(input);\n\t}\n\t\n\tprivate static Pos realPos(int dir, int pos) {\n\t\tif(dir == 1) { \n\t\t\treturn new Pos(0, pos);\n\t\t} else if(dir == 2) {\n\t\t\treturn new Pos(N, pos);\n\t\t} else if(dir == 3) {\n\t\t\treturn new Pos(pos, 0);\n\t\t} else if(dir == 4) {\n\t\t\treturn new Pos(pos, M);\n\t\t}\n\t\treturn null;\n\t}\n}\n\n\nclass Pos{\n\tint x;\n\tint y;\n\t\n\tpublic Pos(int x, int y) {\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t}\n}\n```\n\n* 스토어와 동근이의 위치는 테두리에만 존재하기 때문에 1,2,3,4 (동서남북) 여부와 왼쪽, 위쪽으로부터의 위치가 주어지면 실제 좌표 위치를 알 수 있다. \n\n1. 동근이와 경비해야할 store가 서, 동에 위치하는 경우\n\n   <img src=\"../image/image-20210208224433936.png\" alt=\"image-20210208224433936\" style=\"zoom:67%;\" />\n\n   * Math.abs(dongPos.y - store.y) 가 M이 라는 것은 서로 동, 서쪽으로 평행하다는 것을 의미한다. \n\n   * 이때 **거리는 위로 가는 경우(회색), 아래로 가는 경우(빨간색) 중 거리가 더 가까운 값에 M 을 더한 값**이다.\n\n     ```java\n     answer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;\n     ```\n\n2. 동근이와 경비해야할 store가 북, 남에 위치하는 경우\n\n   <img src=\"../image/image-20210208224412843.png\" alt=\"image-20210208224412843\" style=\"zoom:67%;\" />\n\n   * Math.abs(dongPos.x - store.x) 가 N이 라는 것은 서로 북, 남쪽으로 평행하다는 것을 의미한다. \n\n   * 이때 **거리는 동근이가 오른쪽로 가는 경우(회색), 왼쪽으로 가는 경우(빨간색) 중 거리가 더 가까운 값에 M 을 더한 값**이다.\n\n     ```java\n     answer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;\n     ```\n\n3. 동근이와 경비해야할 store가 평행하지 않는경우\n\n   * 좌표끼리 뺀값의 절대값을 더한 값이 거리가 된다.\n\n     ```java\n     answer+= Math.abs(store.x-dongPos.x) + Math.abs(store.y - dongPos.y);\n     ```\n\n     ","slug":"boj-2564","published":1,"updated":"2021-02-08T18:31:55.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0k4001jf9c9350d10mi","content":"<ul>\n<li>문제 링크: <a href=\"https://www.acmicpc.net/problem/2564\">https://www.acmicpc.net/problem/2564</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main_BOJ_2564_</span>경비원 </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> BufferedReader br =<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> StringTokenizer st;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> N, M; <span class=\"comment\">// 블록 경계 행, 열</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> storeNum;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Stack&lt;Pos&gt; stack;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Pos dongPos;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t\tinput();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> answer =<span class=\"number\">0</span> ;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(!stack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\tPos store = stack.pop();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(Math.abs(store.y - dongPos.y) == M) &#123; <span class=\"comment\">// 1.</span></span><br><span class=\"line\">\t\t\t\t\tanswer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Math.abs(store.x - dongPos.x) == N) &#123; <span class=\"comment\">// 2.</span></span><br><span class=\"line\">\t\t\t\t\tanswer += Math.min(M-store.y + M- dongPos.y, store.y + dongPos.y) + N;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 3.</span></span><br><span class=\"line\">\t\t\t\t\tanswer+= Math.abs(store.x-dongPos.x) + Math.abs(store.y - dongPos.y);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(answer);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">input</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tst = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\tM = stoi(st.nextToken()); <span class=\"comment\">// 열</span></span><br><span class=\"line\">\t\tN = stoi(st.nextToken()); <span class=\"comment\">// 행</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tstoreNum = stoi(br.readLine());</span><br><span class=\"line\">\t\tstack = <span class=\"keyword\">new</span> Stack&lt;Pos&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span> ; i&lt; storeNum; i++) &#123;</span><br><span class=\"line\">\t\t\tst = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> dir = stoi(st.nextToken());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> pos = stoi(st.nextToken());</span><br><span class=\"line\">\t\t\tstack.add(realPos(dir, pos));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tst = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\tdongPos = realPos(stoi(st.nextToken()), stoi(st.nextToken()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">stoi</span><span class=\"params\">(String input)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Integer.parseInt(input);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Pos <span class=\"title\">realPos</span><span class=\"params\">(<span class=\"keyword\">int</span> dir, <span class=\"keyword\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dir == <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pos(<span class=\"number\">0</span>, pos);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dir == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pos(N, pos);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dir == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pos(pos, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dir == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pos(pos, M);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pos</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pos</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>스토어와 동근이의 위치는 테두리에만 존재하기 때문에 1,2,3,4 (동서남북) 여부와 왼쪽, 위쪽으로부터의 위치가 주어지면 실제 좌표 위치를 알 수 있다. </li>\n</ul>\n<ol>\n<li><p>동근이와 경비해야할 store가 서, 동에 위치하는 경우</p>\n<img src=\"../image/image-20210208224433936.png\" alt=\"image-20210208224433936\" style=\"zoom:67%;\" />\n\n<ul>\n<li><p>Math.abs(dongPos.y - store.y) 가 M이 라는 것은 서로 동, 서쪽으로 평행하다는 것을 의미한다. </p>\n</li>\n<li><p>이때 <strong>거리는 위로 가는 경우(회색), 아래로 가는 경우(빨간색) 중 거리가 더 가까운 값에 M 을 더한 값</strong>이다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>동근이와 경비해야할 store가 북, 남에 위치하는 경우</p>\n<img src=\"../image/image-20210208224412843.png\" alt=\"image-20210208224412843\" style=\"zoom:67%;\" />\n\n<ul>\n<li><p>Math.abs(dongPos.x - store.x) 가 N이 라는 것은 서로 북, 남쪽으로 평행하다는 것을 의미한다. </p>\n</li>\n<li><p>이때 <strong>거리는 동근이가 오른쪽로 가는 경우(회색), 왼쪽으로 가는 경우(빨간색) 중 거리가 더 가까운 값에 M 을 더한 값</strong>이다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>동근이와 경비해야할 store가 평행하지 않는경우</p>\n<ul>\n<li><p>좌표끼리 뺀값의 절대값을 더한 값이 거리가 된다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer+= Math.abs(store.x-dongPos.x) + Math.abs(store.y - dongPos.y);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>문제 링크: <a href=\"https://www.acmicpc.net/problem/2564\">https://www.acmicpc.net/problem/2564</a></li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main_BOJ_2564_</span>경비원 </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> BufferedReader br =<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> StringTokenizer st;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> N, M; <span class=\"comment\">// 블록 경계 행, 열</span></span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> storeNum;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Stack&lt;Pos&gt; stack;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Pos dongPos;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t\tinput();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> answer =<span class=\"number\">0</span> ;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(!stack.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\tPos store = stack.pop();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(Math.abs(store.y - dongPos.y) == M) &#123; <span class=\"comment\">// 1.</span></span><br><span class=\"line\">\t\t\t\t\tanswer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(Math.abs(store.x - dongPos.x) == N) &#123; <span class=\"comment\">// 2.</span></span><br><span class=\"line\">\t\t\t\t\tanswer += Math.min(M-store.y + M- dongPos.y, store.y + dongPos.y) + N;</span><br><span class=\"line\">\t\t\t\t&#125; <span class=\"keyword\">else</span> &#123; <span class=\"comment\">// 3.</span></span><br><span class=\"line\">\t\t\t\t\tanswer+= Math.abs(store.x-dongPos.x) + Math.abs(store.y - dongPos.y);\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tSystem.out.println(answer);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">input</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tst = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\tM = stoi(st.nextToken()); <span class=\"comment\">// 열</span></span><br><span class=\"line\">\t\tN = stoi(st.nextToken()); <span class=\"comment\">// 행</span></span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tstoreNum = stoi(br.readLine());</span><br><span class=\"line\">\t\tstack = <span class=\"keyword\">new</span> Stack&lt;Pos&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span> ; i&lt; storeNum; i++) &#123;</span><br><span class=\"line\">\t\t\tst = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> dir = stoi(st.nextToken());</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> pos = stoi(st.nextToken());</span><br><span class=\"line\">\t\t\tstack.add(realPos(dir, pos));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tst = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\tdongPos = realPos(stoi(st.nextToken()), stoi(st.nextToken()));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">stoi</span><span class=\"params\">(String input)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Integer.parseInt(input);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Pos <span class=\"title\">realPos</span><span class=\"params\">(<span class=\"keyword\">int</span> dir, <span class=\"keyword\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dir == <span class=\"number\">1</span>) &#123; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pos(<span class=\"number\">0</span>, pos);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dir == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pos(N, pos);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dir == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pos(pos, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(dir == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Pos(pos, M);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pos</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> y;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Pos</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.x = x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.y = y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>스토어와 동근이의 위치는 테두리에만 존재하기 때문에 1,2,3,4 (동서남북) 여부와 왼쪽, 위쪽으로부터의 위치가 주어지면 실제 좌표 위치를 알 수 있다. </li>\n</ul>\n<ol>\n<li><p>동근이와 경비해야할 store가 서, 동에 위치하는 경우</p>\n<img src=\"../image/image-20210208224433936.png\" alt=\"image-20210208224433936\" style=\"zoom:67%;\" />\n\n<ul>\n<li><p>Math.abs(dongPos.y - store.y) 가 M이 라는 것은 서로 동, 서쪽으로 평행하다는 것을 의미한다. </p>\n</li>\n<li><p>이때 <strong>거리는 위로 가는 경우(회색), 아래로 가는 경우(빨간색) 중 거리가 더 가까운 값에 M 을 더한 값</strong>이다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>동근이와 경비해야할 store가 북, 남에 위치하는 경우</p>\n<img src=\"../image/image-20210208224412843.png\" alt=\"image-20210208224412843\" style=\"zoom:67%;\" />\n\n<ul>\n<li><p>Math.abs(dongPos.x - store.x) 가 N이 라는 것은 서로 북, 남쪽으로 평행하다는 것을 의미한다. </p>\n</li>\n<li><p>이때 <strong>거리는 동근이가 오른쪽로 가는 경우(회색), 왼쪽으로 가는 경우(빨간색) 중 거리가 더 가까운 값에 M 을 더한 값</strong>이다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer += Math.min(N-store.x + N- dongPos.x, store.x + dongPos.x) + M;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>동근이와 경비해야할 store가 평행하지 않는경우</p>\n<ul>\n<li><p>좌표끼리 뺀값의 절대값을 더한 값이 거리가 된다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">answer+= Math.abs(store.x-dongPos.x) + Math.abs(store.y - dongPos.y);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"[boj] 9657 돌 게임 3 (java)","date":"2021-01-27T18:13:00.000Z","_content":"\n* 문제링크: https://www.acmicpc.net/problem/9657 \n\n# 풀이\n\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tstatic boolean[] dp;\n\tstatic BufferedReader br;\n\tstatic int rock;\n\tstatic int turn = 0;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\trock = Integer.valueOf(br.readLine());\n\n\t\tdp = new boolean[1001];\n\t\tdp[1] = dp[3] = dp[4] = true;\n\t\tdp[2] = false;\n\n\t\tfor (int i = 5; i <= rock; i++) {\n\t\t\tdp[i] = !(dp[i - 1] && dp[i - 3] && dp[i - 4]);\n\t\t}\n\n\t\tif (dp[rock])\n\t\t\tSystem.out.println(\"SK\");\n\t\telse\n\t\t\tSystem.out.println(\"CY\");\n\t}\n}\n```\n\n* 이 문제는 `dp`를 이용하는 문제이다. 나는 메모이제이션할 배열로(`dp`) **상근이의 승리 여부**를 사용했다. \n  예를 들어, `dp[6]`에는 **돌이 6개일 때 상근이가 승리(true)할 지, 패배(false)할지**가 담긴다.\n\n  * SK(상근이)가 먼저 게임을 시작하고 `1개` 또는 `3개` 또는 `4개`의 돌을 주어갈 수 있으므로,\n\n    * `dp[1]`  `dp[3]`  `dp[4]` 는 무조건 **SK가 승리(true)**한다.\n    * ` dp[2]`는 SK가 1개 가져간 후, CY(창영이)가 1개 가져가는 방법밖에 없다. 즉, **SK가 패배**하는 것이 확실하므로 `dp[2]` 는 **false**이다.\n\n  * `dp[5]` 부터는 `마지막돌(5)` 기준으로 돌맹이 `하나 줍기전(4)`,` 세개 줍기전(2)`,` 네개 줍기 전(1)` 중에 한번이라도 `자신이 진 경우(2:false이다.)`가 있다면 !\n    `진 경우(2)`에서 그만큼(**세개**) 주으면 `dp[5]`에서는 승리할 수 있다는 뜻이 되므로 SK가 무조건 승리할 수 있게 된다.\n\n    * 이를 코드로 바꾸면 아래와 같다\n\n      ```java\n      dp[i] = !(dp[i - 1] && dp[i - 3] && dp[i - 4]);\n      ```\n\n      \n\n","source":"_posts/boj-9657.md","raw":"---\ntitle: \"[boj] 9657 돌 게임 3 (java)\"\ndate: 2021-01-28 3:13:00\ntag: 알고리즘\n---\n\n* 문제링크: https://www.acmicpc.net/problem/9657 \n\n# 풀이\n\n```java\nimport java.util.*;\nimport java.io.*;\n\npublic class Main {\n\tstatic boolean[] dp;\n\tstatic BufferedReader br;\n\tstatic int rock;\n\tstatic int turn = 0;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\tbr = new BufferedReader(new InputStreamReader(System.in));\n\t\trock = Integer.valueOf(br.readLine());\n\n\t\tdp = new boolean[1001];\n\t\tdp[1] = dp[3] = dp[4] = true;\n\t\tdp[2] = false;\n\n\t\tfor (int i = 5; i <= rock; i++) {\n\t\t\tdp[i] = !(dp[i - 1] && dp[i - 3] && dp[i - 4]);\n\t\t}\n\n\t\tif (dp[rock])\n\t\t\tSystem.out.println(\"SK\");\n\t\telse\n\t\t\tSystem.out.println(\"CY\");\n\t}\n}\n```\n\n* 이 문제는 `dp`를 이용하는 문제이다. 나는 메모이제이션할 배열로(`dp`) **상근이의 승리 여부**를 사용했다. \n  예를 들어, `dp[6]`에는 **돌이 6개일 때 상근이가 승리(true)할 지, 패배(false)할지**가 담긴다.\n\n  * SK(상근이)가 먼저 게임을 시작하고 `1개` 또는 `3개` 또는 `4개`의 돌을 주어갈 수 있으므로,\n\n    * `dp[1]`  `dp[3]`  `dp[4]` 는 무조건 **SK가 승리(true)**한다.\n    * ` dp[2]`는 SK가 1개 가져간 후, CY(창영이)가 1개 가져가는 방법밖에 없다. 즉, **SK가 패배**하는 것이 확실하므로 `dp[2]` 는 **false**이다.\n\n  * `dp[5]` 부터는 `마지막돌(5)` 기준으로 돌맹이 `하나 줍기전(4)`,` 세개 줍기전(2)`,` 네개 줍기 전(1)` 중에 한번이라도 `자신이 진 경우(2:false이다.)`가 있다면 !\n    `진 경우(2)`에서 그만큼(**세개**) 주으면 `dp[5]`에서는 승리할 수 있다는 뜻이 되므로 SK가 무조건 승리할 수 있게 된다.\n\n    * 이를 코드로 바꾸면 아래와 같다\n\n      ```java\n      dp[i] = !(dp[i - 1] && dp[i - 3] && dp[i - 4]);\n      ```\n\n      \n\n","slug":"boj-9657","published":1,"updated":"2021-02-08T18:25:03.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0k5001mf9c9445zc5e9","content":"<ul>\n<li>문제링크: <a href=\"https://www.acmicpc.net/problem/9657\">https://www.acmicpc.net/problem/9657</a> </li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span>[] dp;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> BufferedReader br;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> rock;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> turn = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tbr = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">\t\trock = Integer.valueOf(br.readLine());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">1001</span>];</span><br><span class=\"line\">\t\tdp[<span class=\"number\">1</span>] = dp[<span class=\"number\">3</span>] = dp[<span class=\"number\">4</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">2</span>] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">5</span>; i &lt;= rock; i++) &#123;</span><br><span class=\"line\">\t\t\tdp[i] = !(dp[i - <span class=\"number\">1</span>] &amp;&amp; dp[i - <span class=\"number\">3</span>] &amp;&amp; dp[i - <span class=\"number\">4</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dp[rock])</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;SK&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;CY&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>이 문제는 <code>dp</code>를 이용하는 문제이다. 나는 메모이제이션할 배열로(<code>dp</code>) <strong>상근이의 승리 여부</strong>를 사용했다.<br>예를 들어, <code>dp[6]</code>에는 <strong>돌이 6개일 때 상근이가 승리(true)할 지, 패배(false)할지</strong>가 담긴다.</p>\n<ul>\n<li><p>SK(상근이)가 먼저 게임을 시작하고 <code>1개</code> 또는 <code>3개</code> 또는 <code>4개</code>의 돌을 주어갈 수 있으므로,</p>\n<ul>\n<li><code>dp[1]</code>  <code>dp[3]</code>  <code>dp[4]</code> 는 무조건 **SK가 승리(true)**한다.</li>\n<li><code> dp[2]</code>는 SK가 1개 가져간 후, CY(창영이)가 1개 가져가는 방법밖에 없다. 즉, <strong>SK가 패배</strong>하는 것이 확실하므로 <code>dp[2]</code> 는 <strong>false</strong>이다.</li>\n</ul>\n</li>\n<li><p><code>dp[5]</code> 부터는 <code>마지막돌(5)</code> 기준으로 돌맹이 <code>하나 줍기전(4)</code>,<code> 세개 줍기전(2)</code>,<code> 네개 줍기 전(1)</code> 중에 한번이라도 <code>자신이 진 경우(2:false이다.)</code>가 있다면 !<br><code>진 경우(2)</code>에서 그만큼(<strong>세개</strong>) 주으면 <code>dp[5]</code>에서는 승리할 수 있다는 뜻이 되므로 SK가 무조건 승리할 수 있게 된다.</p>\n<ul>\n<li><p>이를 코드로 바꾸면 아래와 같다</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i] = !(dp[i - <span class=\"number\">1</span>] &amp;&amp; dp[i - <span class=\"number\">3</span>] &amp;&amp; dp[i - <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>문제링크: <a href=\"https://www.acmicpc.net/problem/9657\">https://www.acmicpc.net/problem/9657</a> </li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span>[] dp;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> BufferedReader br;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> rock;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> turn = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\tbr = <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">\t\trock = Integer.valueOf(br.readLine());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdp = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[<span class=\"number\">1001</span>];</span><br><span class=\"line\">\t\tdp[<span class=\"number\">1</span>] = dp[<span class=\"number\">3</span>] = dp[<span class=\"number\">4</span>] = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\tdp[<span class=\"number\">2</span>] = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">5</span>; i &lt;= rock; i++) &#123;</span><br><span class=\"line\">\t\t\tdp[i] = !(dp[i - <span class=\"number\">1</span>] &amp;&amp; dp[i - <span class=\"number\">3</span>] &amp;&amp; dp[i - <span class=\"number\">4</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (dp[rock])</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;SK&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;CY&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>이 문제는 <code>dp</code>를 이용하는 문제이다. 나는 메모이제이션할 배열로(<code>dp</code>) <strong>상근이의 승리 여부</strong>를 사용했다.<br>예를 들어, <code>dp[6]</code>에는 <strong>돌이 6개일 때 상근이가 승리(true)할 지, 패배(false)할지</strong>가 담긴다.</p>\n<ul>\n<li><p>SK(상근이)가 먼저 게임을 시작하고 <code>1개</code> 또는 <code>3개</code> 또는 <code>4개</code>의 돌을 주어갈 수 있으므로,</p>\n<ul>\n<li><code>dp[1]</code>  <code>dp[3]</code>  <code>dp[4]</code> 는 무조건 **SK가 승리(true)**한다.</li>\n<li><code> dp[2]</code>는 SK가 1개 가져간 후, CY(창영이)가 1개 가져가는 방법밖에 없다. 즉, <strong>SK가 패배</strong>하는 것이 확실하므로 <code>dp[2]</code> 는 <strong>false</strong>이다.</li>\n</ul>\n</li>\n<li><p><code>dp[5]</code> 부터는 <code>마지막돌(5)</code> 기준으로 돌맹이 <code>하나 줍기전(4)</code>,<code> 세개 줍기전(2)</code>,<code> 네개 줍기 전(1)</code> 중에 한번이라도 <code>자신이 진 경우(2:false이다.)</code>가 있다면 !<br><code>진 경우(2)</code>에서 그만큼(<strong>세개</strong>) 주으면 <code>dp[5]</code>에서는 승리할 수 있다는 뜻이 되므로 SK가 무조건 승리할 수 있게 된다.</p>\n<ul>\n<li><p>이를 코드로 바꾸면 아래와 같다</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i] = !(dp[i - <span class=\"number\">1</span>] &amp;&amp; dp[i - <span class=\"number\">3</span>] &amp;&amp; dp[i - <span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"[프로그래머스] 이분탐색 - 입국심사 (파이썬/ python)","dates":"2020-08-27T13:10:00.000Z","_content":"\n# 문제\n\nn명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.\n\n처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.\n\n모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.\n\n입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한사항\n\n- 입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.\n- 각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.\n- 심사관은 1명 이상 100,000명 이하입니다.\n\n##### 입출력 예\n\n| n    | times   | return |\n| ---- | ------- | ------ |\n| 6    | [7, 10] | 28     |\n\n##### 입출력 예 설명\n\n가장 첫 두 사람은 바로 심사를 받으러 갑니다.\n\n7분이 되었을 때, 첫 번째 심사대가 비고 3번째 사람이 심사를 받습니다.\n\n10분이 되었을 때, 두 번째 심사대가 비고 4번째 사람이 심사를 받습니다.\n\n14분이 되었을 때, 첫 번째 심사대가 비고 5번째 사람이 심사를 받습니다.\n\n20분이 되었을 때, 두 번째 심사대가 비지만 6번째 사람이 그곳에서 심사를 받지 않고 1분을 더 기다린 후에 첫 번째 심사대에서 심사를 받으면 28분에 모든 사람의 심사가 끝납니다.\n\n# 풀이\n\n이분 탐색을 이용하여 푸는 문제이다.\n\n\n\n## 이분 탐색(이진 탐색)이란\n\n> 동영상을 보면 이분 탐색에 대한 이해가 쉬울 것이다! \n>\n> 링크 : https://www.youtube.com/watch?v=SKcG0p73yo4\n\n**이분 탐색**은 탐색 기법 중 하나로써 원하는 탐색 범위를 두 부분으로 분할해서 찾는 방식이다. 탐색 범위는 반드시 **정렬**되어 있어야 한다. 전체 탐색에 비해 속도가 빠르다.\n\n\n\n탐색 범위의 *처음*(*left*)과 *끝*(*right*)의 *중간*(*mid*)과 탐색하고자 하는 값을 비교하여 \n\n1. 탐색 값이 *중간*(*mid*)보다 작은 경우에는 범위의 *끝*(*right*)을 *중간-1*(*mid* -*1*)값으로 설정하고,\n2. 탐색 값이 *중간*(*mid*)보다 큰 경우에는 범위의 *처음*(*left*)을 *중간+1*(*mid*+*1*)값으로 설정한다.\n\n*left* 와 *right* 를 좁혀가며 최종적으로 탐색 값을 찾는다.\n\n\n\n**코드**\n\n```python\ndef solution(n, times):\n    answer = 0\n    # right는 가장 비효율적으로 심사했을 때 걸리는 시간\n    # 가장 긴 심사시간이 소요되는 심사관에게 n 명 모두 심사받는 경우이다.\n    left, right = 1, max(times) * n\n    while left <= right:\n        mid = (left+ right) // 2\n        people = 0\n        for time in times:\n            # people 은 모든 심사관들이 mid분 동안 심사한 사람의 수\n            people += mid // time\n            # 모든 심사관을 거치지 않아도 mid분 동안 n명 이상의 심사를 할 수 있다면 반복문을 나간다.\n            if people >= n:\n                break\n        \n        # 심사한 사람의 수가 심사 받아야할 사람의 수(n)보다 많거나 같은 경우\n        if people >= n:\n            answer = mid\n            right = mid - 1\n        # 심사한 사람의 수가 심사 받아야할 사람의 수(n)보다 적은 경우\n        elif people < n:\n            left = mid + 1\n            \n    return answer\n```\n\n이분 탐색(이진 탐색)으로 알고리즘을 푸는 것이 처음이라서 블로그들의 설명을 요리조리 보면서 이해했다 ㅠㅠ 그래서 주석도 많다\n\n\n\n이분 탐색을 할 때는 **'이분 탐색의 범위는 무엇으로 할지'** 와 **'이분 탐색의 기준을 무엇으로 할지'** 을 잡아야한다.\n\n* 범위 : 심사를 하는데 총 걸리는 시간으로, 1분 부터 가장 비효율적으로 심사를 받았을 때 걸리는 시간(분)으로 하였다.\n\n* mid : 모든 심사관들에게 주어진 시간이다. 따라서 people 은 모든 심사관들이 mid분 동안 심사한 사람의 수가 된다.\n\n* 기준 :  mid 동안 심사한 사람의 수(people)가 \n  1. 심사 받아야할 사람의 수(n)보다 **많거나 같을 경우**에는 시간이 충분했던 것이므로 **주어진 시간을** **줄이고** ( right = mid - 1 -> right 를 줄이면 left와 right의 중간 값인 mid 도 줄어드니까 주어진 시간이 줄어든다.)  \n  2. 심사 받아야할 사람의 수(n)보다 **적은 경우**에는 시간이 부족했던 것이므로 **주어진 시간을** **늘린다**. (left = mid + 1)\n\n\n\n이분 탐색은 범위와 기준을 잡는 것이 핵심인 것 같다!","source":"_posts/programmers- Immigration.md","raw":"---\ntitle: \"[프로그래머스] 이분탐색 - 입국심사 (파이썬/ python)\"\ndates: 2020-08-27 22:10:00\ntags: 알고리즘\n---\n\n# 문제\n\nn명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.\n\n처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.\n\n모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.\n\n입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한사항\n\n- 입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.\n- 각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.\n- 심사관은 1명 이상 100,000명 이하입니다.\n\n##### 입출력 예\n\n| n    | times   | return |\n| ---- | ------- | ------ |\n| 6    | [7, 10] | 28     |\n\n##### 입출력 예 설명\n\n가장 첫 두 사람은 바로 심사를 받으러 갑니다.\n\n7분이 되었을 때, 첫 번째 심사대가 비고 3번째 사람이 심사를 받습니다.\n\n10분이 되었을 때, 두 번째 심사대가 비고 4번째 사람이 심사를 받습니다.\n\n14분이 되었을 때, 첫 번째 심사대가 비고 5번째 사람이 심사를 받습니다.\n\n20분이 되었을 때, 두 번째 심사대가 비지만 6번째 사람이 그곳에서 심사를 받지 않고 1분을 더 기다린 후에 첫 번째 심사대에서 심사를 받으면 28분에 모든 사람의 심사가 끝납니다.\n\n# 풀이\n\n이분 탐색을 이용하여 푸는 문제이다.\n\n\n\n## 이분 탐색(이진 탐색)이란\n\n> 동영상을 보면 이분 탐색에 대한 이해가 쉬울 것이다! \n>\n> 링크 : https://www.youtube.com/watch?v=SKcG0p73yo4\n\n**이분 탐색**은 탐색 기법 중 하나로써 원하는 탐색 범위를 두 부분으로 분할해서 찾는 방식이다. 탐색 범위는 반드시 **정렬**되어 있어야 한다. 전체 탐색에 비해 속도가 빠르다.\n\n\n\n탐색 범위의 *처음*(*left*)과 *끝*(*right*)의 *중간*(*mid*)과 탐색하고자 하는 값을 비교하여 \n\n1. 탐색 값이 *중간*(*mid*)보다 작은 경우에는 범위의 *끝*(*right*)을 *중간-1*(*mid* -*1*)값으로 설정하고,\n2. 탐색 값이 *중간*(*mid*)보다 큰 경우에는 범위의 *처음*(*left*)을 *중간+1*(*mid*+*1*)값으로 설정한다.\n\n*left* 와 *right* 를 좁혀가며 최종적으로 탐색 값을 찾는다.\n\n\n\n**코드**\n\n```python\ndef solution(n, times):\n    answer = 0\n    # right는 가장 비효율적으로 심사했을 때 걸리는 시간\n    # 가장 긴 심사시간이 소요되는 심사관에게 n 명 모두 심사받는 경우이다.\n    left, right = 1, max(times) * n\n    while left <= right:\n        mid = (left+ right) // 2\n        people = 0\n        for time in times:\n            # people 은 모든 심사관들이 mid분 동안 심사한 사람의 수\n            people += mid // time\n            # 모든 심사관을 거치지 않아도 mid분 동안 n명 이상의 심사를 할 수 있다면 반복문을 나간다.\n            if people >= n:\n                break\n        \n        # 심사한 사람의 수가 심사 받아야할 사람의 수(n)보다 많거나 같은 경우\n        if people >= n:\n            answer = mid\n            right = mid - 1\n        # 심사한 사람의 수가 심사 받아야할 사람의 수(n)보다 적은 경우\n        elif people < n:\n            left = mid + 1\n            \n    return answer\n```\n\n이분 탐색(이진 탐색)으로 알고리즘을 푸는 것이 처음이라서 블로그들의 설명을 요리조리 보면서 이해했다 ㅠㅠ 그래서 주석도 많다\n\n\n\n이분 탐색을 할 때는 **'이분 탐색의 범위는 무엇으로 할지'** 와 **'이분 탐색의 기준을 무엇으로 할지'** 을 잡아야한다.\n\n* 범위 : 심사를 하는데 총 걸리는 시간으로, 1분 부터 가장 비효율적으로 심사를 받았을 때 걸리는 시간(분)으로 하였다.\n\n* mid : 모든 심사관들에게 주어진 시간이다. 따라서 people 은 모든 심사관들이 mid분 동안 심사한 사람의 수가 된다.\n\n* 기준 :  mid 동안 심사한 사람의 수(people)가 \n  1. 심사 받아야할 사람의 수(n)보다 **많거나 같을 경우**에는 시간이 충분했던 것이므로 **주어진 시간을** **줄이고** ( right = mid - 1 -> right 를 줄이면 left와 right의 중간 값인 mid 도 줄어드니까 주어진 시간이 줄어든다.)  \n  2. 심사 받아야할 사람의 수(n)보다 **적은 경우**에는 시간이 부족했던 것이므로 **주어진 시간을** **늘린다**. (left = mid + 1)\n\n\n\n이분 탐색은 범위와 기준을 잡는 것이 핵심인 것 같다!","slug":"programmers- Immigration","published":1,"date":"2021-02-08T18:25:02.906Z","updated":"2021-02-08T18:25:02.925Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0k6001nf9c90d7h0mbo","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.</p>\n<p>처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.</p>\n<p>모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.</p>\n<p>입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.</li>\n<li>각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.</li>\n<li>심사관은 1명 이상 100,000명 이하입니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>n</th>\n<th>times</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>6</td>\n<td>[7, 10]</td>\n<td>28</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>가장 첫 두 사람은 바로 심사를 받으러 갑니다.</p>\n<p>7분이 되었을 때, 첫 번째 심사대가 비고 3번째 사람이 심사를 받습니다.</p>\n<p>10분이 되었을 때, 두 번째 심사대가 비고 4번째 사람이 심사를 받습니다.</p>\n<p>14분이 되었을 때, 첫 번째 심사대가 비고 5번째 사람이 심사를 받습니다.</p>\n<p>20분이 되었을 때, 두 번째 심사대가 비지만 6번째 사람이 그곳에서 심사를 받지 않고 1분을 더 기다린 후에 첫 번째 심사대에서 심사를 받으면 28분에 모든 사람의 심사가 끝납니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>이분 탐색을 이용하여 푸는 문제이다.</p>\n<h2 id=\"이분-탐색-이진-탐색-이란\"><a href=\"#이분-탐색-이진-탐색-이란\" class=\"headerlink\" title=\"이분 탐색(이진 탐색)이란\"></a>이분 탐색(이진 탐색)이란</h2><blockquote>\n<p>동영상을 보면 이분 탐색에 대한 이해가 쉬울 것이다! </p>\n<p>링크 : <a href=\"https://www.youtube.com/watch?v=SKcG0p73yo4\">https://www.youtube.com/watch?v=SKcG0p73yo4</a></p>\n</blockquote>\n<p><strong>이분 탐색</strong>은 탐색 기법 중 하나로써 원하는 탐색 범위를 두 부분으로 분할해서 찾는 방식이다. 탐색 범위는 반드시 <strong>정렬</strong>되어 있어야 한다. 전체 탐색에 비해 속도가 빠르다.</p>\n<p>탐색 범위의 <em>처음</em>(<em>left</em>)과 <em>끝</em>(<em>right</em>)의 <em>중간</em>(<em>mid</em>)과 탐색하고자 하는 값을 비교하여 </p>\n<ol>\n<li>탐색 값이 <em>중간</em>(<em>mid</em>)보다 작은 경우에는 범위의 <em>끝</em>(<em>right</em>)을 <em>중간-1</em>(<em>mid</em> -<em>1</em>)값으로 설정하고,</li>\n<li>탐색 값이 <em>중간</em>(<em>mid</em>)보다 큰 경우에는 범위의 <em>처음</em>(<em>left</em>)을 <em>중간+1</em>(<em>mid</em>+<em>1</em>)값으로 설정한다.</li>\n</ol>\n<p><em>left</em> 와 <em>right</em> 를 좁혀가며 최종적으로 탐색 값을 찾는다.</p>\n<p><strong>코드</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">n, times</span>):</span></span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># right는 가장 비효율적으로 심사했을 때 걸리는 시간</span></span><br><span class=\"line\">    <span class=\"comment\"># 가장 긴 심사시간이 소요되는 심사관에게 n 명 모두 심사받는 경우이다.</span></span><br><span class=\"line\">    left, right = <span class=\"number\">1</span>, <span class=\"built_in\">max</span>(times) * n</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt;= right:</span><br><span class=\"line\">        mid = (left+ right) // <span class=\"number\">2</span></span><br><span class=\"line\">        people = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> time <span class=\"keyword\">in</span> times:</span><br><span class=\"line\">            <span class=\"comment\"># people 은 모든 심사관들이 mid분 동안 심사한 사람의 수</span></span><br><span class=\"line\">            people += mid // time</span><br><span class=\"line\">            <span class=\"comment\"># 모든 심사관을 거치지 않아도 mid분 동안 n명 이상의 심사를 할 수 있다면 반복문을 나간다.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> people &gt;= n:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 심사한 사람의 수가 심사 받아야할 사람의 수(n)보다 많거나 같은 경우</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> people &gt;= n:</span><br><span class=\"line\">            answer = mid</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 심사한 사람의 수가 심사 받아야할 사람의 수(n)보다 적은 경우</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> people &lt; n:</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<p>이분 탐색(이진 탐색)으로 알고리즘을 푸는 것이 처음이라서 블로그들의 설명을 요리조리 보면서 이해했다 ㅠㅠ 그래서 주석도 많다</p>\n<p>이분 탐색을 할 때는 <strong>‘이분 탐색의 범위는 무엇으로 할지’</strong> 와 <strong>‘이분 탐색의 기준을 무엇으로 할지’</strong> 을 잡아야한다.</p>\n<ul>\n<li><p>범위 : 심사를 하는데 총 걸리는 시간으로, 1분 부터 가장 비효율적으로 심사를 받았을 때 걸리는 시간(분)으로 하였다.</p>\n</li>\n<li><p>mid : 모든 심사관들에게 주어진 시간이다. 따라서 people 은 모든 심사관들이 mid분 동안 심사한 사람의 수가 된다.</p>\n</li>\n<li><p>기준 :  mid 동안 심사한 사람의 수(people)가 </p>\n<ol>\n<li>심사 받아야할 사람의 수(n)보다 <strong>많거나 같을 경우</strong>에는 시간이 충분했던 것이므로 <strong>주어진 시간을</strong> <strong>줄이고</strong> ( right = mid - 1 -&gt; right 를 줄이면 left와 right의 중간 값인 mid 도 줄어드니까 주어진 시간이 줄어든다.)  </li>\n<li>심사 받아야할 사람의 수(n)보다 <strong>적은 경우</strong>에는 시간이 부족했던 것이므로 <strong>주어진 시간을</strong> <strong>늘린다</strong>. (left = mid + 1)</li>\n</ol>\n</li>\n</ul>\n<p>이분 탐색은 범위와 기준을 잡는 것이 핵심인 것 같다!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>n명이 입국심사를 위해 줄을 서서 기다리고 있습니다. 각 입국심사대에 있는 심사관마다 심사하는데 걸리는 시간은 다릅니다.</p>\n<p>처음에 모든 심사대는 비어있습니다. 한 심사대에서는 동시에 한 명만 심사를 할 수 있습니다. 가장 앞에 서 있는 사람은 비어 있는 심사대로 가서 심사를 받을 수 있습니다. 하지만 더 빨리 끝나는 심사대가 있으면 기다렸다가 그곳으로 가서 심사를 받을 수도 있습니다.</p>\n<p>모든 사람이 심사를 받는데 걸리는 시간을 최소로 하고 싶습니다.</p>\n<p>입국심사를 기다리는 사람 수 n, 각 심사관이 한 명을 심사하는데 걸리는 시간이 담긴 배열 times가 매개변수로 주어질 때, 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>입국심사를 기다리는 사람은 1명 이상 1,000,000,000명 이하입니다.</li>\n<li>각 심사관이 한 명을 심사하는데 걸리는 시간은 1분 이상 1,000,000,000분 이하입니다.</li>\n<li>심사관은 1명 이상 100,000명 이하입니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>n</th>\n<th>times</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>6</td>\n<td>[7, 10]</td>\n<td>28</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>가장 첫 두 사람은 바로 심사를 받으러 갑니다.</p>\n<p>7분이 되었을 때, 첫 번째 심사대가 비고 3번째 사람이 심사를 받습니다.</p>\n<p>10분이 되었을 때, 두 번째 심사대가 비고 4번째 사람이 심사를 받습니다.</p>\n<p>14분이 되었을 때, 첫 번째 심사대가 비고 5번째 사람이 심사를 받습니다.</p>\n<p>20분이 되었을 때, 두 번째 심사대가 비지만 6번째 사람이 그곳에서 심사를 받지 않고 1분을 더 기다린 후에 첫 번째 심사대에서 심사를 받으면 28분에 모든 사람의 심사가 끝납니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>이분 탐색을 이용하여 푸는 문제이다.</p>\n<h2 id=\"이분-탐색-이진-탐색-이란\"><a href=\"#이분-탐색-이진-탐색-이란\" class=\"headerlink\" title=\"이분 탐색(이진 탐색)이란\"></a>이분 탐색(이진 탐색)이란</h2><blockquote>\n<p>동영상을 보면 이분 탐색에 대한 이해가 쉬울 것이다! </p>\n<p>링크 : <a href=\"https://www.youtube.com/watch?v=SKcG0p73yo4\">https://www.youtube.com/watch?v=SKcG0p73yo4</a></p>\n</blockquote>\n<p><strong>이분 탐색</strong>은 탐색 기법 중 하나로써 원하는 탐색 범위를 두 부분으로 분할해서 찾는 방식이다. 탐색 범위는 반드시 <strong>정렬</strong>되어 있어야 한다. 전체 탐색에 비해 속도가 빠르다.</p>\n<p>탐색 범위의 <em>처음</em>(<em>left</em>)과 <em>끝</em>(<em>right</em>)의 <em>중간</em>(<em>mid</em>)과 탐색하고자 하는 값을 비교하여 </p>\n<ol>\n<li>탐색 값이 <em>중간</em>(<em>mid</em>)보다 작은 경우에는 범위의 <em>끝</em>(<em>right</em>)을 <em>중간-1</em>(<em>mid</em> -<em>1</em>)값으로 설정하고,</li>\n<li>탐색 값이 <em>중간</em>(<em>mid</em>)보다 큰 경우에는 범위의 <em>처음</em>(<em>left</em>)을 <em>중간+1</em>(<em>mid</em>+<em>1</em>)값으로 설정한다.</li>\n</ol>\n<p><em>left</em> 와 <em>right</em> 를 좁혀가며 최종적으로 탐색 값을 찾는다.</p>\n<p><strong>코드</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">n, times</span>):</span></span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"comment\"># right는 가장 비효율적으로 심사했을 때 걸리는 시간</span></span><br><span class=\"line\">    <span class=\"comment\"># 가장 긴 심사시간이 소요되는 심사관에게 n 명 모두 심사받는 경우이다.</span></span><br><span class=\"line\">    left, right = <span class=\"number\">1</span>, <span class=\"built_in\">max</span>(times) * n</span><br><span class=\"line\">    <span class=\"keyword\">while</span> left &lt;= right:</span><br><span class=\"line\">        mid = (left+ right) // <span class=\"number\">2</span></span><br><span class=\"line\">        people = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> time <span class=\"keyword\">in</span> times:</span><br><span class=\"line\">            <span class=\"comment\"># people 은 모든 심사관들이 mid분 동안 심사한 사람의 수</span></span><br><span class=\"line\">            people += mid // time</span><br><span class=\"line\">            <span class=\"comment\"># 모든 심사관을 거치지 않아도 mid분 동안 n명 이상의 심사를 할 수 있다면 반복문을 나간다.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> people &gt;= n:</span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\"># 심사한 사람의 수가 심사 받아야할 사람의 수(n)보다 많거나 같은 경우</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> people &gt;= n:</span><br><span class=\"line\">            answer = mid</span><br><span class=\"line\">            right = mid - <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 심사한 사람의 수가 심사 받아야할 사람의 수(n)보다 적은 경우</span></span><br><span class=\"line\">        <span class=\"keyword\">elif</span> people &lt; n:</span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<p>이분 탐색(이진 탐색)으로 알고리즘을 푸는 것이 처음이라서 블로그들의 설명을 요리조리 보면서 이해했다 ㅠㅠ 그래서 주석도 많다</p>\n<p>이분 탐색을 할 때는 <strong>‘이분 탐색의 범위는 무엇으로 할지’</strong> 와 <strong>‘이분 탐색의 기준을 무엇으로 할지’</strong> 을 잡아야한다.</p>\n<ul>\n<li><p>범위 : 심사를 하는데 총 걸리는 시간으로, 1분 부터 가장 비효율적으로 심사를 받았을 때 걸리는 시간(분)으로 하였다.</p>\n</li>\n<li><p>mid : 모든 심사관들에게 주어진 시간이다. 따라서 people 은 모든 심사관들이 mid분 동안 심사한 사람의 수가 된다.</p>\n</li>\n<li><p>기준 :  mid 동안 심사한 사람의 수(people)가 </p>\n<ol>\n<li>심사 받아야할 사람의 수(n)보다 <strong>많거나 같을 경우</strong>에는 시간이 충분했던 것이므로 <strong>주어진 시간을</strong> <strong>줄이고</strong> ( right = mid - 1 -&gt; right 를 줄이면 left와 right의 중간 값인 mid 도 줄어드니까 주어진 시간이 줄어든다.)  </li>\n<li>심사 받아야할 사람의 수(n)보다 <strong>적은 경우</strong>에는 시간이 부족했던 것이므로 <strong>주어진 시간을</strong> <strong>늘린다</strong>. (left = mid + 1)</li>\n</ol>\n</li>\n</ul>\n<p>이분 탐색은 범위와 기준을 잡는 것이 핵심인 것 같다!</p>\n"},{"title":"[프로그래머스] 카펫 - 파이썬","date":"2020-03-04T12:06:00.000Z","_content":"\n\n\n# 문제설명\n\nLeo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 빨간색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.\n\n![image.png](https://grepp-programmers.s3.amazonaws.com/files/ybm/7c94563a35/2ff27ac9-97d0-43a9-9cf8-a344b8e7912e.png)\n\nLeo는 집으로 돌아와서 아까 본 카펫의 빨간색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.\n\nLeo가 본 카펫에서 갈색 격자의 수 brown, 빨간색 격자의 수 red가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한사항\n\n- 갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.\n- 빨간색 격자의 수 red는 1 이상 2,000,000 이하인 자연수입니다.\n- 카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.\n\n##### 입출력 예\n\n| brown | red  | return |\n| ----- | ---- | ------ |\n| 10    | 2    | [4, 3] |\n| 8     | 1    | [3, 3] |\n| 24    | 24   | [8, 6] |\n\n[출처](http://hsin.hr/coci/archive/2010_2011/contest4_tasks.pdf)\n\n※ 공지 - 2020년 2월 3일 테스트케이스가 추가되었습니다.\n\n# 풀이\n\n이 문제는 완전 탐색(exhausitve search)를 이용하여 푸는 문제이다. \n\n\n\n**red** 의 가로를 `x` 세로를 `y`라고할 때, \n\n**red**는 `x*y` 가 되고 **brown**은 `2(x*y)+4`가 된다. \n\n**brown**의 가로와 세로는 `x+2` , `y+2` 이다.\n\n\n\n이 때 `x`는 `y`보다 길거나 같으며 `red = x*y`를 성립하기 때문에, `y`는 **red**의 제곱근보다 작거나 같다.\n\n\n\n처음엔\n\n```python\ndef solution(brown, red):\n    for y in range(1, int(red**0.5)+1):\n        x = red // y\n        if 2*(x+y) +4 == brown:\n            return [x+2,y+2]\n    return answer\n```\n\n이렇게 풀었더니 13개의 테스트 중 5개를 실패하였다.\n\n이유는 나머지가 0이 아닌 상황이 나오기 때문이었다. \n\n\n\n`if red % y == 0` 를 추가하였다.\n\n```python\ndef solution(brown, red):\n    for y in range(1, int(red**0.5)+1):\n        if red % y ==0:\n            x = red // y\n            if 2*(x+y) +4 == brown:\n                return [x+2,y+2]\n    return answer\n\n```\n\n끝 !","source":"_posts/programmers-carpet.md","raw":"---\ntitle: \"[프로그래머스] 카펫 - 파이썬\"\ndate: 2020-03-04 21:06:00\ntags: 알고리즘\n---\n\n\n\n# 문제설명\n\nLeo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 빨간색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.\n\n![image.png](https://grepp-programmers.s3.amazonaws.com/files/ybm/7c94563a35/2ff27ac9-97d0-43a9-9cf8-a344b8e7912e.png)\n\nLeo는 집으로 돌아와서 아까 본 카펫의 빨간색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.\n\nLeo가 본 카펫에서 갈색 격자의 수 brown, 빨간색 격자의 수 red가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한사항\n\n- 갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.\n- 빨간색 격자의 수 red는 1 이상 2,000,000 이하인 자연수입니다.\n- 카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.\n\n##### 입출력 예\n\n| brown | red  | return |\n| ----- | ---- | ------ |\n| 10    | 2    | [4, 3] |\n| 8     | 1    | [3, 3] |\n| 24    | 24   | [8, 6] |\n\n[출처](http://hsin.hr/coci/archive/2010_2011/contest4_tasks.pdf)\n\n※ 공지 - 2020년 2월 3일 테스트케이스가 추가되었습니다.\n\n# 풀이\n\n이 문제는 완전 탐색(exhausitve search)를 이용하여 푸는 문제이다. \n\n\n\n**red** 의 가로를 `x` 세로를 `y`라고할 때, \n\n**red**는 `x*y` 가 되고 **brown**은 `2(x*y)+4`가 된다. \n\n**brown**의 가로와 세로는 `x+2` , `y+2` 이다.\n\n\n\n이 때 `x`는 `y`보다 길거나 같으며 `red = x*y`를 성립하기 때문에, `y`는 **red**의 제곱근보다 작거나 같다.\n\n\n\n처음엔\n\n```python\ndef solution(brown, red):\n    for y in range(1, int(red**0.5)+1):\n        x = red // y\n        if 2*(x+y) +4 == brown:\n            return [x+2,y+2]\n    return answer\n```\n\n이렇게 풀었더니 13개의 테스트 중 5개를 실패하였다.\n\n이유는 나머지가 0이 아닌 상황이 나오기 때문이었다. \n\n\n\n`if red % y == 0` 를 추가하였다.\n\n```python\ndef solution(brown, red):\n    for y in range(1, int(red**0.5)+1):\n        if red % y ==0:\n            x = red // y\n            if 2*(x+y) +4 == brown:\n                return [x+2,y+2]\n    return answer\n\n```\n\n끝 !","slug":"programmers-carpet","published":1,"updated":"2021-02-08T18:25:02.857Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0k7001qf9c943og3769","content":"<h1 id=\"문제설명\"><a href=\"#문제설명\" class=\"headerlink\" title=\"문제설명\"></a>문제설명</h1><p>Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 빨간색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.</p>\n<p><img src=\"https://grepp-programmers.s3.amazonaws.com/files/ybm/7c94563a35/2ff27ac9-97d0-43a9-9cf8-a344b8e7912e.png\" alt=\"image.png\"></p>\n<p>Leo는 집으로 돌아와서 아까 본 카펫의 빨간색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.</p>\n<p>Leo가 본 카펫에서 갈색 격자의 수 brown, 빨간색 격자의 수 red가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.</li>\n<li>빨간색 격자의 수 red는 1 이상 2,000,000 이하인 자연수입니다.</li>\n<li>카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>brown</th>\n<th>red</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10</td>\n<td>2</td>\n<td>[4, 3]</td>\n</tr>\n<tr>\n<td>8</td>\n<td>1</td>\n<td>[3, 3]</td>\n</tr>\n<tr>\n<td>24</td>\n<td>24</td>\n<td>[8, 6]</td>\n</tr>\n</tbody></table>\n<p><a href=\"http://hsin.hr/coci/archive/2010_2011/contest4_tasks.pdf\">출처</a></p>\n<p>※ 공지 - 2020년 2월 3일 테스트케이스가 추가되었습니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>이 문제는 완전 탐색(exhausitve search)를 이용하여 푸는 문제이다. </p>\n<p><strong>red</strong> 의 가로를 <code>x</code> 세로를 <code>y</code>라고할 때, </p>\n<p><strong>red</strong>는 <code>x*y</code> 가 되고 <strong>brown</strong>은 <code>2(x*y)+4</code>가 된다. </p>\n<p><strong>brown</strong>의 가로와 세로는 <code>x+2</code> , <code>y+2</code> 이다.</p>\n<p>이 때 <code>x</code>는 <code>y</code>보다 길거나 같으며 <code>red = x*y</code>를 성립하기 때문에, <code>y</code>는 <strong>red</strong>의 제곱근보다 작거나 같다.</p>\n<p>처음엔</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">brown, red</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">int</span>(red**<span class=\"number\">0.5</span>)+<span class=\"number\">1</span>):</span><br><span class=\"line\">        x = red // y</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">2</span>*(x+y) +<span class=\"number\">4</span> == brown:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [x+<span class=\"number\">2</span>,y+<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<p>이렇게 풀었더니 13개의 테스트 중 5개를 실패하였다.</p>\n<p>이유는 나머지가 0이 아닌 상황이 나오기 때문이었다. </p>\n<p><code>if red % y == 0</code> 를 추가하였다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">brown, red</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">int</span>(red**<span class=\"number\">0.5</span>)+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> red % y ==<span class=\"number\">0</span>:</span><br><span class=\"line\">            x = red // y</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"number\">2</span>*(x+y) +<span class=\"number\">4</span> == brown:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [x+<span class=\"number\">2</span>,y+<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>끝 !</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제설명\"><a href=\"#문제설명\" class=\"headerlink\" title=\"문제설명\"></a>문제설명</h1><p>Leo는 카펫을 사러 갔다가 아래 그림과 같이 중앙에는 빨간색으로 칠해져 있고 테두리 1줄은 갈색으로 칠해져 있는 격자 모양 카펫을 봤습니다.</p>\n<p><img src=\"https://grepp-programmers.s3.amazonaws.com/files/ybm/7c94563a35/2ff27ac9-97d0-43a9-9cf8-a344b8e7912e.png\" alt=\"image.png\"></p>\n<p>Leo는 집으로 돌아와서 아까 본 카펫의 빨간색과 갈색으로 색칠된 격자의 개수는 기억했지만, 전체 카펫의 크기는 기억하지 못했습니다.</p>\n<p>Leo가 본 카펫에서 갈색 격자의 수 brown, 빨간색 격자의 수 red가 매개변수로 주어질 때 카펫의 가로, 세로 크기를 순서대로 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>갈색 격자의 수 brown은 8 이상 5,000 이하인 자연수입니다.</li>\n<li>빨간색 격자의 수 red는 1 이상 2,000,000 이하인 자연수입니다.</li>\n<li>카펫의 가로 길이는 세로 길이와 같거나, 세로 길이보다 깁니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>brown</th>\n<th>red</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>10</td>\n<td>2</td>\n<td>[4, 3]</td>\n</tr>\n<tr>\n<td>8</td>\n<td>1</td>\n<td>[3, 3]</td>\n</tr>\n<tr>\n<td>24</td>\n<td>24</td>\n<td>[8, 6]</td>\n</tr>\n</tbody></table>\n<p><a href=\"http://hsin.hr/coci/archive/2010_2011/contest4_tasks.pdf\">출처</a></p>\n<p>※ 공지 - 2020년 2월 3일 테스트케이스가 추가되었습니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>이 문제는 완전 탐색(exhausitve search)를 이용하여 푸는 문제이다. </p>\n<p><strong>red</strong> 의 가로를 <code>x</code> 세로를 <code>y</code>라고할 때, </p>\n<p><strong>red</strong>는 <code>x*y</code> 가 되고 <strong>brown</strong>은 <code>2(x*y)+4</code>가 된다. </p>\n<p><strong>brown</strong>의 가로와 세로는 <code>x+2</code> , <code>y+2</code> 이다.</p>\n<p>이 때 <code>x</code>는 <code>y</code>보다 길거나 같으며 <code>red = x*y</code>를 성립하기 때문에, <code>y</code>는 <strong>red</strong>의 제곱근보다 작거나 같다.</p>\n<p>처음엔</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">brown, red</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">int</span>(red**<span class=\"number\">0.5</span>)+<span class=\"number\">1</span>):</span><br><span class=\"line\">        x = red // y</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"number\">2</span>*(x+y) +<span class=\"number\">4</span> == brown:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [x+<span class=\"number\">2</span>,y+<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<p>이렇게 풀었더니 13개의 테스트 중 5개를 실패하였다.</p>\n<p>이유는 나머지가 0이 아닌 상황이 나오기 때문이었다. </p>\n<p><code>if red % y == 0</code> 를 추가하였다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">brown, red</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">int</span>(red**<span class=\"number\">0.5</span>)+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> red % y ==<span class=\"number\">0</span>:</span><br><span class=\"line\">            x = red // y</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"number\">2</span>*(x+y) +<span class=\"number\">4</span> == brown:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> [x+<span class=\"number\">2</span>,y+<span class=\"number\">2</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>끝 !</p>\n"},{"title":"[알고리즘] 프로그래머스-체육복 (python 파이썬)","date":"2020-04-15T07:13:00.000Z","_content":"\n\n\n# 문제\n\n점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.\n\n전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한사항\n\n- 전체 학생의 수는 2명 이상 30명 이하입니다.\n- 체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.\n- 여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.\n- 여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.\n- 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.\n\n##### 입출력 예\n\n| n    | lost   | reserve   | return |\n| ---- | ------ | --------- | ------ |\n| 5    | [2, 4] | [1, 3, 5] | 5      |\n| 5    | [2, 4] | [3]       | 4      |\n| 3    | [3]    | [1]       | 2      |\n\n##### 입출력 예 설명\n\n예제 #1\n1번 학생이 2번 학생에게 체육복을 빌려주고, 3번 학생이나 5번 학생이 4번 학생에게 체육복을 빌려주면 학생 5명이 체육수업을 들을 수 있습니다.\n\n예제 #2\n3번 학생이 2번 학생이나 4번 학생에게 체육복을 빌려주면 학생 4명이 체육수업을 들을 수 있습니다.\n\n[출처](http://hsin.hr/coci/archive/2009_2010/contest6_tasks.pdf)\n\n※ 공지 - 2019년 2월 18일 지문이 리뉴얼되었습니다.\n※ 공지 - 2019년 2월 27일, 28일 테스트케이스가 추가되었습니다.\n\n\n\n# 풀이\n\n초반 풀이 => 런타임 에러\n\n```python\ndef solution(n, lost, reserve):\n        \n    num =0\n    for i in range(n):\n        if i+1 in lost:\n            if i+1 in reserve:\n                lost.remove(i+1)\n                reserve.remove(i)\n            elif i in reserve:\n                lost.remove(i+1)\n                reserve.remove(i)\n            elif i+2 in reserve:\n                lost.remove(i+1)\n                reserve.remove(i+2)\n            else:\n                num+=1\n    \n    answer = n-num\n    return answer\n```\n\n\n\n두번째 풀이 (블로그들을 조금 참고하였다 ㅎ.ㅎ)\n\n```python\ndef solution(n, lost, reserve):\n    clothes = [1 for _ in range(n)]\n    for i in range(n):\n        if i+1 in reserve:\n            clothes[i] =2\n        if i+1 in lost:\n            clothes[i] -=1\n            \n    for j in range(n):\n        if j>0 and clothes[j] == 0 and clothes[j-1]==2:\n            clothes[j] += 1\n            clothes[j-1] -=1\n        if j<n-1 and clothes[j] == 0 and clothes[j+1]==2:\n            clothes[j] += 1\n            clothes[j+1] -=1\n            \n    return n-clothes.count(0)\n```\n\nclothes에 reserve에 해당하는 index는 2로 lost에 해당하는 index는 0으로 아무것도 해당하지 않는 index는 1로 채운 다음 0인 index의 앞뒤 index가 2이면 두 index를 1로 바꾼다.\n\n마지막에 모든 학생수에서 clothes 배열의 0(체육복 없는 학생)의 수를 빼서 return한다.","source":"_posts/programmers-clothes.md","raw":"---\ntitle: \"[알고리즘] 프로그래머스-체육복 (python 파이썬)\"\ndate: 2020-04-15 16:13:00\ntags: 알고리즘\n---\n\n\n\n# 문제\n\n점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.\n\n전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한사항\n\n- 전체 학생의 수는 2명 이상 30명 이하입니다.\n- 체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.\n- 여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.\n- 여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.\n- 여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.\n\n##### 입출력 예\n\n| n    | lost   | reserve   | return |\n| ---- | ------ | --------- | ------ |\n| 5    | [2, 4] | [1, 3, 5] | 5      |\n| 5    | [2, 4] | [3]       | 4      |\n| 3    | [3]    | [1]       | 2      |\n\n##### 입출력 예 설명\n\n예제 #1\n1번 학생이 2번 학생에게 체육복을 빌려주고, 3번 학생이나 5번 학생이 4번 학생에게 체육복을 빌려주면 학생 5명이 체육수업을 들을 수 있습니다.\n\n예제 #2\n3번 학생이 2번 학생이나 4번 학생에게 체육복을 빌려주면 학생 4명이 체육수업을 들을 수 있습니다.\n\n[출처](http://hsin.hr/coci/archive/2009_2010/contest6_tasks.pdf)\n\n※ 공지 - 2019년 2월 18일 지문이 리뉴얼되었습니다.\n※ 공지 - 2019년 2월 27일, 28일 테스트케이스가 추가되었습니다.\n\n\n\n# 풀이\n\n초반 풀이 => 런타임 에러\n\n```python\ndef solution(n, lost, reserve):\n        \n    num =0\n    for i in range(n):\n        if i+1 in lost:\n            if i+1 in reserve:\n                lost.remove(i+1)\n                reserve.remove(i)\n            elif i in reserve:\n                lost.remove(i+1)\n                reserve.remove(i)\n            elif i+2 in reserve:\n                lost.remove(i+1)\n                reserve.remove(i+2)\n            else:\n                num+=1\n    \n    answer = n-num\n    return answer\n```\n\n\n\n두번째 풀이 (블로그들을 조금 참고하였다 ㅎ.ㅎ)\n\n```python\ndef solution(n, lost, reserve):\n    clothes = [1 for _ in range(n)]\n    for i in range(n):\n        if i+1 in reserve:\n            clothes[i] =2\n        if i+1 in lost:\n            clothes[i] -=1\n            \n    for j in range(n):\n        if j>0 and clothes[j] == 0 and clothes[j-1]==2:\n            clothes[j] += 1\n            clothes[j-1] -=1\n        if j<n-1 and clothes[j] == 0 and clothes[j+1]==2:\n            clothes[j] += 1\n            clothes[j+1] -=1\n            \n    return n-clothes.count(0)\n```\n\nclothes에 reserve에 해당하는 index는 2로 lost에 해당하는 index는 0으로 아무것도 해당하지 않는 index는 1로 채운 다음 0인 index의 앞뒤 index가 2이면 두 index를 1로 바꾼다.\n\n마지막에 모든 학생수에서 clothes 배열의 0(체육복 없는 학생)의 수를 빼서 return한다.","slug":"programmers-clothes","published":1,"updated":"2021-02-08T18:25:02.568Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0k8001rf9c99hyncu5n","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.</p>\n<p>전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>전체 학생의 수는 2명 이상 30명 이하입니다.</li>\n<li>체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.</li>\n<li>여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.</li>\n<li>여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.</li>\n<li>여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>n</th>\n<th>lost</th>\n<th>reserve</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>[2, 4]</td>\n<td>[1, 3, 5]</td>\n<td>5</td>\n</tr>\n<tr>\n<td>5</td>\n<td>[2, 4]</td>\n<td>[3]</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[3]</td>\n<td>[1]</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>예제 #1<br>1번 학생이 2번 학생에게 체육복을 빌려주고, 3번 학생이나 5번 학생이 4번 학생에게 체육복을 빌려주면 학생 5명이 체육수업을 들을 수 있습니다.</p>\n<p>예제 #2<br>3번 학생이 2번 학생이나 4번 학생에게 체육복을 빌려주면 학생 4명이 체육수업을 들을 수 있습니다.</p>\n<p><a href=\"http://hsin.hr/coci/archive/2009_2010/contest6_tasks.pdf\">출처</a></p>\n<p>※ 공지 - 2019년 2월 18일 지문이 리뉴얼되었습니다.<br>※ 공지 - 2019년 2월 27일, 28일 테스트케이스가 추가되었습니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>초반 풀이 =&gt; 런타임 에러</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">n, lost, reserve</span>):</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    num =<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i+<span class=\"number\">1</span> <span class=\"keyword\">in</span> lost:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i+<span class=\"number\">1</span> <span class=\"keyword\">in</span> reserve:</span><br><span class=\"line\">                lost.remove(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">                reserve.remove(i)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i <span class=\"keyword\">in</span> reserve:</span><br><span class=\"line\">                lost.remove(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">                reserve.remove(i)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i+<span class=\"number\">2</span> <span class=\"keyword\">in</span> reserve:</span><br><span class=\"line\">                lost.remove(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">                reserve.remove(i+<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                num+=<span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    answer = n-num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n\n\n<p>두번째 풀이 (블로그들을 조금 참고하였다 ㅎ.ㅎ)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">n, lost, reserve</span>):</span></span><br><span class=\"line\">    clothes = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i+<span class=\"number\">1</span> <span class=\"keyword\">in</span> reserve:</span><br><span class=\"line\">            clothes[i] =<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i+<span class=\"number\">1</span> <span class=\"keyword\">in</span> lost:</span><br><span class=\"line\">            clothes[i] -=<span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> clothes[j] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> clothes[j-<span class=\"number\">1</span>]==<span class=\"number\">2</span>:</span><br><span class=\"line\">            clothes[j] += <span class=\"number\">1</span></span><br><span class=\"line\">            clothes[j-<span class=\"number\">1</span>] -=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j&lt;n-<span class=\"number\">1</span> <span class=\"keyword\">and</span> clothes[j] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> clothes[j+<span class=\"number\">1</span>]==<span class=\"number\">2</span>:</span><br><span class=\"line\">            clothes[j] += <span class=\"number\">1</span></span><br><span class=\"line\">            clothes[j+<span class=\"number\">1</span>] -=<span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">return</span> n-clothes.count(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>clothes에 reserve에 해당하는 index는 2로 lost에 해당하는 index는 0으로 아무것도 해당하지 않는 index는 1로 채운 다음 0인 index의 앞뒤 index가 2이면 두 index를 1로 바꾼다.</p>\n<p>마지막에 모든 학생수에서 clothes 배열의 0(체육복 없는 학생)의 수를 빼서 return한다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>점심시간에 도둑이 들어, 일부 학생이 체육복을 도난당했습니다. 다행히 여벌 체육복이 있는 학생이 이들에게 체육복을 빌려주려 합니다. 학생들의 번호는 체격 순으로 매겨져 있어, 바로 앞번호의 학생이나 바로 뒷번호의 학생에게만 체육복을 빌려줄 수 있습니다. 예를 들어, 4번 학생은 3번 학생이나 5번 학생에게만 체육복을 빌려줄 수 있습니다. 체육복이 없으면 수업을 들을 수 없기 때문에 체육복을 적절히 빌려 최대한 많은 학생이 체육수업을 들어야 합니다.</p>\n<p>전체 학생의 수 n, 체육복을 도난당한 학생들의 번호가 담긴 배열 lost, 여벌의 체육복을 가져온 학생들의 번호가 담긴 배열 reserve가 매개변수로 주어질 때, 체육수업을 들을 수 있는 학생의 최댓값을 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>전체 학생의 수는 2명 이상 30명 이하입니다.</li>\n<li>체육복을 도난당한 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.</li>\n<li>여벌의 체육복을 가져온 학생의 수는 1명 이상 n명 이하이고 중복되는 번호는 없습니다.</li>\n<li>여벌 체육복이 있는 학생만 다른 학생에게 체육복을 빌려줄 수 있습니다.</li>\n<li>여벌 체육복을 가져온 학생이 체육복을 도난당했을 수 있습니다. 이때 이 학생은 체육복을 하나만 도난당했다고 가정하며, 남은 체육복이 하나이기에 다른 학생에게는 체육복을 빌려줄 수 없습니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>n</th>\n<th>lost</th>\n<th>reserve</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>[2, 4]</td>\n<td>[1, 3, 5]</td>\n<td>5</td>\n</tr>\n<tr>\n<td>5</td>\n<td>[2, 4]</td>\n<td>[3]</td>\n<td>4</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[3]</td>\n<td>[1]</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>예제 #1<br>1번 학생이 2번 학생에게 체육복을 빌려주고, 3번 학생이나 5번 학생이 4번 학생에게 체육복을 빌려주면 학생 5명이 체육수업을 들을 수 있습니다.</p>\n<p>예제 #2<br>3번 학생이 2번 학생이나 4번 학생에게 체육복을 빌려주면 학생 4명이 체육수업을 들을 수 있습니다.</p>\n<p><a href=\"http://hsin.hr/coci/archive/2009_2010/contest6_tasks.pdf\">출처</a></p>\n<p>※ 공지 - 2019년 2월 18일 지문이 리뉴얼되었습니다.<br>※ 공지 - 2019년 2월 27일, 28일 테스트케이스가 추가되었습니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>초반 풀이 =&gt; 런타임 에러</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">n, lost, reserve</span>):</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    num =<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i+<span class=\"number\">1</span> <span class=\"keyword\">in</span> lost:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i+<span class=\"number\">1</span> <span class=\"keyword\">in</span> reserve:</span><br><span class=\"line\">                lost.remove(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">                reserve.remove(i)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i <span class=\"keyword\">in</span> reserve:</span><br><span class=\"line\">                lost.remove(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">                reserve.remove(i)</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i+<span class=\"number\">2</span> <span class=\"keyword\">in</span> reserve:</span><br><span class=\"line\">                lost.remove(i+<span class=\"number\">1</span>)</span><br><span class=\"line\">                reserve.remove(i+<span class=\"number\">2</span>)</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                num+=<span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    answer = n-num</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n\n\n<p>두번째 풀이 (블로그들을 조금 참고하였다 ㅎ.ㅎ)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">n, lost, reserve</span>):</span></span><br><span class=\"line\">    clothes = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i+<span class=\"number\">1</span> <span class=\"keyword\">in</span> reserve:</span><br><span class=\"line\">            clothes[i] =<span class=\"number\">2</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> i+<span class=\"number\">1</span> <span class=\"keyword\">in</span> lost:</span><br><span class=\"line\">            clothes[i] -=<span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j&gt;<span class=\"number\">0</span> <span class=\"keyword\">and</span> clothes[j] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> clothes[j-<span class=\"number\">1</span>]==<span class=\"number\">2</span>:</span><br><span class=\"line\">            clothes[j] += <span class=\"number\">1</span></span><br><span class=\"line\">            clothes[j-<span class=\"number\">1</span>] -=<span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> j&lt;n-<span class=\"number\">1</span> <span class=\"keyword\">and</span> clothes[j] == <span class=\"number\">0</span> <span class=\"keyword\">and</span> clothes[j+<span class=\"number\">1</span>]==<span class=\"number\">2</span>:</span><br><span class=\"line\">            clothes[j] += <span class=\"number\">1</span></span><br><span class=\"line\">            clothes[j+<span class=\"number\">1</span>] -=<span class=\"number\">1</span></span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">return</span> n-clothes.count(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>clothes에 reserve에 해당하는 index는 2로 lost에 해당하는 index는 0으로 아무것도 해당하지 않는 index는 1로 채운 다음 0인 index의 앞뒤 index가 2이면 두 index를 1로 바꾼다.</p>\n<p>마지막에 모든 학생수에서 clothes 배열의 0(체육복 없는 학생)의 수를 빼서 return한다.</p>\n"},{"title":"[프로그래머스] 기능개발 (파이썬/python)","dates":"2020-08-26T17:14:00.000Z","_content":"\n# 문제\n\n프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.\n\n또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.\n\n먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.\n\n##### 제한 사항\n\n- 작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.\n- 작업 진도는 100 미만의 자연수입니다.\n- 작업 속도는 100 이하의 자연수입니다.\n- 배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.\n\n##### 입출력 예\n\n| progresses | speeds   | return |\n| ---------- | -------- | ------ |\n| [93,30,55] | [1,30,5] | [2,1]  |\n\n##### 입출력 예 설명\n\n첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.\n두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.\n세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.\n\n따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.\n\n# 풀이\n\n```python\nimport math\n\ndef solution(progresses, speeds):\n    day = [0 for _ in range(len(progresses))]\n    answer = []\n\n    for i in range(len(progresses)):\n        day[i] = math.ceil((100 - progresses[i]) / speeds[i])\n        \n    \n    while day:\n        out = day.pop(0)\n        count = 1\n        index = 0\n        while len(day) > 0 and out >= day[index]:\n            day.pop(0)\n            count += 1\n        answer.append(count)    \n        \n    return(answer)\n```\n\n* 새로 알게 된 것\n  * math의 올림 사용하기 (ceil) \n* 스택/큐 를 이용하는 문제 !","source":"_posts/programmers-func-develop.md","raw":"---\ntitle: \"[프로그래머스] 기능개발 (파이썬/python)\"\ndates: 2020-08-27 02:14:00\ntag: 알고리즘\n---\n\n# 문제\n\n프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.\n\n또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.\n\n먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.\n\n##### 제한 사항\n\n- 작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.\n- 작업 진도는 100 미만의 자연수입니다.\n- 작업 속도는 100 이하의 자연수입니다.\n- 배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.\n\n##### 입출력 예\n\n| progresses | speeds   | return |\n| ---------- | -------- | ------ |\n| [93,30,55] | [1,30,5] | [2,1]  |\n\n##### 입출력 예 설명\n\n첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.\n두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.\n세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.\n\n따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.\n\n# 풀이\n\n```python\nimport math\n\ndef solution(progresses, speeds):\n    day = [0 for _ in range(len(progresses))]\n    answer = []\n\n    for i in range(len(progresses)):\n        day[i] = math.ceil((100 - progresses[i]) / speeds[i])\n        \n    \n    while day:\n        out = day.pop(0)\n        count = 1\n        index = 0\n        while len(day) > 0 and out >= day[index]:\n            day.pop(0)\n            count += 1\n        answer.append(count)    \n        \n    return(answer)\n```\n\n* 새로 알게 된 것\n  * math의 올림 사용하기 (ceil) \n* 스택/큐 를 이용하는 문제 !","slug":"programmers-func-develop","published":1,"date":"2021-02-08T18:25:02.417Z","updated":"2021-02-08T18:25:02.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0k9001uf9c95rbegmzm","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.</p>\n<p>또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.</p>\n<p>먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.</p>\n<h5 id=\"제한-사항\"><a href=\"#제한-사항\" class=\"headerlink\" title=\"제한 사항\"></a>제한 사항</h5><ul>\n<li>작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.</li>\n<li>작업 진도는 100 미만의 자연수입니다.</li>\n<li>작업 속도는 100 이하의 자연수입니다.</li>\n<li>배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>progresses</th>\n<th>speeds</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[93,30,55]</td>\n<td>[1,30,5]</td>\n<td>[2,1]</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.<br>두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.<br>세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.</p>\n<p>따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">progresses, speeds</span>):</span></span><br><span class=\"line\">    day = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(progresses))]</span><br><span class=\"line\">    answer = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(progresses)):</span><br><span class=\"line\">        day[i] = math.ceil((<span class=\"number\">100</span> - progresses[i]) / speeds[i])</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> day:</span><br><span class=\"line\">        out = day.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        count = <span class=\"number\">1</span></span><br><span class=\"line\">        index = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(day) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> out &gt;= day[index]:</span><br><span class=\"line\">            day.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">        answer.append(count)    </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span>(answer)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>새로 알게 된 것<ul>\n<li>math의 올림 사용하기 (ceil) </li>\n</ul>\n</li>\n<li>스택/큐 를 이용하는 문제 !</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>프로그래머스 팀에서는 기능 개선 작업을 수행 중입니다. 각 기능은 진도가 100%일 때 서비스에 반영할 수 있습니다.</p>\n<p>또, 각 기능의 개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있고, 이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.</p>\n<p>먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.</p>\n<h5 id=\"제한-사항\"><a href=\"#제한-사항\" class=\"headerlink\" title=\"제한 사항\"></a>제한 사항</h5><ul>\n<li>작업의 개수(progresses, speeds배열의 길이)는 100개 이하입니다.</li>\n<li>작업 진도는 100 미만의 자연수입니다.</li>\n<li>작업 속도는 100 이하의 자연수입니다.</li>\n<li>배포는 하루에 한 번만 할 수 있으며, 하루의 끝에 이루어진다고 가정합니다. 예를 들어 진도율이 95%인 작업의 개발 속도가 하루에 4%라면 배포는 2일 뒤에 이루어집니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>progresses</th>\n<th>speeds</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[93,30,55]</td>\n<td>[1,30,5]</td>\n<td>[2,1]</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>첫 번째 기능은 93% 완료되어 있고 하루에 1%씩 작업이 가능하므로 7일간 작업 후 배포가 가능합니다.<br>두 번째 기능은 30%가 완료되어 있고 하루에 30%씩 작업이 가능하므로 3일간 작업 후 배포가 가능합니다. 하지만 이전 첫 번째 기능이 아직 완성된 상태가 아니기 때문에 첫 번째 기능이 배포되는 7일째 배포됩니다.<br>세 번째 기능은 55%가 완료되어 있고 하루에 5%씩 작업이 가능하므로 9일간 작업 후 배포가 가능합니다.</p>\n<p>따라서 7일째에 2개의 기능, 9일째에 1개의 기능이 배포됩니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">progresses, speeds</span>):</span></span><br><span class=\"line\">    day = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(progresses))]</span><br><span class=\"line\">    answer = []</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(progresses)):</span><br><span class=\"line\">        day[i] = math.ceil((<span class=\"number\">100</span> - progresses[i]) / speeds[i])</span><br><span class=\"line\">        </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> day:</span><br><span class=\"line\">        out = day.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        count = <span class=\"number\">1</span></span><br><span class=\"line\">        index = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(day) &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> out &gt;= day[index]:</span><br><span class=\"line\">            day.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">        answer.append(count)    </span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span>(answer)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>새로 알게 된 것<ul>\n<li>math의 올림 사용하기 (ceil) </li>\n</ul>\n</li>\n<li>스택/큐 를 이용하는 문제 !</li>\n</ul>\n"},{"title":"[프로그래머스] K번째 수 - 파이썬","date":"2020-02-22T07:22:00.000Z","_content":"\n# 문제 설명\n\n배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.\n\n예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면\n\n1. array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.\n2. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.\n3. 2에서 나온 배열의 3번째 숫자는 5입니다.\n\n배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한사항\n\n- array의 길이는 1 이상 100 이하입니다.\n- array의 각 원소는 1 이상 100 이하입니다.\n- commands의 길이는 1 이상 50 이하입니다.\n- commands의 각 원소는 길이가 3입니다.\n\n##### 입출력 예\n\n| array                 | commands                          | return    |\n| --------------------- | --------------------------------- | --------- |\n| [1, 5, 2, 6, 3, 7, 4] | [[2, 5, 3], [4, 4, 1], [1, 7, 3]] | [5, 6, 3] |\n\n##### 입출력 예 설명\n\n[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.\n[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.\n[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.\n\n[출처](https://neerc.ifmo.ru/subregions/northern.html)\n\n\n\n# 풀이\n\n```python\ndef solution(array, commands):\n    answer = []\n    for command_list in commands:\n        sliced_array = array[command_list[0]-1 : command_list[1]]\n        sliced_array.sort()\n        answer.append(sliced_array[command_list[2]-1])\n    return answer\n```\n\n\n\n이번 문제를 위해 공부한 내용은 array의 `slicing` 과 `sort`이다.\n\n\n\n1. `commands` 가 [[2, 5, 3], [4, 4, 1], [1, 7, 3]] 일 때, `for command_list in commands`를 통해  [2, 5, 3] **->** [4, 4, 1] **->** [1, 7, 3] 순서로 `command_list`에 담는다.  \n\n2. 예를 들어 `command_list`가 *[2,5,3]* 일 때, \n\n   `array`의 *command_list[0]-1* (1번 인덱스) 부터 *command_list[1]* (4번 인덱스까지)(`slicing`에서 ` end`부분(5)은 자르지 않기때문에 -1 해줄 필요가 없다.)까지 잘라 `sliced_array`에 담는다.\n\n3.  `sliced_array`를 `sort()` 로 정렬한다. \n\n4. *`answer`에  command_list[2]-1* (3번 인덱스) 의 값을 더한다.\n\n\n\n### 시행착오\n\n 처음에`for i in range(len(commands))` 로 i에  인덱스를 담아 `array[commands[i] [0] -1 : commands[i] [1]] ` 이렇게 접근하였다.\n\n 근데 `for command_list in commands` 를 사용하면 commands의 첫번째, 두번째, 세번째 배열을 command_list에 담으며 실행할 수 있다는 것을 알게 되었고 코드를 고칠 수 있었다.  ","source":"_posts/programmers-kth-number.md","raw":"---\ntitle: \"[프로그래머스] K번째 수 - 파이썬\"\ndate: 2020-02-22 16:22:00\ntags: 알고리즘\n\n---\n\n# 문제 설명\n\n배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.\n\n예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면\n\n1. array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.\n2. 1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.\n3. 2에서 나온 배열의 3번째 숫자는 5입니다.\n\n배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한사항\n\n- array의 길이는 1 이상 100 이하입니다.\n- array의 각 원소는 1 이상 100 이하입니다.\n- commands의 길이는 1 이상 50 이하입니다.\n- commands의 각 원소는 길이가 3입니다.\n\n##### 입출력 예\n\n| array                 | commands                          | return    |\n| --------------------- | --------------------------------- | --------- |\n| [1, 5, 2, 6, 3, 7, 4] | [[2, 5, 3], [4, 4, 1], [1, 7, 3]] | [5, 6, 3] |\n\n##### 입출력 예 설명\n\n[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.\n[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.\n[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.\n\n[출처](https://neerc.ifmo.ru/subregions/northern.html)\n\n\n\n# 풀이\n\n```python\ndef solution(array, commands):\n    answer = []\n    for command_list in commands:\n        sliced_array = array[command_list[0]-1 : command_list[1]]\n        sliced_array.sort()\n        answer.append(sliced_array[command_list[2]-1])\n    return answer\n```\n\n\n\n이번 문제를 위해 공부한 내용은 array의 `slicing` 과 `sort`이다.\n\n\n\n1. `commands` 가 [[2, 5, 3], [4, 4, 1], [1, 7, 3]] 일 때, `for command_list in commands`를 통해  [2, 5, 3] **->** [4, 4, 1] **->** [1, 7, 3] 순서로 `command_list`에 담는다.  \n\n2. 예를 들어 `command_list`가 *[2,5,3]* 일 때, \n\n   `array`의 *command_list[0]-1* (1번 인덱스) 부터 *command_list[1]* (4번 인덱스까지)(`slicing`에서 ` end`부분(5)은 자르지 않기때문에 -1 해줄 필요가 없다.)까지 잘라 `sliced_array`에 담는다.\n\n3.  `sliced_array`를 `sort()` 로 정렬한다. \n\n4. *`answer`에  command_list[2]-1* (3번 인덱스) 의 값을 더한다.\n\n\n\n### 시행착오\n\n 처음에`for i in range(len(commands))` 로 i에  인덱스를 담아 `array[commands[i] [0] -1 : commands[i] [1]] ` 이렇게 접근하였다.\n\n 근데 `for command_list in commands` 를 사용하면 commands의 첫번째, 두번째, 세번째 배열을 command_list에 담으며 실행할 수 있다는 것을 알게 되었고 코드를 고칠 수 있었다.  ","slug":"programmers-kth-number","published":1,"updated":"2021-02-08T18:25:02.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0ka001wf9c9dloa31cc","content":"<h1 id=\"문제-설명\"><a href=\"#문제-설명\" class=\"headerlink\" title=\"문제 설명\"></a>문제 설명</h1><p>배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.</p>\n<p>예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면</p>\n<ol>\n<li>array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.</li>\n<li>1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.</li>\n<li>2에서 나온 배열의 3번째 숫자는 5입니다.</li>\n</ol>\n<p>배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>array의 길이는 1 이상 100 이하입니다.</li>\n<li>array의 각 원소는 1 이상 100 이하입니다.</li>\n<li>commands의 길이는 1 이상 50 이하입니다.</li>\n<li>commands의 각 원소는 길이가 3입니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>array</th>\n<th>commands</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[1, 5, 2, 6, 3, 7, 4]</td>\n<td>[[2, 5, 3], [4, 4, 1], [1, 7, 3]]</td>\n<td>[5, 6, 3]</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.<br>[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.<br>[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.</p>\n<p><a href=\"https://neerc.ifmo.ru/subregions/northern.html\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">array, commands</span>):</span></span><br><span class=\"line\">    answer = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> command_list <span class=\"keyword\">in</span> commands:</span><br><span class=\"line\">        sliced_array = array[command_list[<span class=\"number\">0</span>]-<span class=\"number\">1</span> : command_list[<span class=\"number\">1</span>]]</span><br><span class=\"line\">        sliced_array.sort()</span><br><span class=\"line\">        answer.append(sliced_array[command_list[<span class=\"number\">2</span>]-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n\n\n<p>이번 문제를 위해 공부한 내용은 array의 <code>slicing</code> 과 <code>sort</code>이다.</p>\n<ol>\n<li><p><code>commands</code> 가 [[2, 5, 3], [4, 4, 1], [1, 7, 3]] 일 때, <code>for command_list in commands</code>를 통해  [2, 5, 3] <strong>-&gt;</strong> [4, 4, 1] <strong>-&gt;</strong> [1, 7, 3] 순서로 <code>command_list</code>에 담는다.  </p>\n</li>\n<li><p>예를 들어 <code>command_list</code>가 <em>[2,5,3]</em> 일 때, </p>\n<p><code>array</code>의 <em>command_list[0]-1</em> (1번 인덱스) 부터 <em>command_list[1]</em> (4번 인덱스까지)(<code>slicing</code>에서 <code> end</code>부분(5)은 자르지 않기때문에 -1 해줄 필요가 없다.)까지 잘라 <code>sliced_array</code>에 담는다.</p>\n</li>\n<li><p> <code>sliced_array</code>를 <code>sort()</code> 로 정렬한다. </p>\n</li>\n<li><p><em><code>answer</code>에  command_list[2]-1</em> (3번 인덱스) 의 값을 더한다.</p>\n</li>\n</ol>\n<h3 id=\"시행착오\"><a href=\"#시행착오\" class=\"headerlink\" title=\"시행착오\"></a>시행착오</h3><p> 처음에<code>for i in range(len(commands))</code> 로 i에  인덱스를 담아 <code>array[commands[i] [0] -1 : commands[i] [1]] </code> 이렇게 접근하였다.</p>\n<p> 근데 <code>for command_list in commands</code> 를 사용하면 commands의 첫번째, 두번째, 세번째 배열을 command_list에 담으며 실행할 수 있다는 것을 알게 되었고 코드를 고칠 수 있었다.  </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제-설명\"><a href=\"#문제-설명\" class=\"headerlink\" title=\"문제 설명\"></a>문제 설명</h1><p>배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.</p>\n<p>예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면</p>\n<ol>\n<li>array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.</li>\n<li>1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.</li>\n<li>2에서 나온 배열의 3번째 숫자는 5입니다.</li>\n</ol>\n<p>배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>array의 길이는 1 이상 100 이하입니다.</li>\n<li>array의 각 원소는 1 이상 100 이하입니다.</li>\n<li>commands의 길이는 1 이상 50 이하입니다.</li>\n<li>commands의 각 원소는 길이가 3입니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>array</th>\n<th>commands</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[1, 5, 2, 6, 3, 7, 4]</td>\n<td>[[2, 5, 3], [4, 4, 1], [1, 7, 3]]</td>\n<td>[5, 6, 3]</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.<br>[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.<br>[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.</p>\n<p><a href=\"https://neerc.ifmo.ru/subregions/northern.html\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">array, commands</span>):</span></span><br><span class=\"line\">    answer = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> command_list <span class=\"keyword\">in</span> commands:</span><br><span class=\"line\">        sliced_array = array[command_list[<span class=\"number\">0</span>]-<span class=\"number\">1</span> : command_list[<span class=\"number\">1</span>]]</span><br><span class=\"line\">        sliced_array.sort()</span><br><span class=\"line\">        answer.append(sliced_array[command_list[<span class=\"number\">2</span>]-<span class=\"number\">1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n\n\n<p>이번 문제를 위해 공부한 내용은 array의 <code>slicing</code> 과 <code>sort</code>이다.</p>\n<ol>\n<li><p><code>commands</code> 가 [[2, 5, 3], [4, 4, 1], [1, 7, 3]] 일 때, <code>for command_list in commands</code>를 통해  [2, 5, 3] <strong>-&gt;</strong> [4, 4, 1] <strong>-&gt;</strong> [1, 7, 3] 순서로 <code>command_list</code>에 담는다.  </p>\n</li>\n<li><p>예를 들어 <code>command_list</code>가 <em>[2,5,3]</em> 일 때, </p>\n<p><code>array</code>의 <em>command_list[0]-1</em> (1번 인덱스) 부터 <em>command_list[1]</em> (4번 인덱스까지)(<code>slicing</code>에서 <code> end</code>부분(5)은 자르지 않기때문에 -1 해줄 필요가 없다.)까지 잘라 <code>sliced_array</code>에 담는다.</p>\n</li>\n<li><p> <code>sliced_array</code>를 <code>sort()</code> 로 정렬한다. </p>\n</li>\n<li><p><em><code>answer</code>에  command_list[2]-1</em> (3번 인덱스) 의 값을 더한다.</p>\n</li>\n</ol>\n<h3 id=\"시행착오\"><a href=\"#시행착오\" class=\"headerlink\" title=\"시행착오\"></a>시행착오</h3><p> 처음에<code>for i in range(len(commands))</code> 로 i에  인덱스를 담아 <code>array[commands[i] [0] -1 : commands[i] [1]] </code> 이렇게 접근하였다.</p>\n<p> 근데 <code>for command_list in commands</code> 를 사용하면 commands의 첫번째, 두번째, 세번째 배열을 command_list에 담으며 실행할 수 있다는 것을 알게 되었고 코드를 고칠 수 있었다.  </p>\n"},{"title":"[알고리즘] 프로그래머스- N으로 표현 파이썬 (python)","date":"2020-04-26T14:15:00.000Z","_content":"\n# 문제\n\n아래와 같이 5와 사칙연산만으로 12를 표현할 수 있습니다.\n\n12 = 5 + 5 + (5 / 5) + (5 / 5)\n12 = 55 / 5 + 5 / 5\n12 = (55 + 5) / 5\n\n5를 사용한 횟수는 각각 6,5,4 입니다. 그리고 이중 가장 작은 경우는 4입니다.\n이처럼 숫자 N과 number가 주어질 때, N과 사칙연산만 사용해서 표현 할 수 있는 방법 중 N 사용횟수의 최솟값을 return 하도록 solution 함수를 작성하세요.\n\n##### 제한사항\n\n- N은 1 이상 9 이하입니다.\n- number는 1 이상 32,000 이하입니다.\n- 수식에는 괄호와 사칙연산만 가능하며 나누기 연산에서 나머지는 무시합니다.\n- 최솟값이 8보다 크면 -1을 return 합니다.\n\n##### 입출력 예\n\n| N    | number | return |\n| ---- | ------ | ------ |\n| 5    | 12     | 4      |\n| 2    | 11     | 3      |\n\n##### 입출력 예 설명\n\n예제 #1\n문제에 나온 예와 같습니다.\n\n예제 #2\n`11 = 22 / 2`와 같이 2를 3번만 사용하여 표현할 수 있습니다.\n\n[출처](https://www.oi.edu.pl/old/php/show.php?ac=e181413&module=show&file=zadania/oi6/monocyfr)\n\n# 풀이\n\n**동적 프로그래밍 (Dynamic Programming)**을 이용하여 푸는 문제이다.\n\n동적 프로그래밍이란, 큰 문제를 작은 단위의 문제로 나누어 풀고 이전에 계산했던 값을 저장해둔 다음 매번 다시 계산하지 않고 저장해둔 값을 재사용하는 프로그래밍 기법을 의미한다.\n\n\n\n```python\ndef solution(N, number):\n    case = [0,[N]]\n    if N == number: \n        return 1\n    for i in range(2,9): # 2부터 8까지\n        num = int(str(N)*i)\n        cases = []\n        cases.append(num)\n        for i_half in range(1, i//2+1):\n            for x in case[i_half]: \n                for y in case[i-i_half]: \n                    cases.append(x*y)\n                    cases.append(x+y)\n                    if x > y:\n                        cases.append(x-y)\n                    if y > x:\n                        cases.append(y-x)\n                    if y != 0:\n                        cases.append(x/y)\n                    if x != 0:\n                        cases.append(y/x)\n                if number in cases:\n                    return i\n            case.append(cases)\n    return -1\n```\n\n* 제일 이해하기 힘들었던 부분은 for문의 range를 i의 반만 도는 이유였다 \n\n\n\n풀이 추가하기,, ","source":"_posts/programmers-n-dp.md","raw":"---\ntitle: \"[알고리즘] 프로그래머스- N으로 표현 파이썬 (python)\"\ndate: 2020-04-26 23:15:00\ntags: 알고리즘\n---\n\n# 문제\n\n아래와 같이 5와 사칙연산만으로 12를 표현할 수 있습니다.\n\n12 = 5 + 5 + (5 / 5) + (5 / 5)\n12 = 55 / 5 + 5 / 5\n12 = (55 + 5) / 5\n\n5를 사용한 횟수는 각각 6,5,4 입니다. 그리고 이중 가장 작은 경우는 4입니다.\n이처럼 숫자 N과 number가 주어질 때, N과 사칙연산만 사용해서 표현 할 수 있는 방법 중 N 사용횟수의 최솟값을 return 하도록 solution 함수를 작성하세요.\n\n##### 제한사항\n\n- N은 1 이상 9 이하입니다.\n- number는 1 이상 32,000 이하입니다.\n- 수식에는 괄호와 사칙연산만 가능하며 나누기 연산에서 나머지는 무시합니다.\n- 최솟값이 8보다 크면 -1을 return 합니다.\n\n##### 입출력 예\n\n| N    | number | return |\n| ---- | ------ | ------ |\n| 5    | 12     | 4      |\n| 2    | 11     | 3      |\n\n##### 입출력 예 설명\n\n예제 #1\n문제에 나온 예와 같습니다.\n\n예제 #2\n`11 = 22 / 2`와 같이 2를 3번만 사용하여 표현할 수 있습니다.\n\n[출처](https://www.oi.edu.pl/old/php/show.php?ac=e181413&module=show&file=zadania/oi6/monocyfr)\n\n# 풀이\n\n**동적 프로그래밍 (Dynamic Programming)**을 이용하여 푸는 문제이다.\n\n동적 프로그래밍이란, 큰 문제를 작은 단위의 문제로 나누어 풀고 이전에 계산했던 값을 저장해둔 다음 매번 다시 계산하지 않고 저장해둔 값을 재사용하는 프로그래밍 기법을 의미한다.\n\n\n\n```python\ndef solution(N, number):\n    case = [0,[N]]\n    if N == number: \n        return 1\n    for i in range(2,9): # 2부터 8까지\n        num = int(str(N)*i)\n        cases = []\n        cases.append(num)\n        for i_half in range(1, i//2+1):\n            for x in case[i_half]: \n                for y in case[i-i_half]: \n                    cases.append(x*y)\n                    cases.append(x+y)\n                    if x > y:\n                        cases.append(x-y)\n                    if y > x:\n                        cases.append(y-x)\n                    if y != 0:\n                        cases.append(x/y)\n                    if x != 0:\n                        cases.append(y/x)\n                if number in cases:\n                    return i\n            case.append(cases)\n    return -1\n```\n\n* 제일 이해하기 힘들었던 부분은 for문의 range를 i의 반만 도는 이유였다 \n\n\n\n풀이 추가하기,, ","slug":"programmers-n-dp","published":1,"updated":"2021-02-08T18:25:02.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kb001zf9c95xphhkan","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>아래와 같이 5와 사칙연산만으로 12를 표현할 수 있습니다.</p>\n<p>12 = 5 + 5 + (5 / 5) + (5 / 5)<br>12 = 55 / 5 + 5 / 5<br>12 = (55 + 5) / 5</p>\n<p>5를 사용한 횟수는 각각 6,5,4 입니다. 그리고 이중 가장 작은 경우는 4입니다.<br>이처럼 숫자 N과 number가 주어질 때, N과 사칙연산만 사용해서 표현 할 수 있는 방법 중 N 사용횟수의 최솟값을 return 하도록 solution 함수를 작성하세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>N은 1 이상 9 이하입니다.</li>\n<li>number는 1 이상 32,000 이하입니다.</li>\n<li>수식에는 괄호와 사칙연산만 가능하며 나누기 연산에서 나머지는 무시합니다.</li>\n<li>최솟값이 8보다 크면 -1을 return 합니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>N</th>\n<th>number</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>12</td>\n<td>4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>11</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>예제 #1<br>문제에 나온 예와 같습니다.</p>\n<p>예제 #2<br><code>11 = 22 / 2</code>와 같이 2를 3번만 사용하여 표현할 수 있습니다.</p>\n<p><a href=\"https://www.oi.edu.pl/old/php/show.php?ac=e181413&module=show&file=zadania/oi6/monocyfr\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>**동적 프로그래밍 (Dynamic Programming)**을 이용하여 푸는 문제이다.</p>\n<p>동적 프로그래밍이란, 큰 문제를 작은 단위의 문제로 나누어 풀고 이전에 계산했던 값을 저장해둔 다음 매번 다시 계산하지 않고 저장해둔 값을 재사용하는 프로그래밍 기법을 의미한다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">N, number</span>):</span></span><br><span class=\"line\">    case = [<span class=\"number\">0</span>,[N]]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> N == number: </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"number\">9</span>): <span class=\"comment\"># 2부터 8까지</span></span><br><span class=\"line\">        num = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(N)*i)</span><br><span class=\"line\">        cases = []</span><br><span class=\"line\">        cases.append(num)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i_half <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i//<span class=\"number\">2</span>+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> case[i_half]: </span><br><span class=\"line\">                <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> case[i-i_half]: </span><br><span class=\"line\">                    cases.append(x*y)</span><br><span class=\"line\">                    cases.append(x+y)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> x &gt; y:</span><br><span class=\"line\">                        cases.append(x-y)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> y &gt; x:</span><br><span class=\"line\">                        cases.append(y-x)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> y != <span class=\"number\">0</span>:</span><br><span class=\"line\">                        cases.append(x/y)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> x != <span class=\"number\">0</span>:</span><br><span class=\"line\">                        cases.append(y/x)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> number <span class=\"keyword\">in</span> cases:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i</span><br><span class=\"line\">            case.append(cases)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>제일 이해하기 힘들었던 부분은 for문의 range를 i의 반만 도는 이유였다 </li>\n</ul>\n<p>풀이 추가하기,, </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>아래와 같이 5와 사칙연산만으로 12를 표현할 수 있습니다.</p>\n<p>12 = 5 + 5 + (5 / 5) + (5 / 5)<br>12 = 55 / 5 + 5 / 5<br>12 = (55 + 5) / 5</p>\n<p>5를 사용한 횟수는 각각 6,5,4 입니다. 그리고 이중 가장 작은 경우는 4입니다.<br>이처럼 숫자 N과 number가 주어질 때, N과 사칙연산만 사용해서 표현 할 수 있는 방법 중 N 사용횟수의 최솟값을 return 하도록 solution 함수를 작성하세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>N은 1 이상 9 이하입니다.</li>\n<li>number는 1 이상 32,000 이하입니다.</li>\n<li>수식에는 괄호와 사칙연산만 가능하며 나누기 연산에서 나머지는 무시합니다.</li>\n<li>최솟값이 8보다 크면 -1을 return 합니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>N</th>\n<th>number</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>12</td>\n<td>4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>11</td>\n<td>3</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>예제 #1<br>문제에 나온 예와 같습니다.</p>\n<p>예제 #2<br><code>11 = 22 / 2</code>와 같이 2를 3번만 사용하여 표현할 수 있습니다.</p>\n<p><a href=\"https://www.oi.edu.pl/old/php/show.php?ac=e181413&module=show&file=zadania/oi6/monocyfr\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>**동적 프로그래밍 (Dynamic Programming)**을 이용하여 푸는 문제이다.</p>\n<p>동적 프로그래밍이란, 큰 문제를 작은 단위의 문제로 나누어 풀고 이전에 계산했던 값을 저장해둔 다음 매번 다시 계산하지 않고 저장해둔 값을 재사용하는 프로그래밍 기법을 의미한다.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">N, number</span>):</span></span><br><span class=\"line\">    case = [<span class=\"number\">0</span>,[N]]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> N == number: </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>,<span class=\"number\">9</span>): <span class=\"comment\"># 2부터 8까지</span></span><br><span class=\"line\">        num = <span class=\"built_in\">int</span>(<span class=\"built_in\">str</span>(N)*i)</span><br><span class=\"line\">        cases = []</span><br><span class=\"line\">        cases.append(num)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i_half <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, i//<span class=\"number\">2</span>+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> case[i_half]: </span><br><span class=\"line\">                <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> case[i-i_half]: </span><br><span class=\"line\">                    cases.append(x*y)</span><br><span class=\"line\">                    cases.append(x+y)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> x &gt; y:</span><br><span class=\"line\">                        cases.append(x-y)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> y &gt; x:</span><br><span class=\"line\">                        cases.append(y-x)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> y != <span class=\"number\">0</span>:</span><br><span class=\"line\">                        cases.append(x/y)</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> x != <span class=\"number\">0</span>:</span><br><span class=\"line\">                        cases.append(y/x)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> number <span class=\"keyword\">in</span> cases:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i</span><br><span class=\"line\">            case.append(cases)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>제일 이해하기 힘들었던 부분은 for문의 range를 i의 반만 도는 이유였다 </li>\n</ul>\n<p>풀이 추가하기,, </p>\n"},{"title":"[알고리즘] 프로그래머스 - 네트워크 (Python)","date":"2020-04-13T12:37:00.000Z","_content":"\n# 문제\n\n네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.\n\n컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.\n\n##### 제한사항\n\n- 컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.\n- 각 컴퓨터는 0부터 `n-1`인 정수로 표현합니다.\n- i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.\n- computer[i][i]는 항상 1입니다.\n\n##### 입출력 예\n\n| n    | computers                         | return |\n| ---- | --------------------------------- | ------ |\n| 3    | [[1, 1, 0], [1, 1, 0], [0, 0, 1]] | 2      |\n| 3    | [[1, 1, 0], [1, 1, 1], [0, 1, 1]] | 1      |\n\n\n\n# 풀이\n\n```python\ndef solution(n, computers):\n    answer = 0\n    visited = []\n    for _ in range(n):\n        visited += [0]\n    def dfs(start, visited, computers):\n            stack = [start]\n            while stack:\n                current = stack.pop(0)\n                visited[current] = 1\n                for search in range(n):\n                    if computers[current][search] and visited[search] == 0:\n                        stack.append(search)\n    \n    i=0\n    while 0 in visited: # 다 돌 때까지 \n        if visited[i] == 0: # 아직 들리지 않았다면 \n            dfs(i, visited, computers) # 들린다. 한번에 연결된 노드까지 들린다.\n            answer +=1\n        i+=1\n\n    return answer\n\n\n```\n\n\n\n나는 dfs를 활용하여 풀었다. \n\n일단 모든 컴퓨터를 다 들려야 하기 떄문에 visited 가 1이 될 때까지 dfs함수를 실행한다.\n\n dfs는 한번 실행될 때 연결된 모든 노드를 돌기 때문에 함수밖에서 answer의 수를 1 UP해주면 네트워크의 수가 된다!  ","source":"_posts/programmers-network.md","raw":"---\ntitle: \"[알고리즘] 프로그래머스 - 네트워크 (Python)\"\ndate: 2020-04-13 21:37:00\ntags: 알고리즘\n---\n\n# 문제\n\n네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.\n\n컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.\n\n##### 제한사항\n\n- 컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.\n- 각 컴퓨터는 0부터 `n-1`인 정수로 표현합니다.\n- i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.\n- computer[i][i]는 항상 1입니다.\n\n##### 입출력 예\n\n| n    | computers                         | return |\n| ---- | --------------------------------- | ------ |\n| 3    | [[1, 1, 0], [1, 1, 0], [0, 0, 1]] | 2      |\n| 3    | [[1, 1, 0], [1, 1, 1], [0, 1, 1]] | 1      |\n\n\n\n# 풀이\n\n```python\ndef solution(n, computers):\n    answer = 0\n    visited = []\n    for _ in range(n):\n        visited += [0]\n    def dfs(start, visited, computers):\n            stack = [start]\n            while stack:\n                current = stack.pop(0)\n                visited[current] = 1\n                for search in range(n):\n                    if computers[current][search] and visited[search] == 0:\n                        stack.append(search)\n    \n    i=0\n    while 0 in visited: # 다 돌 때까지 \n        if visited[i] == 0: # 아직 들리지 않았다면 \n            dfs(i, visited, computers) # 들린다. 한번에 연결된 노드까지 들린다.\n            answer +=1\n        i+=1\n\n    return answer\n\n\n```\n\n\n\n나는 dfs를 활용하여 풀었다. \n\n일단 모든 컴퓨터를 다 들려야 하기 떄문에 visited 가 1이 될 때까지 dfs함수를 실행한다.\n\n dfs는 한번 실행될 때 연결된 모든 노드를 돌기 때문에 함수밖에서 answer의 수를 1 UP해주면 네트워크의 수가 된다!  ","slug":"programmers-network","published":1,"updated":"2021-02-08T18:25:02.416Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kb0021f9c91o6aapuu","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.</p>\n<p>컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.</li>\n<li>각 컴퓨터는 0부터 <code>n-1</code>인 정수로 표현합니다.</li>\n<li>i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.</li>\n<li>computer[i][i]는 항상 1입니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>n</th>\n<th>computers</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>3</td>\n<td>[[1, 1, 0], [1, 1, 0], [0, 0, 1]]</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[[1, 1, 0], [1, 1, 1], [0, 1, 1]]</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">n, computers</span>):</span></span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    visited = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        visited += [<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">start, visited, computers</span>):</span></span><br><span class=\"line\">            stack = [start]</span><br><span class=\"line\">            <span class=\"keyword\">while</span> stack:</span><br><span class=\"line\">                current = stack.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                visited[current] = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> search <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> computers[current][search] <span class=\"keyword\">and</span> visited[search] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        stack.append(search)</span><br><span class=\"line\">    </span><br><span class=\"line\">    i=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">0</span> <span class=\"keyword\">in</span> visited: <span class=\"comment\"># 다 돌 때까지 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> visited[i] == <span class=\"number\">0</span>: <span class=\"comment\"># 아직 들리지 않았다면 </span></span><br><span class=\"line\">            dfs(i, visited, computers) <span class=\"comment\"># 들린다. 한번에 연결된 노드까지 들린다.</span></span><br><span class=\"line\">            answer +=<span class=\"number\">1</span></span><br><span class=\"line\">        i+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>나는 dfs를 활용하여 풀었다. </p>\n<p>일단 모든 컴퓨터를 다 들려야 하기 떄문에 visited 가 1이 될 때까지 dfs함수를 실행한다.</p>\n<p> dfs는 한번 실행될 때 연결된 모든 노드를 돌기 때문에 함수밖에서 answer의 수를 1 UP해주면 네트워크의 수가 된다!  </p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>네트워크란 컴퓨터 상호 간에 정보를 교환할 수 있도록 연결된 형태를 의미합니다. 예를 들어, 컴퓨터 A와 컴퓨터 B가 직접적으로 연결되어있고, 컴퓨터 B와 컴퓨터 C가 직접적으로 연결되어 있을 때 컴퓨터 A와 컴퓨터 C도 간접적으로 연결되어 정보를 교환할 수 있습니다. 따라서 컴퓨터 A, B, C는 모두 같은 네트워크 상에 있다고 할 수 있습니다.</p>\n<p>컴퓨터의 개수 n, 연결에 대한 정보가 담긴 2차원 배열 computers가 매개변수로 주어질 때, 네트워크의 개수를 return 하도록 solution 함수를 작성하시오.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>컴퓨터의 개수 n은 1 이상 200 이하인 자연수입니다.</li>\n<li>각 컴퓨터는 0부터 <code>n-1</code>인 정수로 표현합니다.</li>\n<li>i번 컴퓨터와 j번 컴퓨터가 연결되어 있으면 computers[i][j]를 1로 표현합니다.</li>\n<li>computer[i][i]는 항상 1입니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>n</th>\n<th>computers</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>3</td>\n<td>[[1, 1, 0], [1, 1, 0], [0, 0, 1]]</td>\n<td>2</td>\n</tr>\n<tr>\n<td>3</td>\n<td>[[1, 1, 0], [1, 1, 1], [0, 1, 1]]</td>\n<td>1</td>\n</tr>\n</tbody></table>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">n, computers</span>):</span></span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    visited = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        visited += [<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dfs</span>(<span class=\"params\">start, visited, computers</span>):</span></span><br><span class=\"line\">            stack = [start]</span><br><span class=\"line\">            <span class=\"keyword\">while</span> stack:</span><br><span class=\"line\">                current = stack.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">                visited[current] = <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> search <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> computers[current][search] <span class=\"keyword\">and</span> visited[search] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                        stack.append(search)</span><br><span class=\"line\">    </span><br><span class=\"line\">    i=<span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"number\">0</span> <span class=\"keyword\">in</span> visited: <span class=\"comment\"># 다 돌 때까지 </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> visited[i] == <span class=\"number\">0</span>: <span class=\"comment\"># 아직 들리지 않았다면 </span></span><br><span class=\"line\">            dfs(i, visited, computers) <span class=\"comment\"># 들린다. 한번에 연결된 노드까지 들린다.</span></span><br><span class=\"line\">            answer +=<span class=\"number\">1</span></span><br><span class=\"line\">        i+=<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<p>나는 dfs를 활용하여 풀었다. </p>\n<p>일단 모든 컴퓨터를 다 들려야 하기 떄문에 visited 가 1이 될 때까지 dfs함수를 실행한다.</p>\n<p> dfs는 한번 실행될 때 연결된 모든 노드를 돌기 때문에 함수밖에서 answer의 수를 1 UP해주면 네트워크의 수가 된다!  </p>\n"},{"title":"[프로그래머스] 완주하지 못한 선수 - 파이썬","date":"2020-03-14T06:00:00.000Z","_content":"\n# 문제\n\n수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.\n\n마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한사항\n\n- 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.\n- completion의 길이는 participant의 길이보다 1 작습니다.\n- 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.\n- 참가자 중에는 동명이인이 있을 수 있습니다.\n\n##### 입출력 예\n\n| participant                             | completion                       | return |\n| --------------------------------------- | -------------------------------- | ------ |\n| [leo, kiki, eden]                       | [eden, kiki]                     | leo    |\n| [marina, josipa, nikola, vinko, filipa] | [josipa, filipa, marina, nikola] | vinko  |\n| [mislav, stanko, mislav, ana]           | [stanko, ana, mislav]            | mislav |\n\n##### 입출력 예 설명\n\n예제 #1\nleo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.\n\n예제 #2\nvinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.\n\n예제 #3\nmislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.\n\n[출처](http://hsin.hr/coci/archive/2014_2015/contest2_tasks.pdf)\n\n\n\n# 풀이\n\n```python\ndef solution(participant, completion):\n    for c in completion:\n        participant.remove(c)\n    answer = participant[0]\n    return answer\n```\n\n- 처음 위 코드로 풀었더니 시간복잡도가 O(N^2) 를 초과( for문 중첩 사용) 하여 효율성에서 0점이 나오게 된다 ㅠ^ㅠ\n\n\n\n```python\ndef solution(participant, completion):\n    participant.sort()\n    completion.sort()\n    for i,j in zip(participant,completion):\n        if i!=j:\n            return i \n    answer = participant[0]\n    return answer\n```\n\n#### 새로 알게된 함수\n\n1. `sort()` : python 내장 함수로 시간 복잡도가 **O(n logn)**이다. \n\n   ```python\n   >>> a = [1, 4, 10, 2, 5]\n   >>> a.sort()\n   >>> a\n   [1, 2, 4, 5, 10]\n   \n   >>> a.sort(reverse=True)\n   >>> a\n   [10, 5, 4, 2, 1]\n   ```\n\n2. `zip(*iterable)` : 동일한 개수로 이루어진 자료형을 묶어주는 역할을 하는 함수이다.\n\n   > *iterable : 반복가능한 자료형 여러 개를 입력할 수 있다는 뜻\n\n   ```python\n   >>> list(zip[1,2,3], [4,5,6])\n   [(1,4),(2,5),(3,6)]\n   ```\n\n위 두가지를 이용하므로써 *participant 배열*과 *completion 배열*을 `sort`하여 알파벳순으로 정렬한 후 `zip`을 통해 묶는다. 이 때 묶인 participant와 completion 이 같지 않다는 것은 완주를 하지 않았다는 뜻이므로 participant를 반환하면 된다. ","source":"_posts/programmers-participant-not-completion.md","raw":"---\ntitle: \"[프로그래머스] 완주하지 못한 선수 - 파이썬\"\ndate: 2020-03-14 15:00:00\ntags: 알고리즘\n---\n\n# 문제\n\n수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.\n\n마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한사항\n\n- 마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.\n- completion의 길이는 participant의 길이보다 1 작습니다.\n- 참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.\n- 참가자 중에는 동명이인이 있을 수 있습니다.\n\n##### 입출력 예\n\n| participant                             | completion                       | return |\n| --------------------------------------- | -------------------------------- | ------ |\n| [leo, kiki, eden]                       | [eden, kiki]                     | leo    |\n| [marina, josipa, nikola, vinko, filipa] | [josipa, filipa, marina, nikola] | vinko  |\n| [mislav, stanko, mislav, ana]           | [stanko, ana, mislav]            | mislav |\n\n##### 입출력 예 설명\n\n예제 #1\nleo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.\n\n예제 #2\nvinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.\n\n예제 #3\nmislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.\n\n[출처](http://hsin.hr/coci/archive/2014_2015/contest2_tasks.pdf)\n\n\n\n# 풀이\n\n```python\ndef solution(participant, completion):\n    for c in completion:\n        participant.remove(c)\n    answer = participant[0]\n    return answer\n```\n\n- 처음 위 코드로 풀었더니 시간복잡도가 O(N^2) 를 초과( for문 중첩 사용) 하여 효율성에서 0점이 나오게 된다 ㅠ^ㅠ\n\n\n\n```python\ndef solution(participant, completion):\n    participant.sort()\n    completion.sort()\n    for i,j in zip(participant,completion):\n        if i!=j:\n            return i \n    answer = participant[0]\n    return answer\n```\n\n#### 새로 알게된 함수\n\n1. `sort()` : python 내장 함수로 시간 복잡도가 **O(n logn)**이다. \n\n   ```python\n   >>> a = [1, 4, 10, 2, 5]\n   >>> a.sort()\n   >>> a\n   [1, 2, 4, 5, 10]\n   \n   >>> a.sort(reverse=True)\n   >>> a\n   [10, 5, 4, 2, 1]\n   ```\n\n2. `zip(*iterable)` : 동일한 개수로 이루어진 자료형을 묶어주는 역할을 하는 함수이다.\n\n   > *iterable : 반복가능한 자료형 여러 개를 입력할 수 있다는 뜻\n\n   ```python\n   >>> list(zip[1,2,3], [4,5,6])\n   [(1,4),(2,5),(3,6)]\n   ```\n\n위 두가지를 이용하므로써 *participant 배열*과 *completion 배열*을 `sort`하여 알파벳순으로 정렬한 후 `zip`을 통해 묶는다. 이 때 묶인 participant와 completion 이 같지 않다는 것은 완주를 하지 않았다는 뜻이므로 participant를 반환하면 된다. ","slug":"programmers-participant-not-completion","published":1,"updated":"2021-02-08T18:25:02.417Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kc0024f9c962waaprl","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.</p>\n<p>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.</li>\n<li>completion의 길이는 participant의 길이보다 1 작습니다.</li>\n<li>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.</li>\n<li>참가자 중에는 동명이인이 있을 수 있습니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>participant</th>\n<th>completion</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[leo, kiki, eden]</td>\n<td>[eden, kiki]</td>\n<td>leo</td>\n</tr>\n<tr>\n<td>[marina, josipa, nikola, vinko, filipa]</td>\n<td>[josipa, filipa, marina, nikola]</td>\n<td>vinko</td>\n</tr>\n<tr>\n<td>[mislav, stanko, mislav, ana]</td>\n<td>[stanko, ana, mislav]</td>\n<td>mislav</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>예제 #1<br>leo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</p>\n<p>예제 #2<br>vinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</p>\n<p>예제 #3<br>mislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.</p>\n<p><a href=\"http://hsin.hr/coci/archive/2014_2015/contest2_tasks.pdf\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">participant, completion</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> completion:</span><br><span class=\"line\">        participant.remove(c)</span><br><span class=\"line\">    answer = participant[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<ul>\n<li>처음 위 코드로 풀었더니 시간복잡도가 O(N^2) 를 초과( for문 중첩 사용) 하여 효율성에서 0점이 나오게 된다 ㅠ^ㅠ</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">participant, completion</span>):</span></span><br><span class=\"line\">    participant.sort()</span><br><span class=\"line\">    completion.sort()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(participant,completion):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i!=j:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i </span><br><span class=\"line\">    answer = participant[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<h4 id=\"새로-알게된-함수\"><a href=\"#새로-알게된-함수\" class=\"headerlink\" title=\"새로 알게된 함수\"></a>새로 알게된 함수</h4><ol>\n<li><p><code>sort()</code> : python 내장 함수로 시간 복잡도가 **O(n logn)**이다. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.sort()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p><code>zip(*iterable)</code> : 동일한 개수로 이루어진 자료형을 묶어주는 역할을 하는 함수이다.</p>\n<blockquote>\n<p>*iterable : 반복가능한 자료형 여러 개를 입력할 수 있다는 뜻</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">zip</span>[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\">[(<span class=\"number\">1</span>,<span class=\"number\">4</span>),(<span class=\"number\">2</span>,<span class=\"number\">5</span>),(<span class=\"number\">3</span>,<span class=\"number\">6</span>)]</span><br></pre></td></tr></table></figure>\n<p>위 두가지를 이용하므로써 <em>participant 배열</em>과 <em>completion 배열</em>을 <code>sort</code>하여 알파벳순으로 정렬한 후 <code>zip</code>을 통해 묶는다. 이 때 묶인 participant와 completion 이 같지 않다는 것은 완주를 하지 않았다는 뜻이므로 participant를 반환하면 된다. </p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>수많은 마라톤 선수들이 마라톤에 참여하였습니다. 단 한 명의 선수를 제외하고는 모든 선수가 마라톤을 완주하였습니다.</p>\n<p>마라톤에 참여한 선수들의 이름이 담긴 배열 participant와 완주한 선수들의 이름이 담긴 배열 completion이 주어질 때, 완주하지 못한 선수의 이름을 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>마라톤 경기에 참여한 선수의 수는 1명 이상 100,000명 이하입니다.</li>\n<li>completion의 길이는 participant의 길이보다 1 작습니다.</li>\n<li>참가자의 이름은 1개 이상 20개 이하의 알파벳 소문자로 이루어져 있습니다.</li>\n<li>참가자 중에는 동명이인이 있을 수 있습니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>participant</th>\n<th>completion</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[leo, kiki, eden]</td>\n<td>[eden, kiki]</td>\n<td>leo</td>\n</tr>\n<tr>\n<td>[marina, josipa, nikola, vinko, filipa]</td>\n<td>[josipa, filipa, marina, nikola]</td>\n<td>vinko</td>\n</tr>\n<tr>\n<td>[mislav, stanko, mislav, ana]</td>\n<td>[stanko, ana, mislav]</td>\n<td>mislav</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>예제 #1<br>leo는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</p>\n<p>예제 #2<br>vinko는 참여자 명단에는 있지만, 완주자 명단에는 없기 때문에 완주하지 못했습니다.</p>\n<p>예제 #3<br>mislav는 참여자 명단에는 두 명이 있지만, 완주자 명단에는 한 명밖에 없기 때문에 한명은 완주하지 못했습니다.</p>\n<p><a href=\"http://hsin.hr/coci/archive/2014_2015/contest2_tasks.pdf\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">participant, completion</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> completion:</span><br><span class=\"line\">        participant.remove(c)</span><br><span class=\"line\">    answer = participant[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<ul>\n<li>처음 위 코드로 풀었더니 시간복잡도가 O(N^2) 를 초과( for문 중첩 사용) 하여 효율성에서 0점이 나오게 된다 ㅠ^ㅠ</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">participant, completion</span>):</span></span><br><span class=\"line\">    participant.sort()</span><br><span class=\"line\">    completion.sort()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i,j <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(participant,completion):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i!=j:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> i </span><br><span class=\"line\">    answer = participant[<span class=\"number\">0</span>]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<h4 id=\"새로-알게된-함수\"><a href=\"#새로-알게된-함수\" class=\"headerlink\" title=\"새로 알게된 함수\"></a>새로 알게된 함수</h4><ol>\n<li><p><code>sort()</code> : python 내장 함수로 시간 복잡도가 **O(n logn)**이다. </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">10</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.sort()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.sort(reverse=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure></li>\n<li><p><code>zip(*iterable)</code> : 동일한 개수로 이루어진 자료형을 묶어주는 역할을 하는 함수이다.</p>\n<blockquote>\n<p>*iterable : 반복가능한 자료형 여러 개를 입력할 수 있다는 뜻</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">zip</span>[<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>], [<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>])</span><br><span class=\"line\">[(<span class=\"number\">1</span>,<span class=\"number\">4</span>),(<span class=\"number\">2</span>,<span class=\"number\">5</span>),(<span class=\"number\">3</span>,<span class=\"number\">6</span>)]</span><br></pre></td></tr></table></figure>\n<p>위 두가지를 이용하므로써 <em>participant 배열</em>과 <em>completion 배열</em>을 <code>sort</code>하여 알파벳순으로 정렬한 후 <code>zip</code>을 통해 묶는다. 이 때 묶인 participant와 completion 이 같지 않다는 것은 완주를 하지 않았다는 뜻이므로 participant를 반환하면 된다. </p>\n</li>\n</ol>\n"},{"title":"[프로그래머스] 해시- 전화번호 목록 (파이썬/ python)","dates":"2020-08-27T11:48:00.000Z","_content":"\n\n\n# 문제\n\n전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.\n전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.\n\n- 구조대 : 119\n- 박준영 : 97 674 223\n- 지영석 : 11 9552 4421\n\n전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한 사항\n\n- phone_book의 길이는 1 이상 1,000,000 이하입니다.\n- 각 전화번호의 길이는 1 이상 20 이하입니다.\n\n##### 입출력 예제\n\n| phone_book                  | return |\n| --------------------------- | ------ |\n| [119, 97674223, 1195524421] | false  |\n| [123,456,789]               | true   |\n| [12,123,1235,567,88]        | false  |\n\n##### 입출력 예 설명\n\n입출력 예 #1\n앞에서 설명한 예와 같습니다.\n\n입출력 예 #2\n한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.\n\n입출력 예 #3\n첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.\n\n\n\n# 풀이\n\n```python\ndef solution(phone_book):\n    phone_book.sort()\n    answer = True\n    \n    for i in range(len(phone_book)-1):\n        if phone_book[i+1].startswith(phone_book[i],0,len(phone_book[i])):\n            answer = False\n            break\n        \n    return answer\n```\n\n* 새로 알게 된 것 \n\n  * find() => 인덱스 위치 반환\n\n  * startswith(확인하고자하는 문자, 시작위치, 끝위치) => True/ False 여부 반환\n\n    ```python\n    print('12345'.startswith('1')) # True\n    print('12345'.startswith('2')) # False\n    print('12345'.startswith('4',2)) # False\n    print('12345'.startswith('4',3,4)) # True\n    print('12345'.startswith('1',2,4)) # False\n    print('12345'.startswith('1',0,2)) # True\n    ```\n\n  * endswith()\n\n    ```python\n    print('12345'.endswith('5')) # True\n    print('12345'.endswith('2',0,2)) # True '12'\n    print('12345'.endswith('4',0,5)) # False '12345'\n    print('12345'.endswith('5',4,5)) # True '45'\n    ```\n\n    위 예제들에서 알 수 있다싶이, 배열은 두번째 인수의 인덱스 부터 세번째 인수의 인덱스-1까지 자른 후 검사한다 ! \n\n    default 는 배열 전체.\n\n* phone_book.sort() 를 하면 스트링 sort이기 때문에\n\n  `['119', '97674223', '1195524421']`-> `['119', '1195524421', '97674223']`  이러한 형식으로 sort 된다.\n\n","source":"_posts/programmers-phonebook.md","raw":"---\ntitle: \"[프로그래머스] 해시- 전화번호 목록 (파이썬/ python)\"\ndates: 2020-08-27 20:48:00\ntag: 알고리즘\n---\n\n\n\n# 문제\n\n전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.\n전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.\n\n- 구조대 : 119\n- 박준영 : 97 674 223\n- 지영석 : 11 9552 4421\n\n전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한 사항\n\n- phone_book의 길이는 1 이상 1,000,000 이하입니다.\n- 각 전화번호의 길이는 1 이상 20 이하입니다.\n\n##### 입출력 예제\n\n| phone_book                  | return |\n| --------------------------- | ------ |\n| [119, 97674223, 1195524421] | false  |\n| [123,456,789]               | true   |\n| [12,123,1235,567,88]        | false  |\n\n##### 입출력 예 설명\n\n입출력 예 #1\n앞에서 설명한 예와 같습니다.\n\n입출력 예 #2\n한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.\n\n입출력 예 #3\n첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.\n\n\n\n# 풀이\n\n```python\ndef solution(phone_book):\n    phone_book.sort()\n    answer = True\n    \n    for i in range(len(phone_book)-1):\n        if phone_book[i+1].startswith(phone_book[i],0,len(phone_book[i])):\n            answer = False\n            break\n        \n    return answer\n```\n\n* 새로 알게 된 것 \n\n  * find() => 인덱스 위치 반환\n\n  * startswith(확인하고자하는 문자, 시작위치, 끝위치) => True/ False 여부 반환\n\n    ```python\n    print('12345'.startswith('1')) # True\n    print('12345'.startswith('2')) # False\n    print('12345'.startswith('4',2)) # False\n    print('12345'.startswith('4',3,4)) # True\n    print('12345'.startswith('1',2,4)) # False\n    print('12345'.startswith('1',0,2)) # True\n    ```\n\n  * endswith()\n\n    ```python\n    print('12345'.endswith('5')) # True\n    print('12345'.endswith('2',0,2)) # True '12'\n    print('12345'.endswith('4',0,5)) # False '12345'\n    print('12345'.endswith('5',4,5)) # True '45'\n    ```\n\n    위 예제들에서 알 수 있다싶이, 배열은 두번째 인수의 인덱스 부터 세번째 인수의 인덱스-1까지 자른 후 검사한다 ! \n\n    default 는 배열 전체.\n\n* phone_book.sort() 를 하면 스트링 sort이기 때문에\n\n  `['119', '97674223', '1195524421']`-> `['119', '1195524421', '97674223']`  이러한 형식으로 sort 된다.\n\n","slug":"programmers-phonebook","published":1,"date":"2021-02-08T18:24:56.384Z","updated":"2021-02-08T18:24:56.403Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kd0026f9c90nsm1e9e","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.<br>전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.</p>\n<ul>\n<li>구조대 : 119</li>\n<li>박준영 : 97 674 223</li>\n<li>지영석 : 11 9552 4421</li>\n</ul>\n<p>전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한-사항\"><a href=\"#제한-사항\" class=\"headerlink\" title=\"제한 사항\"></a>제한 사항</h5><ul>\n<li>phone_book의 길이는 1 이상 1,000,000 이하입니다.</li>\n<li>각 전화번호의 길이는 1 이상 20 이하입니다.</li>\n</ul>\n<h5 id=\"입출력-예제\"><a href=\"#입출력-예제\" class=\"headerlink\" title=\"입출력 예제\"></a>입출력 예제</h5><table>\n<thead>\n<tr>\n<th>phone_book</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[119, 97674223, 1195524421]</td>\n<td>false</td>\n</tr>\n<tr>\n<td>[123,456,789]</td>\n<td>true</td>\n</tr>\n<tr>\n<td>[12,123,1235,567,88]</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>입출력 예 #1<br>앞에서 설명한 예와 같습니다.</p>\n<p>입출력 예 #2<br>한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.</p>\n<p>입출력 예 #3<br>첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">phone_book</span>):</span></span><br><span class=\"line\">    phone_book.sort()</span><br><span class=\"line\">    answer = <span class=\"literal\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(phone_book)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> phone_book[i+<span class=\"number\">1</span>].startswith(phone_book[i],<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(phone_book[i])):</span><br><span class=\"line\">            answer = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>새로 알게 된 것 </p>\n<ul>\n<li><p>find() =&gt; 인덱스 위치 반환</p>\n</li>\n<li><p>startswith(확인하고자하는 문자, 시작위치, 끝위치) =&gt; True/ False 여부 반환</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;1&#x27;</span>)) <span class=\"comment\"># True</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;2&#x27;</span>)) <span class=\"comment\"># False</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"number\">2</span>)) <span class=\"comment\"># False</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)) <span class=\"comment\"># True</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>)) <span class=\"comment\"># False</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>)) <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure></li>\n<li><p>endswith()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.endswith(<span class=\"string\">&#x27;5&#x27;</span>)) <span class=\"comment\"># True</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.endswith(<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>)) <span class=\"comment\"># True &#x27;12&#x27;</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.endswith(<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>)) <span class=\"comment\"># False &#x27;12345&#x27;</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.endswith(<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)) <span class=\"comment\"># True &#x27;45&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>위 예제들에서 알 수 있다싶이, 배열은 두번째 인수의 인덱스 부터 세번째 인수의 인덱스-1까지 자른 후 검사한다 ! </p>\n<p>default 는 배열 전체.</p>\n</li>\n</ul>\n</li>\n<li><p>phone_book.sort() 를 하면 스트링 sort이기 때문에</p>\n<p><code>[&#39;119&#39;, &#39;97674223&#39;, &#39;1195524421&#39;]</code>-&gt; <code>[&#39;119&#39;, &#39;1195524421&#39;, &#39;97674223&#39;]</code>  이러한 형식으로 sort 된다.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>전화번호부에 적힌 전화번호 중, 한 번호가 다른 번호의 접두어인 경우가 있는지 확인하려 합니다.<br>전화번호가 다음과 같을 경우, 구조대 전화번호는 영석이의 전화번호의 접두사입니다.</p>\n<ul>\n<li>구조대 : 119</li>\n<li>박준영 : 97 674 223</li>\n<li>지영석 : 11 9552 4421</li>\n</ul>\n<p>전화번호부에 적힌 전화번호를 담은 배열 phone_book 이 solution 함수의 매개변수로 주어질 때, 어떤 번호가 다른 번호의 접두어인 경우가 있으면 false를 그렇지 않으면 true를 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한-사항\"><a href=\"#제한-사항\" class=\"headerlink\" title=\"제한 사항\"></a>제한 사항</h5><ul>\n<li>phone_book의 길이는 1 이상 1,000,000 이하입니다.</li>\n<li>각 전화번호의 길이는 1 이상 20 이하입니다.</li>\n</ul>\n<h5 id=\"입출력-예제\"><a href=\"#입출력-예제\" class=\"headerlink\" title=\"입출력 예제\"></a>입출력 예제</h5><table>\n<thead>\n<tr>\n<th>phone_book</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[119, 97674223, 1195524421]</td>\n<td>false</td>\n</tr>\n<tr>\n<td>[123,456,789]</td>\n<td>true</td>\n</tr>\n<tr>\n<td>[12,123,1235,567,88]</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>입출력 예 #1<br>앞에서 설명한 예와 같습니다.</p>\n<p>입출력 예 #2<br>한 번호가 다른 번호의 접두사인 경우가 없으므로, 답은 true입니다.</p>\n<p>입출력 예 #3<br>첫 번째 전화번호, “12”가 두 번째 전화번호 “123”의 접두사입니다. 따라서 답은 false입니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">phone_book</span>):</span></span><br><span class=\"line\">    phone_book.sort()</span><br><span class=\"line\">    answer = <span class=\"literal\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(phone_book)-<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> phone_book[i+<span class=\"number\">1</span>].startswith(phone_book[i],<span class=\"number\">0</span>,<span class=\"built_in\">len</span>(phone_book[i])):</span><br><span class=\"line\">            answer = <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>새로 알게 된 것 </p>\n<ul>\n<li><p>find() =&gt; 인덱스 위치 반환</p>\n</li>\n<li><p>startswith(확인하고자하는 문자, 시작위치, 끝위치) =&gt; True/ False 여부 반환</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;1&#x27;</span>)) <span class=\"comment\"># True</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;2&#x27;</span>)) <span class=\"comment\"># False</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"number\">2</span>)) <span class=\"comment\"># False</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)) <span class=\"comment\"># True</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>)) <span class=\"comment\"># False</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.startswith(<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>)) <span class=\"comment\"># True</span></span><br></pre></td></tr></table></figure></li>\n<li><p>endswith()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.endswith(<span class=\"string\">&#x27;5&#x27;</span>)) <span class=\"comment\"># True</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.endswith(<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"number\">0</span>,<span class=\"number\">2</span>)) <span class=\"comment\"># True &#x27;12&#x27;</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.endswith(<span class=\"string\">&#x27;4&#x27;</span>,<span class=\"number\">0</span>,<span class=\"number\">5</span>)) <span class=\"comment\"># False &#x27;12345&#x27;</span></span><br><span class=\"line\">print(<span class=\"string\">&#x27;12345&#x27;</span>.endswith(<span class=\"string\">&#x27;5&#x27;</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>)) <span class=\"comment\"># True &#x27;45&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>위 예제들에서 알 수 있다싶이, 배열은 두번째 인수의 인덱스 부터 세번째 인수의 인덱스-1까지 자른 후 검사한다 ! </p>\n<p>default 는 배열 전체.</p>\n</li>\n</ul>\n</li>\n<li><p>phone_book.sort() 를 하면 스트링 sort이기 때문에</p>\n<p><code>[&#39;119&#39;, &#39;97674223&#39;, &#39;1195524421&#39;]</code>-&gt; <code>[&#39;119&#39;, &#39;1195524421&#39;, &#39;97674223&#39;]</code>  이러한 형식으로 sort 된다.</p>\n</li>\n</ul>\n"},{"title":"[프로그래머스] 주식가격 (파이썬/pyhton)","dates":"2020-08-26T15:59:00.000Z","_content":"\n# 문제\n\n초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.\n\n##### 제한사항\n\n- prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.\n- prices의 길이는 2 이상 100,000 이하입니다.\n\n##### 입출력 예\n\n| prices          | return          |\n| --------------- | --------------- |\n| [1, 2, 3, 2, 3] | [4, 3, 1, 1, 0] |\n\n##### 입출력 예 설명\n\n- 1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.\n\n- 2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.\n\n- 3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.\n\n- 4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.\n\n- 5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.\n\n  \n\n# 풀이\n\n```python\ndef solution(prices):\n    answer = [0 for _ in range(len(prices))]\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            if prices[i] > prices[j]:\n                answer[i] += 1\n                break\n            else: \n                answer[i] += 1\n    \n    return answer\n```\n\n","source":"_posts/programmers-price-of-stock.md","raw":"---\ntitle: \"[프로그래머스] 주식가격 (파이썬/pyhton)\"\ndates: 2020-08-27 00:59:00\ntag: 알고리즘\n---\n\n# 문제\n\n초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.\n\n##### 제한사항\n\n- prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.\n- prices의 길이는 2 이상 100,000 이하입니다.\n\n##### 입출력 예\n\n| prices          | return          |\n| --------------- | --------------- |\n| [1, 2, 3, 2, 3] | [4, 3, 1, 1, 0] |\n\n##### 입출력 예 설명\n\n- 1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.\n\n- 2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.\n\n- 3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.\n\n- 4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.\n\n- 5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.\n\n  \n\n# 풀이\n\n```python\ndef solution(prices):\n    answer = [0 for _ in range(len(prices))]\n    for i in range(len(prices)):\n        for j in range(i+1, len(prices)):\n            if prices[i] > prices[j]:\n                answer[i] += 1\n                break\n            else: \n                answer[i] += 1\n    \n    return answer\n```\n\n","slug":"programmers-price-of-stock","published":1,"date":"2021-02-08T18:24:56.265Z","updated":"2021-02-08T18:24:56.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0ke0029f9c94eppbr7f","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.</li>\n<li>prices의 길이는 2 이상 100,000 이하입니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>prices</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[1, 2, 3, 2, 3]</td>\n<td>[4, 3, 1, 1, 0]</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><ul>\n<li><p>1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.</p>\n</li>\n<li><p>2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.</p>\n</li>\n<li><p>3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.</p>\n</li>\n<li><p>4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.</p>\n</li>\n<li><p>5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.</p>\n</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">prices</span>):</span></span><br><span class=\"line\">    answer = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(prices))]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(prices)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(prices)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prices[i] &gt; prices[j]:</span><br><span class=\"line\">                answer[i] += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>: </span><br><span class=\"line\">                answer[i] += <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>초 단위로 기록된 주식가격이 담긴 배열 prices가 매개변수로 주어질 때, 가격이 떨어지지 않은 기간은 몇 초인지를 return 하도록 solution 함수를 완성하세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>prices의 각 가격은 1 이상 10,000 이하인 자연수입니다.</li>\n<li>prices의 길이는 2 이상 100,000 이하입니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>prices</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[1, 2, 3, 2, 3]</td>\n<td>[4, 3, 1, 1, 0]</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><ul>\n<li><p>1초 시점의 ₩1은 끝까지 가격이 떨어지지 않았습니다.</p>\n</li>\n<li><p>2초 시점의 ₩2은 끝까지 가격이 떨어지지 않았습니다.</p>\n</li>\n<li><p>3초 시점의 ₩3은 1초뒤에 가격이 떨어집니다. 따라서 1초간 가격이 떨어지지 않은 것으로 봅니다.</p>\n</li>\n<li><p>4초 시점의 ₩2은 1초간 가격이 떨어지지 않았습니다.</p>\n</li>\n<li><p>5초 시점의 ₩3은 0초간 가격이 떨어지지 않았습니다.</p>\n</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">prices</span>):</span></span><br><span class=\"line\">    answer = [<span class=\"number\">0</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(prices))]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(prices)):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(prices)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prices[i] &gt; prices[j]:</span><br><span class=\"line\">                answer[i] += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>: </span><br><span class=\"line\">                answer[i] += <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n"},{"title":"[프로그래머스] 프린터 - 파이썬","date":"2020-02-15T09:27:00.000Z","_content":"\n\n\n# 문제설명\n\n일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.\n\n```\n1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.\n2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.\n3. 그렇지 않으면 J를 인쇄합니다.\n```\n\n예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.\n\n내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.\n\n현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.\n\n## 제한사항\n\n- 현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.\n- 인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.\n- location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.\n\n##### 입출력 예\n\n| priorities         | location | return |\n| ------------------ | -------- | ------ |\n| [2, 1, 3, 2]       | 2        | 1      |\n| [1, 1, 9, 1, 1, 1] | 0        | 5      |\n\n##### 입출력 예 설명\n\n예제 #1\n\n문제에 나온 예와 같습니다.\n\n예제 #2\n\n6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.\n\n[출처](http://www.csc.kth.se/contest/nwerc/2006/problems/nwerc06.pdf)\n\n# 풀이\n\n```python\ndef solution(priorities, location):\n    answer = 0\n    pi_list = [(p, i) for (i, p) in enumerate(priorities)]\n               \n    while pi_list:\n        prior = pi_list.pop(0)\n        # 밑에 코드 추가하니까 85점 -> 100점\n        if pi_list:\n            p_list = [priority for priority, idx in pi_list]\n        \n        if p_list:\n            if prior[0] >= max(p_list):\n                if prior[1] == location:\n                    return answer + 1\n                else:\n                    answer += 1\n            else:\n                pi_list.append(prior)\n        \n```\n\n### 변수설명\n\n- pi_list : (우선순위, index) 로 저장된 튜플\n- prior : 첫번째 대기 문서\n- p_list :  남아있는 문서들의 우선순위 배열\n\n\n\n나의 첫번째 알고리즘 문제이다!\n\n 많은 정답을 참고하고 이해하면서 풀어보았다\n\n**tuple**과 **enumerate**에 대해 처음 알게 된 문제이다. \n\n**enmerate**는 리스트를 순서와 리스트의 값을 한쌍으로 반환하는 함수이다.","source":"_posts/programmers-printer.md","raw":"---\ntitle: \"[프로그래머스] 프린터 - 파이썬\"\ndate: 2020-02-15 18:27:00\ntags: 알고리즘\n\n---\n\n\n\n# 문제설명\n\n일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.\n\n```\n1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.\n2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.\n3. 그렇지 않으면 J를 인쇄합니다.\n```\n\n예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.\n\n내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.\n\n현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.\n\n## 제한사항\n\n- 현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.\n- 인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.\n- location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.\n\n##### 입출력 예\n\n| priorities         | location | return |\n| ------------------ | -------- | ------ |\n| [2, 1, 3, 2]       | 2        | 1      |\n| [1, 1, 9, 1, 1, 1] | 0        | 5      |\n\n##### 입출력 예 설명\n\n예제 #1\n\n문제에 나온 예와 같습니다.\n\n예제 #2\n\n6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.\n\n[출처](http://www.csc.kth.se/contest/nwerc/2006/problems/nwerc06.pdf)\n\n# 풀이\n\n```python\ndef solution(priorities, location):\n    answer = 0\n    pi_list = [(p, i) for (i, p) in enumerate(priorities)]\n               \n    while pi_list:\n        prior = pi_list.pop(0)\n        # 밑에 코드 추가하니까 85점 -> 100점\n        if pi_list:\n            p_list = [priority for priority, idx in pi_list]\n        \n        if p_list:\n            if prior[0] >= max(p_list):\n                if prior[1] == location:\n                    return answer + 1\n                else:\n                    answer += 1\n            else:\n                pi_list.append(prior)\n        \n```\n\n### 변수설명\n\n- pi_list : (우선순위, index) 로 저장된 튜플\n- prior : 첫번째 대기 문서\n- p_list :  남아있는 문서들의 우선순위 배열\n\n\n\n나의 첫번째 알고리즘 문제이다!\n\n 많은 정답을 참고하고 이해하면서 풀어보았다\n\n**tuple**과 **enumerate**에 대해 처음 알게 된 문제이다. \n\n**enmerate**는 리스트를 순서와 리스트의 값을 한쌍으로 반환하는 함수이다.","slug":"programmers-printer","published":1,"updated":"2021-02-08T18:24:56.217Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kf002bf9c987yuezpr","content":"<h1 id=\"문제설명\"><a href=\"#문제설명\" class=\"headerlink\" title=\"문제설명\"></a>문제설명</h1><p>일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.</span><br><span class=\"line\">2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.</span><br><span class=\"line\">3. 그렇지 않으면 J를 인쇄합니다.</span><br></pre></td></tr></table></figure>\n<p>예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.</p>\n<p>내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.</p>\n<p>현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.</p>\n<h2 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h2><ul>\n<li>현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.</li>\n<li>인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.</li>\n<li>location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>priorities</th>\n<th>location</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[2, 1, 3, 2]</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>[1, 1, 9, 1, 1, 1]</td>\n<td>0</td>\n<td>5</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>예제 #1</p>\n<p>문제에 나온 예와 같습니다.</p>\n<p>예제 #2</p>\n<p>6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.</p>\n<p><a href=\"http://www.csc.kth.se/contest/nwerc/2006/problems/nwerc06.pdf\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">priorities, location</span>):</span></span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    pi_list = [(p, i) <span class=\"keyword\">for</span> (i, p) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(priorities)]</span><br><span class=\"line\">               </span><br><span class=\"line\">    <span class=\"keyword\">while</span> pi_list:</span><br><span class=\"line\">        prior = pi_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 밑에 코드 추가하니까 85점 -&gt; 100점</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> pi_list:</span><br><span class=\"line\">            p_list = [priority <span class=\"keyword\">for</span> priority, idx <span class=\"keyword\">in</span> pi_list]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> p_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prior[<span class=\"number\">0</span>] &gt;= <span class=\"built_in\">max</span>(p_list):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> prior[<span class=\"number\">1</span>] == location:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> answer + <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    answer += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                pi_list.append(prior)</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n<h3 id=\"변수설명\"><a href=\"#변수설명\" class=\"headerlink\" title=\"변수설명\"></a>변수설명</h3><ul>\n<li>pi_list : (우선순위, index) 로 저장된 튜플</li>\n<li>prior : 첫번째 대기 문서</li>\n<li>p_list :  남아있는 문서들의 우선순위 배열</li>\n</ul>\n<p>나의 첫번째 알고리즘 문제이다!</p>\n<p> 많은 정답을 참고하고 이해하면서 풀어보았다</p>\n<p><strong>tuple</strong>과 <strong>enumerate</strong>에 대해 처음 알게 된 문제이다. </p>\n<p><strong>enmerate</strong>는 리스트를 순서와 리스트의 값을 한쌍으로 반환하는 함수이다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제설명\"><a href=\"#문제설명\" class=\"headerlink\" title=\"문제설명\"></a>문제설명</h1><p>일반적인 프린터는 인쇄 요청이 들어온 순서대로 인쇄합니다. 그렇기 때문에 중요한 문서가 나중에 인쇄될 수 있습니다. 이런 문제를 보완하기 위해 중요도가 높은 문서를 먼저 인쇄하는 프린터를 개발했습니다. 이 새롭게 개발한 프린터는 아래와 같은 방식으로 인쇄 작업을 수행합니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 인쇄 대기목록의 가장 앞에 있는 문서(J)를 대기목록에서 꺼냅니다.</span><br><span class=\"line\">2. 나머지 인쇄 대기목록에서 J보다 중요도가 높은 문서가 한 개라도 존재하면 J를 대기목록의 가장 마지막에 넣습니다.</span><br><span class=\"line\">3. 그렇지 않으면 J를 인쇄합니다.</span><br></pre></td></tr></table></figure>\n<p>예를 들어, 4개의 문서(A, B, C, D)가 순서대로 인쇄 대기목록에 있고 중요도가 2 1 3 2 라면 C D A B 순으로 인쇄하게 됩니다.</p>\n<p>내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 알고 싶습니다. 위의 예에서 C는 1번째로, A는 3번째로 인쇄됩니다.</p>\n<p>현재 대기목록에 있는 문서의 중요도가 순서대로 담긴 배열 priorities와 내가 인쇄를 요청한 문서가 현재 대기목록의 어떤 위치에 있는지를 알려주는 location이 매개변수로 주어질 때, 내가 인쇄를 요청한 문서가 몇 번째로 인쇄되는지 return 하도록 solution 함수를 작성해주세요.</p>\n<h2 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h2><ul>\n<li>현재 대기목록에는 1개 이상 100개 이하의 문서가 있습니다.</li>\n<li>인쇄 작업의 중요도는 1~9로 표현하며 숫자가 클수록 중요하다는 뜻입니다.</li>\n<li>location은 0 이상 (현재 대기목록에 있는 작업 수 - 1) 이하의 값을 가지며 대기목록의 가장 앞에 있으면 0, 두 번째에 있으면 1로 표현합니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>priorities</th>\n<th>location</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[2, 1, 3, 2]</td>\n<td>2</td>\n<td>1</td>\n</tr>\n<tr>\n<td>[1, 1, 9, 1, 1, 1]</td>\n<td>0</td>\n<td>5</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>예제 #1</p>\n<p>문제에 나온 예와 같습니다.</p>\n<p>예제 #2</p>\n<p>6개의 문서(A, B, C, D, E, F)가 인쇄 대기목록에 있고 중요도가 1 1 9 1 1 1 이므로 C D E F A B 순으로 인쇄합니다.</p>\n<p><a href=\"http://www.csc.kth.se/contest/nwerc/2006/problems/nwerc06.pdf\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">priorities, location</span>):</span></span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    pi_list = [(p, i) <span class=\"keyword\">for</span> (i, p) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(priorities)]</span><br><span class=\"line\">               </span><br><span class=\"line\">    <span class=\"keyword\">while</span> pi_list:</span><br><span class=\"line\">        prior = pi_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"comment\"># 밑에 코드 추가하니까 85점 -&gt; 100점</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> pi_list:</span><br><span class=\"line\">            p_list = [priority <span class=\"keyword\">for</span> priority, idx <span class=\"keyword\">in</span> pi_list]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> p_list:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> prior[<span class=\"number\">0</span>] &gt;= <span class=\"built_in\">max</span>(p_list):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> prior[<span class=\"number\">1</span>] == location:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> answer + <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    answer += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                pi_list.append(prior)</span><br><span class=\"line\">        </span><br></pre></td></tr></table></figure>\n<h3 id=\"변수설명\"><a href=\"#변수설명\" class=\"headerlink\" title=\"변수설명\"></a>변수설명</h3><ul>\n<li>pi_list : (우선순위, index) 로 저장된 튜플</li>\n<li>prior : 첫번째 대기 문서</li>\n<li>p_list :  남아있는 문서들의 우선순위 배열</li>\n</ul>\n<p>나의 첫번째 알고리즘 문제이다!</p>\n<p> 많은 정답을 참고하고 이해하면서 풀어보았다</p>\n<p><strong>tuple</strong>과 <strong>enumerate</strong>에 대해 처음 알게 된 문제이다. </p>\n<p><strong>enmerate</strong>는 리스트를 순서와 리스트의 값을 한쌍으로 반환하는 함수이다.</p>\n"},{"title":"[프로그래머스] 이중 우선순위 큐 - 파이썬(python)","date":"2020-08-27T09:14:00.000Z","_content":"\n\n\n# 문제설명\n\n이중 우선순위 큐는 다음 연산을 할 수 있는 자료구조를 말합니다.\n\n| 명령어 | 수신 탑(높이)                  |\n| ------ | ------------------------------ |\n| I 숫자 | 큐에 주어진 숫자를 삽입합니다. |\n| D 1    | 큐에서 최댓값을 삭제합니다.    |\n| D -1   | 큐에서 최솟값을 삭제합니다.    |\n\n이중 우선순위 큐가 할 연산 operations가 매개변수로 주어질 때, 모든 연산을 처리한 후 큐가 비어있으면 [0,0] 비어있지 않으면 [최댓값, 최솟값]을 return 하도록 solution 함수를 구현해주세요.\n\n##### 제한사항\n\n- operations는 길이가 1 이상 1,000,000 이하인 문자열 배열입니다.\n- operations의 원소는 큐가 수행할 연산을 나타냅니다.\n  - 원소는 “명령어 데이터” 형식으로 주어집니다.- 최댓값/최솟값을 삭제하는 연산에서 최댓값/최솟값이 둘 이상인 경우, 하나만 삭제합니다.\n- 빈 큐에 데이터를 삭제하라는 연산이 주어질 경우, 해당 연산은 무시합니다.\n\n##### 입출력 예\n\n| operations          | return |\n| ------------------- | ------ |\n| [I 16,D 1]          | [0,0]  |\n| [I 7,I 5,I -5,D -1] | [7,5]  |\n\n##### 입출력 예 설명\n\n16을 삽입 후 최댓값을 삭제합니다. 비어있으므로 [0,0]을 반환합니다.\n7,5,-5를 삽입 후 최솟값을 삭제합니다. 최대값 7, 최소값 5를 반환합니다.\n\n[출처](http://icpckorea.org/problems/2013/onlineset.pdf)\n\n\n\n# 풀이\n\n> 코드\n\n```python\ndef solution(operations):\n    import heapq\n    answer = []\n    priority_queue = []\n    \n    for operation in operations:\n        op = operation[:1]\n        num = int(operation[2:])\n        if op == \"D\" and priority_queue:\n            if num == 1:\n                priority_queue.pop(priority_queue.index(max(priority_queue)))\n            elif num == -1:\n                heapq.heappop(priority_queue)\n        elif op == \"I\":\n            heapq.heappush(priority_queue, num)\n        \n    if priority_queue:\n        answer = [max(priority_queue),heapq.heappop(priority_queue)]\n    else:\n        answer = [0,0]\n                                   \n    return answer\n```\n\n\n\n> 새로 알게 된 점\n\n1. 문자열 인덱싱(슬라이싱) \n   - 슬라이싱을 통해 operation 과 숫자를 나눴다.\n2.  `priority_queue.index(max(priority_queue))`\n   - 위 코드를 통해 priority_queue에서 가장 큰 값의 인덱스를 얻어올 수 있었다. 매우 편하다!\n3. `heapq.heappush(priority_queue, num)` \n   * 위 코드는 최소힙(우선순위큐)을 만족하도록 num을 push한다.\n4. `heapq.heappop(priority_queue)`\n   * 위 코드는 최소 값을 pop한다.\n\n\n\n> 어려웠던 점\n\n 사실 생각보단 금방 풀었지만 ! 맨 처음 코드가 아래와 같을 때,\n\n```python\n    for operation in operations:\n        if operation == \"D 1\" and priority_queue:\n            data = max(priority_queue)\n            priority_queue.pop(priority_queue.index(data))\n        elif operation == \"D -1\" and priority_queue:\n            data = min(priority_queue)\n            priority_queue.pop(priority_queue.index(data))\n        else:\n            num = operation[2:]\n            heapq.heappush(priority_queue, int(num))\n```\n\n입력값이 `[\"I 16\", \"I -5643\", \"D -1\", \"D 1\", \"D 1\", \"I 123\", \"D -1\"]` 인 경우,\n\n세번 째 `\"D 1\"` 에서 `priority_queue`가 비어있으니  `else`로 넘어가면서 1이 push 되는 문제가 발생하였다. \n\n그래서 `op` 와 `num`으로 나눠서 검사를 했더니 문제가 해결되었다. \n\n\n\n`and priority_queue`를 넣지 않으면 ValueError : **max() arg is an empty sequence** 등의 문제가 발생한다.","source":"_posts/programmers-priority-queue.md","raw":"---\ntitle: \"[프로그래머스] 이중 우선순위 큐 - 파이썬(python)\"\ndate: 2020-08-27 18:14:00\ntags: 알고리즘\n---\n\n\n\n# 문제설명\n\n이중 우선순위 큐는 다음 연산을 할 수 있는 자료구조를 말합니다.\n\n| 명령어 | 수신 탑(높이)                  |\n| ------ | ------------------------------ |\n| I 숫자 | 큐에 주어진 숫자를 삽입합니다. |\n| D 1    | 큐에서 최댓값을 삭제합니다.    |\n| D -1   | 큐에서 최솟값을 삭제합니다.    |\n\n이중 우선순위 큐가 할 연산 operations가 매개변수로 주어질 때, 모든 연산을 처리한 후 큐가 비어있으면 [0,0] 비어있지 않으면 [최댓값, 최솟값]을 return 하도록 solution 함수를 구현해주세요.\n\n##### 제한사항\n\n- operations는 길이가 1 이상 1,000,000 이하인 문자열 배열입니다.\n- operations의 원소는 큐가 수행할 연산을 나타냅니다.\n  - 원소는 “명령어 데이터” 형식으로 주어집니다.- 최댓값/최솟값을 삭제하는 연산에서 최댓값/최솟값이 둘 이상인 경우, 하나만 삭제합니다.\n- 빈 큐에 데이터를 삭제하라는 연산이 주어질 경우, 해당 연산은 무시합니다.\n\n##### 입출력 예\n\n| operations          | return |\n| ------------------- | ------ |\n| [I 16,D 1]          | [0,0]  |\n| [I 7,I 5,I -5,D -1] | [7,5]  |\n\n##### 입출력 예 설명\n\n16을 삽입 후 최댓값을 삭제합니다. 비어있으므로 [0,0]을 반환합니다.\n7,5,-5를 삽입 후 최솟값을 삭제합니다. 최대값 7, 최소값 5를 반환합니다.\n\n[출처](http://icpckorea.org/problems/2013/onlineset.pdf)\n\n\n\n# 풀이\n\n> 코드\n\n```python\ndef solution(operations):\n    import heapq\n    answer = []\n    priority_queue = []\n    \n    for operation in operations:\n        op = operation[:1]\n        num = int(operation[2:])\n        if op == \"D\" and priority_queue:\n            if num == 1:\n                priority_queue.pop(priority_queue.index(max(priority_queue)))\n            elif num == -1:\n                heapq.heappop(priority_queue)\n        elif op == \"I\":\n            heapq.heappush(priority_queue, num)\n        \n    if priority_queue:\n        answer = [max(priority_queue),heapq.heappop(priority_queue)]\n    else:\n        answer = [0,0]\n                                   \n    return answer\n```\n\n\n\n> 새로 알게 된 점\n\n1. 문자열 인덱싱(슬라이싱) \n   - 슬라이싱을 통해 operation 과 숫자를 나눴다.\n2.  `priority_queue.index(max(priority_queue))`\n   - 위 코드를 통해 priority_queue에서 가장 큰 값의 인덱스를 얻어올 수 있었다. 매우 편하다!\n3. `heapq.heappush(priority_queue, num)` \n   * 위 코드는 최소힙(우선순위큐)을 만족하도록 num을 push한다.\n4. `heapq.heappop(priority_queue)`\n   * 위 코드는 최소 값을 pop한다.\n\n\n\n> 어려웠던 점\n\n 사실 생각보단 금방 풀었지만 ! 맨 처음 코드가 아래와 같을 때,\n\n```python\n    for operation in operations:\n        if operation == \"D 1\" and priority_queue:\n            data = max(priority_queue)\n            priority_queue.pop(priority_queue.index(data))\n        elif operation == \"D -1\" and priority_queue:\n            data = min(priority_queue)\n            priority_queue.pop(priority_queue.index(data))\n        else:\n            num = operation[2:]\n            heapq.heappush(priority_queue, int(num))\n```\n\n입력값이 `[\"I 16\", \"I -5643\", \"D -1\", \"D 1\", \"D 1\", \"I 123\", \"D -1\"]` 인 경우,\n\n세번 째 `\"D 1\"` 에서 `priority_queue`가 비어있으니  `else`로 넘어가면서 1이 push 되는 문제가 발생하였다. \n\n그래서 `op` 와 `num`으로 나눠서 검사를 했더니 문제가 해결되었다. \n\n\n\n`and priority_queue`를 넣지 않으면 ValueError : **max() arg is an empty sequence** 등의 문제가 발생한다.","slug":"programmers-priority-queue","published":1,"updated":"2021-02-08T18:24:56.173Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kg002ef9c9h22chgus","content":"<h1 id=\"문제설명\"><a href=\"#문제설명\" class=\"headerlink\" title=\"문제설명\"></a>문제설명</h1><p>이중 우선순위 큐는 다음 연산을 할 수 있는 자료구조를 말합니다.</p>\n<table>\n<thead>\n<tr>\n<th>명령어</th>\n<th>수신 탑(높이)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>I 숫자</td>\n<td>큐에 주어진 숫자를 삽입합니다.</td>\n</tr>\n<tr>\n<td>D 1</td>\n<td>큐에서 최댓값을 삭제합니다.</td>\n</tr>\n<tr>\n<td>D -1</td>\n<td>큐에서 최솟값을 삭제합니다.</td>\n</tr>\n</tbody></table>\n<p>이중 우선순위 큐가 할 연산 operations가 매개변수로 주어질 때, 모든 연산을 처리한 후 큐가 비어있으면 [0,0] 비어있지 않으면 [최댓값, 최솟값]을 return 하도록 solution 함수를 구현해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>operations는 길이가 1 이상 1,000,000 이하인 문자열 배열입니다.</li>\n<li>operations의 원소는 큐가 수행할 연산을 나타냅니다.<ul>\n<li>원소는 “명령어 데이터” 형식으로 주어집니다.- 최댓값/최솟값을 삭제하는 연산에서 최댓값/최솟값이 둘 이상인 경우, 하나만 삭제합니다.</li>\n</ul>\n</li>\n<li>빈 큐에 데이터를 삭제하라는 연산이 주어질 경우, 해당 연산은 무시합니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>operations</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[I 16,D 1]</td>\n<td>[0,0]</td>\n</tr>\n<tr>\n<td>[I 7,I 5,I -5,D -1]</td>\n<td>[7,5]</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>16을 삽입 후 최댓값을 삭제합니다. 비어있으므로 [0,0]을 반환합니다.<br>7,5,-5를 삽입 후 최솟값을 삭제합니다. 최대값 7, 최소값 5를 반환합니다.</p>\n<p><a href=\"http://icpckorea.org/problems/2013/onlineset.pdf\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><blockquote>\n<p>코드</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">operations</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> heapq</span><br><span class=\"line\">    answer = []</span><br><span class=\"line\">    priority_queue = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> operation <span class=\"keyword\">in</span> operations:</span><br><span class=\"line\">        op = operation[:<span class=\"number\">1</span>]</span><br><span class=\"line\">        num = <span class=\"built_in\">int</span>(operation[<span class=\"number\">2</span>:])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;D&quot;</span> <span class=\"keyword\">and</span> priority_queue:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">                priority_queue.pop(priority_queue.index(<span class=\"built_in\">max</span>(priority_queue)))</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> num == -<span class=\"number\">1</span>:</span><br><span class=\"line\">                heapq.heappop(priority_queue)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> op == <span class=\"string\">&quot;I&quot;</span>:</span><br><span class=\"line\">            heapq.heappush(priority_queue, num)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">if</span> priority_queue:</span><br><span class=\"line\">        answer = [<span class=\"built_in\">max</span>(priority_queue),heapq.heappop(priority_queue)]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        answer = [<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">                                   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>새로 알게 된 점</p>\n</blockquote>\n<ol>\n<li>문자열 인덱싱(슬라이싱) <ul>\n<li>슬라이싱을 통해 operation 과 숫자를 나눴다.</li>\n</ul>\n</li>\n<li><code>priority_queue.index(max(priority_queue))</code><ul>\n<li>위 코드를 통해 priority_queue에서 가장 큰 값의 인덱스를 얻어올 수 있었다. 매우 편하다!</li>\n</ul>\n</li>\n<li><code>heapq.heappush(priority_queue, num)</code> <ul>\n<li>위 코드는 최소힙(우선순위큐)을 만족하도록 num을 push한다.</li>\n</ul>\n</li>\n<li><code>heapq.heappop(priority_queue)</code><ul>\n<li>위 코드는 최소 값을 pop한다.</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>어려웠던 점</p>\n</blockquote>\n<p> 사실 생각보단 금방 풀었지만 ! 맨 처음 코드가 아래와 같을 때,</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> operation <span class=\"keyword\">in</span> operations:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> operation == <span class=\"string\">&quot;D 1&quot;</span> <span class=\"keyword\">and</span> priority_queue:</span><br><span class=\"line\">        data = <span class=\"built_in\">max</span>(priority_queue)</span><br><span class=\"line\">        priority_queue.pop(priority_queue.index(data))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> operation == <span class=\"string\">&quot;D -1&quot;</span> <span class=\"keyword\">and</span> priority_queue:</span><br><span class=\"line\">        data = <span class=\"built_in\">min</span>(priority_queue)</span><br><span class=\"line\">        priority_queue.pop(priority_queue.index(data))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        num = operation[<span class=\"number\">2</span>:]</span><br><span class=\"line\">        heapq.heappush(priority_queue, <span class=\"built_in\">int</span>(num))</span><br></pre></td></tr></table></figure>\n<p>입력값이 <code>[&quot;I 16&quot;, &quot;I -5643&quot;, &quot;D -1&quot;, &quot;D 1&quot;, &quot;D 1&quot;, &quot;I 123&quot;, &quot;D -1&quot;]</code> 인 경우,</p>\n<p>세번 째 <code>&quot;D 1&quot;</code> 에서 <code>priority_queue</code>가 비어있으니  <code>else</code>로 넘어가면서 1이 push 되는 문제가 발생하였다. </p>\n<p>그래서 <code>op</code> 와 <code>num</code>으로 나눠서 검사를 했더니 문제가 해결되었다. </p>\n<p><code>and priority_queue</code>를 넣지 않으면 ValueError : <strong>max() arg is an empty sequence</strong> 등의 문제가 발생한다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제설명\"><a href=\"#문제설명\" class=\"headerlink\" title=\"문제설명\"></a>문제설명</h1><p>이중 우선순위 큐는 다음 연산을 할 수 있는 자료구조를 말합니다.</p>\n<table>\n<thead>\n<tr>\n<th>명령어</th>\n<th>수신 탑(높이)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>I 숫자</td>\n<td>큐에 주어진 숫자를 삽입합니다.</td>\n</tr>\n<tr>\n<td>D 1</td>\n<td>큐에서 최댓값을 삭제합니다.</td>\n</tr>\n<tr>\n<td>D -1</td>\n<td>큐에서 최솟값을 삭제합니다.</td>\n</tr>\n</tbody></table>\n<p>이중 우선순위 큐가 할 연산 operations가 매개변수로 주어질 때, 모든 연산을 처리한 후 큐가 비어있으면 [0,0] 비어있지 않으면 [최댓값, 최솟값]을 return 하도록 solution 함수를 구현해주세요.</p>\n<h5 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h5><ul>\n<li>operations는 길이가 1 이상 1,000,000 이하인 문자열 배열입니다.</li>\n<li>operations의 원소는 큐가 수행할 연산을 나타냅니다.<ul>\n<li>원소는 “명령어 데이터” 형식으로 주어집니다.- 최댓값/최솟값을 삭제하는 연산에서 최댓값/최솟값이 둘 이상인 경우, 하나만 삭제합니다.</li>\n</ul>\n</li>\n<li>빈 큐에 데이터를 삭제하라는 연산이 주어질 경우, 해당 연산은 무시합니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>operations</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[I 16,D 1]</td>\n<td>[0,0]</td>\n</tr>\n<tr>\n<td>[I 7,I 5,I -5,D -1]</td>\n<td>[7,5]</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>16을 삽입 후 최댓값을 삭제합니다. 비어있으므로 [0,0]을 반환합니다.<br>7,5,-5를 삽입 후 최솟값을 삭제합니다. 최대값 7, 최소값 5를 반환합니다.</p>\n<p><a href=\"http://icpckorea.org/problems/2013/onlineset.pdf\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><blockquote>\n<p>코드</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">operations</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> heapq</span><br><span class=\"line\">    answer = []</span><br><span class=\"line\">    priority_queue = []</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> operation <span class=\"keyword\">in</span> operations:</span><br><span class=\"line\">        op = operation[:<span class=\"number\">1</span>]</span><br><span class=\"line\">        num = <span class=\"built_in\">int</span>(operation[<span class=\"number\">2</span>:])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> op == <span class=\"string\">&quot;D&quot;</span> <span class=\"keyword\">and</span> priority_queue:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">                priority_queue.pop(priority_queue.index(<span class=\"built_in\">max</span>(priority_queue)))</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> num == -<span class=\"number\">1</span>:</span><br><span class=\"line\">                heapq.heappop(priority_queue)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> op == <span class=\"string\">&quot;I&quot;</span>:</span><br><span class=\"line\">            heapq.heappush(priority_queue, num)</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">if</span> priority_queue:</span><br><span class=\"line\">        answer = [<span class=\"built_in\">max</span>(priority_queue),heapq.heappop(priority_queue)]</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        answer = [<span class=\"number\">0</span>,<span class=\"number\">0</span>]</span><br><span class=\"line\">                                   </span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n\n\n<blockquote>\n<p>새로 알게 된 점</p>\n</blockquote>\n<ol>\n<li>문자열 인덱싱(슬라이싱) <ul>\n<li>슬라이싱을 통해 operation 과 숫자를 나눴다.</li>\n</ul>\n</li>\n<li><code>priority_queue.index(max(priority_queue))</code><ul>\n<li>위 코드를 통해 priority_queue에서 가장 큰 값의 인덱스를 얻어올 수 있었다. 매우 편하다!</li>\n</ul>\n</li>\n<li><code>heapq.heappush(priority_queue, num)</code> <ul>\n<li>위 코드는 최소힙(우선순위큐)을 만족하도록 num을 push한다.</li>\n</ul>\n</li>\n<li><code>heapq.heappop(priority_queue)</code><ul>\n<li>위 코드는 최소 값을 pop한다.</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>어려웠던 점</p>\n</blockquote>\n<p> 사실 생각보단 금방 풀었지만 ! 맨 처음 코드가 아래와 같을 때,</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> operation <span class=\"keyword\">in</span> operations:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> operation == <span class=\"string\">&quot;D 1&quot;</span> <span class=\"keyword\">and</span> priority_queue:</span><br><span class=\"line\">        data = <span class=\"built_in\">max</span>(priority_queue)</span><br><span class=\"line\">        priority_queue.pop(priority_queue.index(data))</span><br><span class=\"line\">    <span class=\"keyword\">elif</span> operation == <span class=\"string\">&quot;D -1&quot;</span> <span class=\"keyword\">and</span> priority_queue:</span><br><span class=\"line\">        data = <span class=\"built_in\">min</span>(priority_queue)</span><br><span class=\"line\">        priority_queue.pop(priority_queue.index(data))</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        num = operation[<span class=\"number\">2</span>:]</span><br><span class=\"line\">        heapq.heappush(priority_queue, <span class=\"built_in\">int</span>(num))</span><br></pre></td></tr></table></figure>\n<p>입력값이 <code>[&quot;I 16&quot;, &quot;I -5643&quot;, &quot;D -1&quot;, &quot;D 1&quot;, &quot;D 1&quot;, &quot;I 123&quot;, &quot;D -1&quot;]</code> 인 경우,</p>\n<p>세번 째 <code>&quot;D 1&quot;</code> 에서 <code>priority_queue</code>가 비어있으니  <code>else</code>로 넘어가면서 1이 push 되는 문제가 발생하였다. </p>\n<p>그래서 <code>op</code> 와 <code>num</code>으로 나눠서 검사를 했더니 문제가 해결되었다. </p>\n<p><code>and priority_queue</code>를 넣지 않으면 ValueError : <strong>max() arg is an empty sequence</strong> 등의 문제가 발생한다.</p>\n"},{"title":"[프로그래머스] 더 맵게 - 파이썬","date":"2020-02-25T12:10:00.000Z","_content":"\n\n\n# 문제설명\n\n매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.\n\n```\n섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)\n```\n\nLeo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.\nLeo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한 사항\n\n- scoville의 길이는 1 이상 1,000,000 이하입니다.\n- K는 0 이상 1,000,000,000 이하입니다.\n- scoville의 원소는 각각 0 이상 1,000,000 이하입니다.\n- 모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.\n\n##### 입출력 예\n\n| scoville             | K    | return |\n| -------------------- | ---- | ------ |\n| [1, 2, 3, 9, 10, 12] | 7    | 2      |\n\n##### 입출력 예 설명\n\n1. 스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.\n   새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5\n   가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]\n2. 스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.\n   새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13\n   가진 음식의 스코빌 지수 = [13, 9, 10, 12]\n\n모든 음식의 스코빌 지수가 7 이상이 되었고 이때 섞은 횟수는 2회입니다.\n\n\n\n# 풀이\n\n```python\ndef solution(scoville, K):\n    import heapq\n    answer = 0\n    heapq.heapify(scoville)\n    \n    while len(scoville) > 1 :\n        i = heapq.heappop(scoville)\n        j = heapq.heappop(scoville)\n        if i < K:\n            answer += 1\n            mixedK = i +j *2\n            heapq.heappush(scoville, mixedK)\n        else:\n            return answer\n            \n    if scoville[0] > K:\n        return answer\n    else:\n        return -1\n```\n\n- 이를 풀기 위해 공부한 내용은 heapq 모듈이다.\n\n- 계속 문제16번에서만 실패가 떠서 왜 그런지 찾아본 결과, `while len(scoville) > 1` 을 했기 때문에 `if scoville[0] > K: return answer ` 를 써주지 않으면 scoville의 길이가 1일 때는 -1 이 return 되기 때문이었다.\n\n- scoville의 크기가 1 보다 크게 한 이유는 0보다 크게하면 RuntimeError가 발생하기 때문이다. \n\n- heappop은 힙에서 가장 작은 값을 반환한다. ","source":"_posts/programmers-scoville.md","raw":"---\ntitle: \"[프로그래머스] 더 맵게 - 파이썬\"\ndate: 2020-02-25 21:10:00\ntags: 알고리즘\n---\n\n\n\n# 문제설명\n\n매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.\n\n```\n섞은 음식의 스코빌 지수 = 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)\n```\n\nLeo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.\nLeo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.\n\n##### 제한 사항\n\n- scoville의 길이는 1 이상 1,000,000 이하입니다.\n- K는 0 이상 1,000,000,000 이하입니다.\n- scoville의 원소는 각각 0 이상 1,000,000 이하입니다.\n- 모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.\n\n##### 입출력 예\n\n| scoville             | K    | return |\n| -------------------- | ---- | ------ |\n| [1, 2, 3, 9, 10, 12] | 7    | 2      |\n\n##### 입출력 예 설명\n\n1. 스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.\n   새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5\n   가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]\n2. 스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.\n   새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13\n   가진 음식의 스코빌 지수 = [13, 9, 10, 12]\n\n모든 음식의 스코빌 지수가 7 이상이 되었고 이때 섞은 횟수는 2회입니다.\n\n\n\n# 풀이\n\n```python\ndef solution(scoville, K):\n    import heapq\n    answer = 0\n    heapq.heapify(scoville)\n    \n    while len(scoville) > 1 :\n        i = heapq.heappop(scoville)\n        j = heapq.heappop(scoville)\n        if i < K:\n            answer += 1\n            mixedK = i +j *2\n            heapq.heappush(scoville, mixedK)\n        else:\n            return answer\n            \n    if scoville[0] > K:\n        return answer\n    else:\n        return -1\n```\n\n- 이를 풀기 위해 공부한 내용은 heapq 모듈이다.\n\n- 계속 문제16번에서만 실패가 떠서 왜 그런지 찾아본 결과, `while len(scoville) > 1` 을 했기 때문에 `if scoville[0] > K: return answer ` 를 써주지 않으면 scoville의 길이가 1일 때는 -1 이 return 되기 때문이었다.\n\n- scoville의 크기가 1 보다 크게 한 이유는 0보다 크게하면 RuntimeError가 발생하기 때문이다. \n\n- heappop은 힙에서 가장 작은 값을 반환한다. ","slug":"programmers-scoville","published":1,"updated":"2021-02-08T18:24:56.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kh002gf9c9btrqhamu","content":"<h1 id=\"문제설명\"><a href=\"#문제설명\" class=\"headerlink\" title=\"문제설명\"></a>문제설명</h1><p>매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">섞은 음식의 스코빌 지수 &#x3D; 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)</span><br></pre></td></tr></table></figure>\n<p>Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.<br>Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한-사항\"><a href=\"#제한-사항\" class=\"headerlink\" title=\"제한 사항\"></a>제한 사항</h5><ul>\n<li>scoville의 길이는 1 이상 1,000,000 이하입니다.</li>\n<li>K는 0 이상 1,000,000,000 이하입니다.</li>\n<li>scoville의 원소는 각각 0 이상 1,000,000 이하입니다.</li>\n<li>모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>scoville</th>\n<th>K</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[1, 2, 3, 9, 10, 12]</td>\n<td>7</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><ol>\n<li>스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.<br>새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5<br>가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]</li>\n<li>스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.<br>새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13<br>가진 음식의 스코빌 지수 = [13, 9, 10, 12]</li>\n</ol>\n<p>모든 음식의 스코빌 지수가 7 이상이 되었고 이때 섞은 횟수는 2회입니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">scoville, K</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> heapq</span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    heapq.heapify(scoville)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(scoville) &gt; <span class=\"number\">1</span> :</span><br><span class=\"line\">        i = heapq.heappop(scoville)</span><br><span class=\"line\">        j = heapq.heappop(scoville)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt; K:</span><br><span class=\"line\">            answer += <span class=\"number\">1</span></span><br><span class=\"line\">            mixedK = i +j *<span class=\"number\">2</span></span><br><span class=\"line\">            heapq.heappush(scoville, mixedK)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> answer</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> scoville[<span class=\"number\">0</span>] &gt; K:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> answer</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>이를 풀기 위해 공부한 내용은 heapq 모듈이다.</p>\n</li>\n<li><p>계속 문제16번에서만 실패가 떠서 왜 그런지 찾아본 결과, <code>while len(scoville) &gt; 1</code> 을 했기 때문에 <code>if scoville[0] &gt; K: return answer </code> 를 써주지 않으면 scoville의 길이가 1일 때는 -1 이 return 되기 때문이었다.</p>\n</li>\n<li><p>scoville의 크기가 1 보다 크게 한 이유는 0보다 크게하면 RuntimeError가 발생하기 때문이다. </p>\n</li>\n<li><p>heappop은 힙에서 가장 작은 값을 반환한다. </p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제설명\"><a href=\"#문제설명\" class=\"headerlink\" title=\"문제설명\"></a>문제설명</h1><p>매운 것을 좋아하는 Leo는 모든 음식의 스코빌 지수를 K 이상으로 만들고 싶습니다. 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 Leo는 스코빌 지수가 가장 낮은 두 개의 음식을 아래와 같이 특별한 방법으로 섞어 새로운 음식을 만듭니다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">섞은 음식의 스코빌 지수 &#x3D; 가장 맵지 않은 음식의 스코빌 지수 + (두 번째로 맵지 않은 음식의 스코빌 지수 * 2)</span><br></pre></td></tr></table></figure>\n<p>Leo는 모든 음식의 스코빌 지수가 K 이상이 될 때까지 반복하여 섞습니다.<br>Leo가 가진 음식의 스코빌 지수를 담은 배열 scoville과 원하는 스코빌 지수 K가 주어질 때, 모든 음식의 스코빌 지수를 K 이상으로 만들기 위해 섞어야 하는 최소 횟수를 return 하도록 solution 함수를 작성해주세요.</p>\n<h5 id=\"제한-사항\"><a href=\"#제한-사항\" class=\"headerlink\" title=\"제한 사항\"></a>제한 사항</h5><ul>\n<li>scoville의 길이는 1 이상 1,000,000 이하입니다.</li>\n<li>K는 0 이상 1,000,000,000 이하입니다.</li>\n<li>scoville의 원소는 각각 0 이상 1,000,000 이하입니다.</li>\n<li>모든 음식의 스코빌 지수를 K 이상으로 만들 수 없는 경우에는 -1을 return 합니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>scoville</th>\n<th>K</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[1, 2, 3, 9, 10, 12]</td>\n<td>7</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><ol>\n<li>스코빌 지수가 1인 음식과 2인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.<br>새로운 음식의 스코빌 지수 = 1 + (2 * 2) = 5<br>가진 음식의 스코빌 지수 = [5, 3, 9, 10, 12]</li>\n<li>스코빌 지수가 3인 음식과 5인 음식을 섞으면 음식의 스코빌 지수가 아래와 같이 됩니다.<br>새로운 음식의 스코빌 지수 = 3 + (5 * 2) = 13<br>가진 음식의 스코빌 지수 = [13, 9, 10, 12]</li>\n</ol>\n<p>모든 음식의 스코빌 지수가 7 이상이 되었고 이때 섞은 횟수는 2회입니다.</p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">scoville, K</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">import</span> heapq</span><br><span class=\"line\">    answer = <span class=\"number\">0</span></span><br><span class=\"line\">    heapq.heapify(scoville)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(scoville) &gt; <span class=\"number\">1</span> :</span><br><span class=\"line\">        i = heapq.heappop(scoville)</span><br><span class=\"line\">        j = heapq.heappop(scoville)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i &lt; K:</span><br><span class=\"line\">            answer += <span class=\"number\">1</span></span><br><span class=\"line\">            mixedK = i +j *<span class=\"number\">2</span></span><br><span class=\"line\">            heapq.heappush(scoville, mixedK)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> answer</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">if</span> scoville[<span class=\"number\">0</span>] &gt; K:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> answer</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>이를 풀기 위해 공부한 내용은 heapq 모듈이다.</p>\n</li>\n<li><p>계속 문제16번에서만 실패가 떠서 왜 그런지 찾아본 결과, <code>while len(scoville) &gt; 1</code> 을 했기 때문에 <code>if scoville[0] &gt; K: return answer </code> 를 써주지 않으면 scoville의 길이가 1일 때는 -1 이 return 되기 때문이었다.</p>\n</li>\n<li><p>scoville의 크기가 1 보다 크게 한 이유는 0보다 크게하면 RuntimeError가 발생하기 때문이다. </p>\n</li>\n<li><p>heappop은 힙에서 가장 작은 값을 반환한다. </p>\n</li>\n</ul>\n"},{"title":"[프로그래머스] 스킬 체크 레벨 1 풀어보기(파이썬)","date":"2020-12-10T09:00:00.000Z","_content":"\n* 링크 : https://programmers.co.kr/skill_checks > 레벨 1\n\n# 풀이\n\n난이도가 좀 많이 쉬워서 올리기 민망하지만 ㅎㅎ 풀어보았다.\n\n* **문제 1**\n\n  n = 3 이면 '수박수'\n\n  n = 5 이면 '수박수박수' 와 같은 문자열을 반환한다.\n\n```python\ndef solution(n):\n    answer = ''\n    for i in range(n):\n        if i% 2 == 0:\n            answer += '수'\n        else:\n            answer += '박'\n\n    return answer\n```\n\n* **문제 2**\n\n  배열 arr이 주어지면 최소 숫자를 제거한 배열을 반환한다.\n\n  배열이 모두 비어진 경우에는 [-1]을 반환한다.\n\n```python\ndef solution(arr):\n    if len(arr) == 1:\n        return [-1]\n    i = min(arr)\n    arr.remove(i)\n    answer = arr\n    return answer\n```\n\n","source":"_posts/programmers-skill-checks-1.md","raw":"---\ntitle: \"[프로그래머스] 스킬 체크 레벨 1 풀어보기(파이썬)\"\ndate: 2020-12-10 18:00:00\ntag: 알고리즘\n---\n\n* 링크 : https://programmers.co.kr/skill_checks > 레벨 1\n\n# 풀이\n\n난이도가 좀 많이 쉬워서 올리기 민망하지만 ㅎㅎ 풀어보았다.\n\n* **문제 1**\n\n  n = 3 이면 '수박수'\n\n  n = 5 이면 '수박수박수' 와 같은 문자열을 반환한다.\n\n```python\ndef solution(n):\n    answer = ''\n    for i in range(n):\n        if i% 2 == 0:\n            answer += '수'\n        else:\n            answer += '박'\n\n    return answer\n```\n\n* **문제 2**\n\n  배열 arr이 주어지면 최소 숫자를 제거한 배열을 반환한다.\n\n  배열이 모두 비어진 경우에는 [-1]을 반환한다.\n\n```python\ndef solution(arr):\n    if len(arr) == 1:\n        return [-1]\n    i = min(arr)\n    arr.remove(i)\n    answer = arr\n    return answer\n```\n\n","slug":"programmers-skill-checks-1","published":1,"updated":"2021-02-08T18:24:55.774Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0ki002jf9c9fbej43n7","content":"<ul>\n<li>링크 : <a href=\"https://programmers.co.kr/skill_checks\">https://programmers.co.kr/skill_checks</a> &gt; 레벨 1</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>난이도가 좀 많이 쉬워서 올리기 민망하지만 ㅎㅎ 풀어보았다.</p>\n<ul>\n<li><p><strong>문제 1</strong></p>\n<p>n = 3 이면 ‘수박수’</p>\n<p>n = 5 이면 ‘수박수박수’ 와 같은 문자열을 반환한다.</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">n</span>):</span></span><br><span class=\"line\">    answer = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i% <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            answer += <span class=\"string\">&#x27;수&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            answer += <span class=\"string\">&#x27;박&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>문제 2</strong></p>\n<p>배열 arr이 주어지면 최소 숫자를 제거한 배열을 반환한다.</p>\n<p>배열이 모두 비어진 경우에는 [-1]을 반환한다.</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">arr</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(arr) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [-<span class=\"number\">1</span>]</span><br><span class=\"line\">    i = <span class=\"built_in\">min</span>(arr)</span><br><span class=\"line\">    arr.remove(i)</span><br><span class=\"line\">    answer = arr</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>링크 : <a href=\"https://programmers.co.kr/skill_checks\">https://programmers.co.kr/skill_checks</a> &gt; 레벨 1</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>난이도가 좀 많이 쉬워서 올리기 민망하지만 ㅎㅎ 풀어보았다.</p>\n<ul>\n<li><p><strong>문제 1</strong></p>\n<p>n = 3 이면 ‘수박수’</p>\n<p>n = 5 이면 ‘수박수박수’ 와 같은 문자열을 반환한다.</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">n</span>):</span></span><br><span class=\"line\">    answer = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i% <span class=\"number\">2</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">            answer += <span class=\"string\">&#x27;수&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            answer += <span class=\"string\">&#x27;박&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>문제 2</strong></p>\n<p>배열 arr이 주어지면 최소 숫자를 제거한 배열을 반환한다.</p>\n<p>배열이 모두 비어진 경우에는 [-1]을 반환한다.</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">arr</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(arr) == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> [-<span class=\"number\">1</span>]</span><br><span class=\"line\">    i = <span class=\"built_in\">min</span>(arr)</span><br><span class=\"line\">    arr.remove(i)</span><br><span class=\"line\">    answer = arr</span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n"},{"title":"[알고리즘] 프로그래머스 - 타일 장식물 (파이썬/python)","date":"2020-05-01T07:48:00.000Z","_content":"\n# 문제\n\n대구 달성공원에 놀러 온 지수는 최근에 새로 만든 타일 장식물을 보게 되었다. 타일 장식물은 정사각형 타일을 붙여 만든 형태였는데, 한 변이 1인 정사각형 타일부터 시작하여 마치 앵무조개의 나선 모양처럼 점점 큰 타일을 붙인 형태였다. 타일 장식물의 일부를 그리면 다음과 같다.\n\n![ㅅㅡㅋㅡㄹㅣㄴㅅㅑㅅ 2018-08-21 ㅇㅗㅎㅜ 5.11.26.png](https://grepp-programmers.s3.amazonaws.com/files/production/3e31bedd54/fcc48066-e72f-45c8-af03-e4360b58b589.png)\n\n그림에서 타일에 적힌 수는 각 타일의 한 변의 길이를 나타낸다. 타일 장식물을 구성하는 정사각형 타일 한 변의 길이를 안쪽 타일부터 시작하여 차례로 적으면 다음과 같다.\n[1, 1, 2, 3, 5, 8, .]\n지수는 문득 이러한 타일들로 구성되는 큰 직사각형의 둘레가 궁금해졌다. 예를 들어, 처음 다섯 개의 타일이 구성하는 직사각형(위에서 빨간색으로 표시한 직사각형)의 둘레는 26이다.\n\n타일의 개수 N이 주어질 때, N개의 타일로 구성된 직사각형의 둘레를 return 하도록 solution 함수를 작성하시오.\n\n##### 제한 사항\n\n- N은 1 이상 80 이하인 자연수이다.\n\n##### 입출력 예\n\n| N    | return |\n| ---- | ------ |\n| 5    | 26     |\n| 6    | 42     |\n\n[출처](https://www.digitalculture.or.kr/koi/selectOlymPiadDissentList.do)\n\n\n\n# 풀이\n\n```python\ndef solution(N):\n    tiles = [1 for _ in range(N)]\n    before = tiles[1]\n    before_back = tiles[0] \n    for i in range(N):\n        if i == 0 or i == 1:\n            continue\n        tiles[i] = before+ before_back\n        before = tiles[i]\n        before_back = tiles[i-1] \n    \n    case = [4]\n    for i in range(N):\n        if i==0:\n            continue\n        before = case[i-1]\n        now = before + tiles[i] *2  \n        case.append(now)\n    \n    answer = case[N-1] # case 배열의 마지막이 N개의 타일들로 구성된 직사각형의 둘레\n    return answer\n```\n\n\n\n동적 프로그래밍을 통해 문제를 해결하였다.","source":"_posts/programmers-tile.md","raw":"---\ntitle: \"[알고리즘] 프로그래머스 - 타일 장식물 (파이썬/python)\"\ndate: 2020-05-01 16:48:00\ntags: 알고리즘\n---\n\n# 문제\n\n대구 달성공원에 놀러 온 지수는 최근에 새로 만든 타일 장식물을 보게 되었다. 타일 장식물은 정사각형 타일을 붙여 만든 형태였는데, 한 변이 1인 정사각형 타일부터 시작하여 마치 앵무조개의 나선 모양처럼 점점 큰 타일을 붙인 형태였다. 타일 장식물의 일부를 그리면 다음과 같다.\n\n![ㅅㅡㅋㅡㄹㅣㄴㅅㅑㅅ 2018-08-21 ㅇㅗㅎㅜ 5.11.26.png](https://grepp-programmers.s3.amazonaws.com/files/production/3e31bedd54/fcc48066-e72f-45c8-af03-e4360b58b589.png)\n\n그림에서 타일에 적힌 수는 각 타일의 한 변의 길이를 나타낸다. 타일 장식물을 구성하는 정사각형 타일 한 변의 길이를 안쪽 타일부터 시작하여 차례로 적으면 다음과 같다.\n[1, 1, 2, 3, 5, 8, .]\n지수는 문득 이러한 타일들로 구성되는 큰 직사각형의 둘레가 궁금해졌다. 예를 들어, 처음 다섯 개의 타일이 구성하는 직사각형(위에서 빨간색으로 표시한 직사각형)의 둘레는 26이다.\n\n타일의 개수 N이 주어질 때, N개의 타일로 구성된 직사각형의 둘레를 return 하도록 solution 함수를 작성하시오.\n\n##### 제한 사항\n\n- N은 1 이상 80 이하인 자연수이다.\n\n##### 입출력 예\n\n| N    | return |\n| ---- | ------ |\n| 5    | 26     |\n| 6    | 42     |\n\n[출처](https://www.digitalculture.or.kr/koi/selectOlymPiadDissentList.do)\n\n\n\n# 풀이\n\n```python\ndef solution(N):\n    tiles = [1 for _ in range(N)]\n    before = tiles[1]\n    before_back = tiles[0] \n    for i in range(N):\n        if i == 0 or i == 1:\n            continue\n        tiles[i] = before+ before_back\n        before = tiles[i]\n        before_back = tiles[i-1] \n    \n    case = [4]\n    for i in range(N):\n        if i==0:\n            continue\n        before = case[i-1]\n        now = before + tiles[i] *2  \n        case.append(now)\n    \n    answer = case[N-1] # case 배열의 마지막이 N개의 타일들로 구성된 직사각형의 둘레\n    return answer\n```\n\n\n\n동적 프로그래밍을 통해 문제를 해결하였다.","slug":"programmers-tile","published":1,"updated":"2021-02-08T18:24:55.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kj002lf9c9611q0z73","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>대구 달성공원에 놀러 온 지수는 최근에 새로 만든 타일 장식물을 보게 되었다. 타일 장식물은 정사각형 타일을 붙여 만든 형태였는데, 한 변이 1인 정사각형 타일부터 시작하여 마치 앵무조개의 나선 모양처럼 점점 큰 타일을 붙인 형태였다. 타일 장식물의 일부를 그리면 다음과 같다.</p>\n<p><img src=\"https://grepp-programmers.s3.amazonaws.com/files/production/3e31bedd54/fcc48066-e72f-45c8-af03-e4360b58b589.png\" alt=\"ㅅㅡㅋㅡㄹㅣㄴㅅㅑㅅ 2018-08-21 ㅇㅗㅎㅜ 5.11.26.png\"></p>\n<p>그림에서 타일에 적힌 수는 각 타일의 한 변의 길이를 나타낸다. 타일 장식물을 구성하는 정사각형 타일 한 변의 길이를 안쪽 타일부터 시작하여 차례로 적으면 다음과 같다.<br>[1, 1, 2, 3, 5, 8, .]<br>지수는 문득 이러한 타일들로 구성되는 큰 직사각형의 둘레가 궁금해졌다. 예를 들어, 처음 다섯 개의 타일이 구성하는 직사각형(위에서 빨간색으로 표시한 직사각형)의 둘레는 26이다.</p>\n<p>타일의 개수 N이 주어질 때, N개의 타일로 구성된 직사각형의 둘레를 return 하도록 solution 함수를 작성하시오.</p>\n<h5 id=\"제한-사항\"><a href=\"#제한-사항\" class=\"headerlink\" title=\"제한 사항\"></a>제한 사항</h5><ul>\n<li>N은 1 이상 80 이하인 자연수이다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>N</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>26</td>\n</tr>\n<tr>\n<td>6</td>\n<td>42</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.digitalculture.or.kr/koi/selectOlymPiadDissentList.do\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">N</span>):</span></span><br><span class=\"line\">    tiles = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N)]</span><br><span class=\"line\">    before = tiles[<span class=\"number\">1</span>]</span><br><span class=\"line\">    before_back = tiles[<span class=\"number\">0</span>] </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"number\">0</span> <span class=\"keyword\">or</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        tiles[i] = before+ before_back</span><br><span class=\"line\">        before = tiles[i]</span><br><span class=\"line\">        before_back = tiles[i-<span class=\"number\">1</span>] </span><br><span class=\"line\">    </span><br><span class=\"line\">    case = [<span class=\"number\">4</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        before = case[i-<span class=\"number\">1</span>]</span><br><span class=\"line\">        now = before + tiles[i] *<span class=\"number\">2</span>  </span><br><span class=\"line\">        case.append(now)</span><br><span class=\"line\">    </span><br><span class=\"line\">    answer = case[N-<span class=\"number\">1</span>] <span class=\"comment\"># case 배열의 마지막이 N개의 타일들로 구성된 직사각형의 둘레</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n\n\n<p>동적 프로그래밍을 통해 문제를 해결하였다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>대구 달성공원에 놀러 온 지수는 최근에 새로 만든 타일 장식물을 보게 되었다. 타일 장식물은 정사각형 타일을 붙여 만든 형태였는데, 한 변이 1인 정사각형 타일부터 시작하여 마치 앵무조개의 나선 모양처럼 점점 큰 타일을 붙인 형태였다. 타일 장식물의 일부를 그리면 다음과 같다.</p>\n<p><img src=\"https://grepp-programmers.s3.amazonaws.com/files/production/3e31bedd54/fcc48066-e72f-45c8-af03-e4360b58b589.png\" alt=\"ㅅㅡㅋㅡㄹㅣㄴㅅㅑㅅ 2018-08-21 ㅇㅗㅎㅜ 5.11.26.png\"></p>\n<p>그림에서 타일에 적힌 수는 각 타일의 한 변의 길이를 나타낸다. 타일 장식물을 구성하는 정사각형 타일 한 변의 길이를 안쪽 타일부터 시작하여 차례로 적으면 다음과 같다.<br>[1, 1, 2, 3, 5, 8, .]<br>지수는 문득 이러한 타일들로 구성되는 큰 직사각형의 둘레가 궁금해졌다. 예를 들어, 처음 다섯 개의 타일이 구성하는 직사각형(위에서 빨간색으로 표시한 직사각형)의 둘레는 26이다.</p>\n<p>타일의 개수 N이 주어질 때, N개의 타일로 구성된 직사각형의 둘레를 return 하도록 solution 함수를 작성하시오.</p>\n<h5 id=\"제한-사항\"><a href=\"#제한-사항\" class=\"headerlink\" title=\"제한 사항\"></a>제한 사항</h5><ul>\n<li>N은 1 이상 80 이하인 자연수이다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>N</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5</td>\n<td>26</td>\n</tr>\n<tr>\n<td>6</td>\n<td>42</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://www.digitalculture.or.kr/koi/selectOlymPiadDissentList.do\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">N</span>):</span></span><br><span class=\"line\">    tiles = [<span class=\"number\">1</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N)]</span><br><span class=\"line\">    before = tiles[<span class=\"number\">1</span>]</span><br><span class=\"line\">    before_back = tiles[<span class=\"number\">0</span>] </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i == <span class=\"number\">0</span> <span class=\"keyword\">or</span> i == <span class=\"number\">1</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        tiles[i] = before+ before_back</span><br><span class=\"line\">        before = tiles[i]</span><br><span class=\"line\">        before_back = tiles[i-<span class=\"number\">1</span>] </span><br><span class=\"line\">    </span><br><span class=\"line\">    case = [<span class=\"number\">4</span>]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(N):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i==<span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">continue</span></span><br><span class=\"line\">        before = case[i-<span class=\"number\">1</span>]</span><br><span class=\"line\">        now = before + tiles[i] *<span class=\"number\">2</span>  </span><br><span class=\"line\">        case.append(now)</span><br><span class=\"line\">    </span><br><span class=\"line\">    answer = case[N-<span class=\"number\">1</span>] <span class=\"comment\"># case 배열의 마지막이 N개의 타일들로 구성된 직사각형의 둘레</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n\n\n<p>동적 프로그래밍을 통해 문제를 해결하였다.</p>\n"},{"title":"[프로그래머스] 탑 - 파이썬","date":"2020-02-15T10:45:00.000Z","_content":"\n\n\n# 문제설명\n\n수평 직선에 탑 N대를 세웠습니다. 모든 탑의 꼭대기에는 신호를 송/수신하는 장치를 설치했습니다. 발사한 신호는 신호를 보낸 탑보다 높은 탑에서만 수신합니다. 또한, 한 번 수신된 신호는 다른 탑으로 송신되지 않습니다.\n\n예를 들어 높이가 6, 9, 5, 7, 4인 다섯 탑이 왼쪽으로 동시에 레이저 신호를 발사합니다. 그러면, 탑은 다음과 같이 신호를 주고받습니다. 높이가 4인 다섯 번째 탑에서 발사한 신호는 높이가 7인 네 번째 탑이 수신하고, 높이가 7인 네 번째 탑의 신호는 높이가 9인 두 번째 탑이, 높이가 5인 세 번째 탑의 신호도 높이가 9인 두 번째 탑이 수신합니다. 높이가 9인 두 번째 탑과 높이가 6인 첫 번째 탑이 보낸 레이저 신호는 어떤 탑에서도 수신할 수 없습니다.\n\n| 송신 탑(높이) | 수신 탑(높이) |\n| ------------- | ------------- |\n| 5(4)          | 4(7)          |\n| 4(7)          | 2(9)          |\n| 3(5)          | 2(9)          |\n| 2(9)          | -             |\n| 1(6)          | -             |\n\n맨 왼쪽부터 순서대로 탑의 높이를 담은 배열 heights가 매개변수로 주어질 때 각 탑이 쏜 신호를 어느 탑에서 받았는지 기록한 배열을 return 하도록 solution 함수를 작성해주세요.\n\n## 제한사항\n\n- heights는 길이 2 이상 100 이하인 정수 배열입니다.\n- 모든 탑의 높이는 1 이상 100 이하입니다.\n- 신호를 수신하는 탑이 없으면 0으로 표시합니다.\n\n##### 입출력 예\n\n| heights         | return          |\n| --------------- | --------------- |\n| [6,9,5,7,4]     | [0,0,2,2,4]     |\n| [3,9,9,3,5,7,2] | [0,0,0,3,3,3,6] |\n| [1,5,3,6,7,6,5] | [0,0,2,0,0,5,6] |\n\n##### 입출력 예 설명\n\n입출력 예 #1\n앞서 설명한 예와 같습니다.\n\n입출력 예 #2\n\n[1,2,3] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.\n[4,5,6] 번째 탑이 쏜 신호는 3번째 탑이 수신합니다.\n[7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다.\n\n입출력 예 #3\n\n[1,2,4,5] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.\n[3] 번째 탑이 쏜 신호는 2번째 탑이 수신합니다.\n[6] 번째 탑이 쏜 신호는 5번째 탑이 수신합니다.\n[7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다.\n\n[출처](https://www.digitalculture.or.kr/koi/selectOlymPiadDissentList.do)\n\n# 풀이\n\n```python\ndef solution(heights):\n    hi_list = [(h, i) for (i, h) in enumerate(heights)]\n    hi_list.reverse()\n    answer = [0] * len(heights)\n\n    while hi_list:\n        top = hi_list.pop(0)\n        if hi_list:\n            for i in range(len(hi_list)):\n                    if top[0] < hi_list[i][0]:\n                        if answer[top[1]] == 0:\n                            answer[top[1]]= hi_list[i][1] + 1\n\n    return answer\n```\n\n### 변수설명\n\n- hi_list: (높이, index) 쌍으로 저장된 리스트\n- answer:  수신 탑의 index 배열\n- top:  송신 탑 (높이, index)\n\n\n\n##### 풀이방법\n\n- 가장 마지막 인덱스부터 왼쪽으로 비교하기 때문에 reverse()함수를 이용하였다.\n\n- 또한 한번 수신된 신호는 다른 탑으로 송신되지 않기 때문에 \n\n  ``if answer[top[1]] == 0:`` 를 통해 신호가 수신되었는지 안되었는지 확인하였다.\n\n  송신 탑(top) 의 index에 수신 탑의 index +1 이 저장되어야 하기 때문에 answer[top[i]] 에 담는다.\n\n  \n\n요령 없이 풀었기 때문에 더 효율적으로 코드를 짤 수 있는지 정답 예제들을 살펴봐야겠다.","source":"_posts/programmers-top.md","raw":"---\ntitle: \"[프로그래머스] 탑 - 파이썬\"\ndate: 2020-02-15 19:45:00\ntags: 알고리즘\n\n\n---\n\n\n\n# 문제설명\n\n수평 직선에 탑 N대를 세웠습니다. 모든 탑의 꼭대기에는 신호를 송/수신하는 장치를 설치했습니다. 발사한 신호는 신호를 보낸 탑보다 높은 탑에서만 수신합니다. 또한, 한 번 수신된 신호는 다른 탑으로 송신되지 않습니다.\n\n예를 들어 높이가 6, 9, 5, 7, 4인 다섯 탑이 왼쪽으로 동시에 레이저 신호를 발사합니다. 그러면, 탑은 다음과 같이 신호를 주고받습니다. 높이가 4인 다섯 번째 탑에서 발사한 신호는 높이가 7인 네 번째 탑이 수신하고, 높이가 7인 네 번째 탑의 신호는 높이가 9인 두 번째 탑이, 높이가 5인 세 번째 탑의 신호도 높이가 9인 두 번째 탑이 수신합니다. 높이가 9인 두 번째 탑과 높이가 6인 첫 번째 탑이 보낸 레이저 신호는 어떤 탑에서도 수신할 수 없습니다.\n\n| 송신 탑(높이) | 수신 탑(높이) |\n| ------------- | ------------- |\n| 5(4)          | 4(7)          |\n| 4(7)          | 2(9)          |\n| 3(5)          | 2(9)          |\n| 2(9)          | -             |\n| 1(6)          | -             |\n\n맨 왼쪽부터 순서대로 탑의 높이를 담은 배열 heights가 매개변수로 주어질 때 각 탑이 쏜 신호를 어느 탑에서 받았는지 기록한 배열을 return 하도록 solution 함수를 작성해주세요.\n\n## 제한사항\n\n- heights는 길이 2 이상 100 이하인 정수 배열입니다.\n- 모든 탑의 높이는 1 이상 100 이하입니다.\n- 신호를 수신하는 탑이 없으면 0으로 표시합니다.\n\n##### 입출력 예\n\n| heights         | return          |\n| --------------- | --------------- |\n| [6,9,5,7,4]     | [0,0,2,2,4]     |\n| [3,9,9,3,5,7,2] | [0,0,0,3,3,3,6] |\n| [1,5,3,6,7,6,5] | [0,0,2,0,0,5,6] |\n\n##### 입출력 예 설명\n\n입출력 예 #1\n앞서 설명한 예와 같습니다.\n\n입출력 예 #2\n\n[1,2,3] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.\n[4,5,6] 번째 탑이 쏜 신호는 3번째 탑이 수신합니다.\n[7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다.\n\n입출력 예 #3\n\n[1,2,4,5] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.\n[3] 번째 탑이 쏜 신호는 2번째 탑이 수신합니다.\n[6] 번째 탑이 쏜 신호는 5번째 탑이 수신합니다.\n[7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다.\n\n[출처](https://www.digitalculture.or.kr/koi/selectOlymPiadDissentList.do)\n\n# 풀이\n\n```python\ndef solution(heights):\n    hi_list = [(h, i) for (i, h) in enumerate(heights)]\n    hi_list.reverse()\n    answer = [0] * len(heights)\n\n    while hi_list:\n        top = hi_list.pop(0)\n        if hi_list:\n            for i in range(len(hi_list)):\n                    if top[0] < hi_list[i][0]:\n                        if answer[top[1]] == 0:\n                            answer[top[1]]= hi_list[i][1] + 1\n\n    return answer\n```\n\n### 변수설명\n\n- hi_list: (높이, index) 쌍으로 저장된 리스트\n- answer:  수신 탑의 index 배열\n- top:  송신 탑 (높이, index)\n\n\n\n##### 풀이방법\n\n- 가장 마지막 인덱스부터 왼쪽으로 비교하기 때문에 reverse()함수를 이용하였다.\n\n- 또한 한번 수신된 신호는 다른 탑으로 송신되지 않기 때문에 \n\n  ``if answer[top[1]] == 0:`` 를 통해 신호가 수신되었는지 안되었는지 확인하였다.\n\n  송신 탑(top) 의 index에 수신 탑의 index +1 이 저장되어야 하기 때문에 answer[top[i]] 에 담는다.\n\n  \n\n요령 없이 풀었기 때문에 더 효율적으로 코드를 짤 수 있는지 정답 예제들을 살펴봐야겠다.","slug":"programmers-top","published":1,"updated":"2021-02-08T18:24:55.705Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kk002of9c969l07wj9","content":"<h1 id=\"문제설명\"><a href=\"#문제설명\" class=\"headerlink\" title=\"문제설명\"></a>문제설명</h1><p>수평 직선에 탑 N대를 세웠습니다. 모든 탑의 꼭대기에는 신호를 송/수신하는 장치를 설치했습니다. 발사한 신호는 신호를 보낸 탑보다 높은 탑에서만 수신합니다. 또한, 한 번 수신된 신호는 다른 탑으로 송신되지 않습니다.</p>\n<p>예를 들어 높이가 6, 9, 5, 7, 4인 다섯 탑이 왼쪽으로 동시에 레이저 신호를 발사합니다. 그러면, 탑은 다음과 같이 신호를 주고받습니다. 높이가 4인 다섯 번째 탑에서 발사한 신호는 높이가 7인 네 번째 탑이 수신하고, 높이가 7인 네 번째 탑의 신호는 높이가 9인 두 번째 탑이, 높이가 5인 세 번째 탑의 신호도 높이가 9인 두 번째 탑이 수신합니다. 높이가 9인 두 번째 탑과 높이가 6인 첫 번째 탑이 보낸 레이저 신호는 어떤 탑에서도 수신할 수 없습니다.</p>\n<table>\n<thead>\n<tr>\n<th>송신 탑(높이)</th>\n<th>수신 탑(높이)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5(4)</td>\n<td>4(7)</td>\n</tr>\n<tr>\n<td>4(7)</td>\n<td>2(9)</td>\n</tr>\n<tr>\n<td>3(5)</td>\n<td>2(9)</td>\n</tr>\n<tr>\n<td>2(9)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>1(6)</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<p>맨 왼쪽부터 순서대로 탑의 높이를 담은 배열 heights가 매개변수로 주어질 때 각 탑이 쏜 신호를 어느 탑에서 받았는지 기록한 배열을 return 하도록 solution 함수를 작성해주세요.</p>\n<h2 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h2><ul>\n<li>heights는 길이 2 이상 100 이하인 정수 배열입니다.</li>\n<li>모든 탑의 높이는 1 이상 100 이하입니다.</li>\n<li>신호를 수신하는 탑이 없으면 0으로 표시합니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>heights</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[6,9,5,7,4]</td>\n<td>[0,0,2,2,4]</td>\n</tr>\n<tr>\n<td>[3,9,9,3,5,7,2]</td>\n<td>[0,0,0,3,3,3,6]</td>\n</tr>\n<tr>\n<td>[1,5,3,6,7,6,5]</td>\n<td>[0,0,2,0,0,5,6]</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>입출력 예 #1<br>앞서 설명한 예와 같습니다.</p>\n<p>입출력 예 #2</p>\n<p>[1,2,3] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.<br>[4,5,6] 번째 탑이 쏜 신호는 3번째 탑이 수신합니다.<br>[7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다.</p>\n<p>입출력 예 #3</p>\n<p>[1,2,4,5] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.<br>[3] 번째 탑이 쏜 신호는 2번째 탑이 수신합니다.<br>[6] 번째 탑이 쏜 신호는 5번째 탑이 수신합니다.<br>[7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다.</p>\n<p><a href=\"https://www.digitalculture.or.kr/koi/selectOlymPiadDissentList.do\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">heights</span>):</span></span><br><span class=\"line\">    hi_list = [(h, i) <span class=\"keyword\">for</span> (i, h) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(heights)]</span><br><span class=\"line\">    hi_list.reverse()</span><br><span class=\"line\">    answer = [<span class=\"number\">0</span>] * <span class=\"built_in\">len</span>(heights)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> hi_list:</span><br><span class=\"line\">        top = hi_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hi_list:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(hi_list)):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> top[<span class=\"number\">0</span>] &lt; hi_list[i][<span class=\"number\">0</span>]:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> answer[top[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                            answer[top[<span class=\"number\">1</span>]]= hi_list[i][<span class=\"number\">1</span>] + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<h3 id=\"변수설명\"><a href=\"#변수설명\" class=\"headerlink\" title=\"변수설명\"></a>변수설명</h3><ul>\n<li>hi_list: (높이, index) 쌍으로 저장된 리스트</li>\n<li>answer:  수신 탑의 index 배열</li>\n<li>top:  송신 탑 (높이, index)</li>\n</ul>\n<h5 id=\"풀이방법\"><a href=\"#풀이방법\" class=\"headerlink\" title=\"풀이방법\"></a>풀이방법</h5><ul>\n<li><p>가장 마지막 인덱스부터 왼쪽으로 비교하기 때문에 reverse()함수를 이용하였다.</p>\n</li>\n<li><p>또한 한번 수신된 신호는 다른 탑으로 송신되지 않기 때문에 </p>\n<p><code>if answer[top[1]] == 0:</code> 를 통해 신호가 수신되었는지 안되었는지 확인하였다.</p>\n<p>송신 탑(top) 의 index에 수신 탑의 index +1 이 저장되어야 하기 때문에 answer[top[i]] 에 담는다.</p>\n</li>\n</ul>\n<p>요령 없이 풀었기 때문에 더 효율적으로 코드를 짤 수 있는지 정답 예제들을 살펴봐야겠다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제설명\"><a href=\"#문제설명\" class=\"headerlink\" title=\"문제설명\"></a>문제설명</h1><p>수평 직선에 탑 N대를 세웠습니다. 모든 탑의 꼭대기에는 신호를 송/수신하는 장치를 설치했습니다. 발사한 신호는 신호를 보낸 탑보다 높은 탑에서만 수신합니다. 또한, 한 번 수신된 신호는 다른 탑으로 송신되지 않습니다.</p>\n<p>예를 들어 높이가 6, 9, 5, 7, 4인 다섯 탑이 왼쪽으로 동시에 레이저 신호를 발사합니다. 그러면, 탑은 다음과 같이 신호를 주고받습니다. 높이가 4인 다섯 번째 탑에서 발사한 신호는 높이가 7인 네 번째 탑이 수신하고, 높이가 7인 네 번째 탑의 신호는 높이가 9인 두 번째 탑이, 높이가 5인 세 번째 탑의 신호도 높이가 9인 두 번째 탑이 수신합니다. 높이가 9인 두 번째 탑과 높이가 6인 첫 번째 탑이 보낸 레이저 신호는 어떤 탑에서도 수신할 수 없습니다.</p>\n<table>\n<thead>\n<tr>\n<th>송신 탑(높이)</th>\n<th>수신 탑(높이)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>5(4)</td>\n<td>4(7)</td>\n</tr>\n<tr>\n<td>4(7)</td>\n<td>2(9)</td>\n</tr>\n<tr>\n<td>3(5)</td>\n<td>2(9)</td>\n</tr>\n<tr>\n<td>2(9)</td>\n<td>-</td>\n</tr>\n<tr>\n<td>1(6)</td>\n<td>-</td>\n</tr>\n</tbody></table>\n<p>맨 왼쪽부터 순서대로 탑의 높이를 담은 배열 heights가 매개변수로 주어질 때 각 탑이 쏜 신호를 어느 탑에서 받았는지 기록한 배열을 return 하도록 solution 함수를 작성해주세요.</p>\n<h2 id=\"제한사항\"><a href=\"#제한사항\" class=\"headerlink\" title=\"제한사항\"></a>제한사항</h2><ul>\n<li>heights는 길이 2 이상 100 이하인 정수 배열입니다.</li>\n<li>모든 탑의 높이는 1 이상 100 이하입니다.</li>\n<li>신호를 수신하는 탑이 없으면 0으로 표시합니다.</li>\n</ul>\n<h5 id=\"입출력-예\"><a href=\"#입출력-예\" class=\"headerlink\" title=\"입출력 예\"></a>입출력 예</h5><table>\n<thead>\n<tr>\n<th>heights</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[6,9,5,7,4]</td>\n<td>[0,0,2,2,4]</td>\n</tr>\n<tr>\n<td>[3,9,9,3,5,7,2]</td>\n<td>[0,0,0,3,3,3,6]</td>\n</tr>\n<tr>\n<td>[1,5,3,6,7,6,5]</td>\n<td>[0,0,2,0,0,5,6]</td>\n</tr>\n</tbody></table>\n<h5 id=\"입출력-예-설명\"><a href=\"#입출력-예-설명\" class=\"headerlink\" title=\"입출력 예 설명\"></a>입출력 예 설명</h5><p>입출력 예 #1<br>앞서 설명한 예와 같습니다.</p>\n<p>입출력 예 #2</p>\n<p>[1,2,3] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.<br>[4,5,6] 번째 탑이 쏜 신호는 3번째 탑이 수신합니다.<br>[7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다.</p>\n<p>입출력 예 #3</p>\n<p>[1,2,4,5] 번째 탑이 쏜 신호는 아무도 수신하지 않습니다.<br>[3] 번째 탑이 쏜 신호는 2번째 탑이 수신합니다.<br>[6] 번째 탑이 쏜 신호는 5번째 탑이 수신합니다.<br>[7] 번째 탑이 쏜 신호는 6번째 탑이 수신합니다.</p>\n<p><a href=\"https://www.digitalculture.or.kr/koi/selectOlymPiadDissentList.do\">출처</a></p>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">solution</span>(<span class=\"params\">heights</span>):</span></span><br><span class=\"line\">    hi_list = [(h, i) <span class=\"keyword\">for</span> (i, h) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(heights)]</span><br><span class=\"line\">    hi_list.reverse()</span><br><span class=\"line\">    answer = [<span class=\"number\">0</span>] * <span class=\"built_in\">len</span>(heights)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> hi_list:</span><br><span class=\"line\">        top = hi_list.pop(<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> hi_list:</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(hi_list)):</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> top[<span class=\"number\">0</span>] &lt; hi_list[i][<span class=\"number\">0</span>]:</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> answer[top[<span class=\"number\">1</span>]] == <span class=\"number\">0</span>:</span><br><span class=\"line\">                            answer[top[<span class=\"number\">1</span>]]= hi_list[i][<span class=\"number\">1</span>] + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer</span><br></pre></td></tr></table></figure>\n<h3 id=\"변수설명\"><a href=\"#변수설명\" class=\"headerlink\" title=\"변수설명\"></a>변수설명</h3><ul>\n<li>hi_list: (높이, index) 쌍으로 저장된 리스트</li>\n<li>answer:  수신 탑의 index 배열</li>\n<li>top:  송신 탑 (높이, index)</li>\n</ul>\n<h5 id=\"풀이방법\"><a href=\"#풀이방법\" class=\"headerlink\" title=\"풀이방법\"></a>풀이방법</h5><ul>\n<li><p>가장 마지막 인덱스부터 왼쪽으로 비교하기 때문에 reverse()함수를 이용하였다.</p>\n</li>\n<li><p>또한 한번 수신된 신호는 다른 탑으로 송신되지 않기 때문에 </p>\n<p><code>if answer[top[1]] == 0:</code> 를 통해 신호가 수신되었는지 안되었는지 확인하였다.</p>\n<p>송신 탑(top) 의 index에 수신 탑의 index +1 이 저장되어야 하기 때문에 answer[top[i]] 에 담는다.</p>\n</li>\n</ul>\n<p>요령 없이 풀었기 때문에 더 효율적으로 코드를 짤 수 있는지 정답 예제들을 살펴봐야겠다.</p>\n"},{"title":"[파이썬] numpy array[::] 사용법(array 슬라이싱)","date":"2020-02-22T06:24:00.000Z","_content":"\n\n\n### 슬라이싱 (slicing)\n\n기본형태 : **array[start​ : end : ​step]**\n\n- `start` : 슬라이싱을 시작할 시작 위치\n- `end`: 슬라이싱을 끝낼 위치로 end는 포함하지 않는다.\n- `step`: stride라고도 하며 몇개씩 끊어서 가져올지를 정한다.\n\n양수,음수 모두 가능\n\n\n\n- `a[ start: ]` : start 위치부터 끝까지 가져오기\n\n- `a[ end : ]`: 시작점부터 end 위치까지 모두 가져오기\n\n- `a[ start : end ]` : start위치 부터 end 위치까지 모두 가져오기\n\n- `a[ start : end : step ]` (step이 `양수` 일 때) : 오른쪽으로 step만큼 이동하면서 가져온다.\n\n- `a[ start: end : step]`(step이 `음수`일 때): 왼쪽으로 step만큼 이동하면서 가져온다.\n\n  ```python3\n  >>> a= ['a', 'b', 'c', 'd', 'e']\n  # 인덱스 1~3 까지를 꺼꾸로 가져오기\n  >>> a[3 :0 :-1]\n  ['d', 'c', 'b']\n  ```\n\n\n\n**더 많은 예제 참고** : https://twpower.github.io/119-python-list-slicing-examples","source":"_posts/python-array-cutting.md","raw":"---\ntitle: \"[파이썬] numpy array[::] 사용법(array 슬라이싱)\"\ndate: 2020-02-22 15:24:00\ntags: 파이썬\n---\n\n\n\n### 슬라이싱 (slicing)\n\n기본형태 : **array[start​ : end : ​step]**\n\n- `start` : 슬라이싱을 시작할 시작 위치\n- `end`: 슬라이싱을 끝낼 위치로 end는 포함하지 않는다.\n- `step`: stride라고도 하며 몇개씩 끊어서 가져올지를 정한다.\n\n양수,음수 모두 가능\n\n\n\n- `a[ start: ]` : start 위치부터 끝까지 가져오기\n\n- `a[ end : ]`: 시작점부터 end 위치까지 모두 가져오기\n\n- `a[ start : end ]` : start위치 부터 end 위치까지 모두 가져오기\n\n- `a[ start : end : step ]` (step이 `양수` 일 때) : 오른쪽으로 step만큼 이동하면서 가져온다.\n\n- `a[ start: end : step]`(step이 `음수`일 때): 왼쪽으로 step만큼 이동하면서 가져온다.\n\n  ```python3\n  >>> a= ['a', 'b', 'c', 'd', 'e']\n  # 인덱스 1~3 까지를 꺼꾸로 가져오기\n  >>> a[3 :0 :-1]\n  ['d', 'c', 'b']\n  ```\n\n\n\n**더 많은 예제 참고** : https://twpower.github.io/119-python-list-slicing-examples","slug":"python-array-cutting","published":1,"updated":"2021-02-08T18:24:55.706Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kl002qf9c9hr1wdebd","content":"<h3 id=\"슬라이싱-slicing\"><a href=\"#슬라이싱-slicing\" class=\"headerlink\" title=\"슬라이싱 (slicing)\"></a>슬라이싱 (slicing)</h3><p>기본형태 : <strong>array[start​ : end : ​step]</strong></p>\n<ul>\n<li><code>start</code> : 슬라이싱을 시작할 시작 위치</li>\n<li><code>end</code>: 슬라이싱을 끝낼 위치로 end는 포함하지 않는다.</li>\n<li><code>step</code>: stride라고도 하며 몇개씩 끊어서 가져올지를 정한다.</li>\n</ul>\n<p>양수,음수 모두 가능</p>\n<ul>\n<li><p><code>a[ start: ]</code> : start 위치부터 끝까지 가져오기</p>\n</li>\n<li><p><code>a[ end : ]</code>: 시작점부터 end 위치까지 모두 가져오기</p>\n</li>\n<li><p><code>a[ start : end ]</code> : start위치 부터 end 위치까지 모두 가져오기</p>\n</li>\n<li><p><code>a[ start : end : step ]</code> (step이 <code>양수</code> 일 때) : 오른쪽으로 step만큼 이동하면서 가져온다.</p>\n</li>\n<li><p><code>a[ start: end : step]</code>(step이 <code>음수</code>일 때): 왼쪽으로 step만큼 이동하면서 가져온다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a&#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span><br><span class=\"line\"># 인덱스 1~3 까지를 꺼꾸로 가져오기</span><br><span class=\"line\">&gt;&gt;&gt; a[3 :0 :-1]</span><br><span class=\"line\">[&#39;d&#39;, &#39;c&#39;, &#39;b&#39;]</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<p><strong>더 많은 예제 참고</strong> : <a href=\"https://twpower.github.io/119-python-list-slicing-examples\">https://twpower.github.io/119-python-list-slicing-examples</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"슬라이싱-slicing\"><a href=\"#슬라이싱-slicing\" class=\"headerlink\" title=\"슬라이싱 (slicing)\"></a>슬라이싱 (slicing)</h3><p>기본형태 : <strong>array[start​ : end : ​step]</strong></p>\n<ul>\n<li><code>start</code> : 슬라이싱을 시작할 시작 위치</li>\n<li><code>end</code>: 슬라이싱을 끝낼 위치로 end는 포함하지 않는다.</li>\n<li><code>step</code>: stride라고도 하며 몇개씩 끊어서 가져올지를 정한다.</li>\n</ul>\n<p>양수,음수 모두 가능</p>\n<ul>\n<li><p><code>a[ start: ]</code> : start 위치부터 끝까지 가져오기</p>\n</li>\n<li><p><code>a[ end : ]</code>: 시작점부터 end 위치까지 모두 가져오기</p>\n</li>\n<li><p><code>a[ start : end ]</code> : start위치 부터 end 위치까지 모두 가져오기</p>\n</li>\n<li><p><code>a[ start : end : step ]</code> (step이 <code>양수</code> 일 때) : 오른쪽으로 step만큼 이동하면서 가져온다.</p>\n</li>\n<li><p><code>a[ start: end : step]</code>(step이 <code>음수</code>일 때): 왼쪽으로 step만큼 이동하면서 가져온다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; a&#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span><br><span class=\"line\"># 인덱스 1~3 까지를 꺼꾸로 가져오기</span><br><span class=\"line\">&gt;&gt;&gt; a[3 :0 :-1]</span><br><span class=\"line\">[&#39;d&#39;, &#39;c&#39;, &#39;b&#39;]</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<p><strong>더 많은 예제 참고</strong> : <a href=\"https://twpower.github.io/119-python-list-slicing-examples\">https://twpower.github.io/119-python-list-slicing-examples</a></p>\n"},{"title":"[파이썬] numpy array 정렬","date":"2020-02-22T06:03:00.000Z","_content":"\n\n\n### 1차원배열 정렬\n\n- 좌에서 우로 정렬: **np.sort(x)** \n- 거꾸로 정렬: **np.sort(x)[::-1] , x[np.argsort(-x)]**\n\n### 2차원배열 정렬\n\n- 열 축 기준(좌에서 우로)으로 정렬 : **np.sort(x, axis=1)**\n- 행 축 기준(위에서 아래로)으로 정렬: **np.sort(x, axis=0)**\n\n- 행 축 기준(위에서 아래로)으로 거꾸로 정렬: **np.sort(x, axis=0)[::-1]**\n\n\n\n#### 예시\n\n-----\n\n1. **`np.sort(x)`**\n\n   x = np.array([3,5,1]) **--- 정렬 후 --->** array([1,3,5])\n\n   \n\n2. **`np.sort(x)[::-1]`** , **`x[np.argsort(-x)]`**\n\n   x = np.array([3,5,1]) **--- 정렬 후 --->** array([5,3,1])\n\n   \n\n3. **`np.sort(x, axis=1)`**\n\n   x = np.array([3, 5, 1],\t\t\t\t\t\t\tarray([1, 3, 5],\n\n   ​\t\t\t\t\t   [2, 6, 3], **--- 정렬 후 --->** \t\t   [2, 3, 6],\n\n   ​\t\t\t\t\t   [8, 3, 7])\t\t\t\t\t\t\t\t\t [3, 7, 8])\n\n   \n\n4. **`np.sort(x, axis=0)`**\n\n   x = np.array([3, 5, 1],\t\t\t\t\t\t\tarray([2, 3, 1],\n\n   ​\t\t\t\t\t   [2, 6, 3], **--- 정렬 후 --->** \t\t   [3, 5, 3],\n\n   ​\t\t\t\t\t   [8, 3, 7])\t\t\t\t\t\t\t\t\t [8, 6, 7])\n\n   \n\n5. **`np.sort(x, axis=0)[::-1]`**\n\n   x = np.array([3, 5, 1],\t\t\t\t\t\t\tarray([8, 6, 7],\n\n   ​\t\t\t\t\t   [2, 6, 3], **--- 정렬 후 --->** \t\t   [3, 5, 3],\n\n   ​\t\t\t\t\t   [8, 3, 7])\t\t\t\t\t\t\t\t\t [2, 3, 1])\n\n-----\n\n\n\n### **x.sort()와 np.sort(x)의 차이점**\n\n np.sort(x)는 원래 배열은 그대로, 정렬 결과의 복사본을 반환한다. \n\n x.sort()는 배열 자체를 정렬한다.\n\n\n\n#### **다음 과제** \n\nDataFrame, Tuple 정렬, List 정렬 \n\n\n\n[참고](https://rfriend.tistory.com/357)","source":"_posts/python-array-sort.md","raw":"---\ntitle: \"[파이썬] numpy array 정렬\"\ndate: 2020-02-22 15:03:00\ntags: 파이썬\n---\n\n\n\n### 1차원배열 정렬\n\n- 좌에서 우로 정렬: **np.sort(x)** \n- 거꾸로 정렬: **np.sort(x)[::-1] , x[np.argsort(-x)]**\n\n### 2차원배열 정렬\n\n- 열 축 기준(좌에서 우로)으로 정렬 : **np.sort(x, axis=1)**\n- 행 축 기준(위에서 아래로)으로 정렬: **np.sort(x, axis=0)**\n\n- 행 축 기준(위에서 아래로)으로 거꾸로 정렬: **np.sort(x, axis=0)[::-1]**\n\n\n\n#### 예시\n\n-----\n\n1. **`np.sort(x)`**\n\n   x = np.array([3,5,1]) **--- 정렬 후 --->** array([1,3,5])\n\n   \n\n2. **`np.sort(x)[::-1]`** , **`x[np.argsort(-x)]`**\n\n   x = np.array([3,5,1]) **--- 정렬 후 --->** array([5,3,1])\n\n   \n\n3. **`np.sort(x, axis=1)`**\n\n   x = np.array([3, 5, 1],\t\t\t\t\t\t\tarray([1, 3, 5],\n\n   ​\t\t\t\t\t   [2, 6, 3], **--- 정렬 후 --->** \t\t   [2, 3, 6],\n\n   ​\t\t\t\t\t   [8, 3, 7])\t\t\t\t\t\t\t\t\t [3, 7, 8])\n\n   \n\n4. **`np.sort(x, axis=0)`**\n\n   x = np.array([3, 5, 1],\t\t\t\t\t\t\tarray([2, 3, 1],\n\n   ​\t\t\t\t\t   [2, 6, 3], **--- 정렬 후 --->** \t\t   [3, 5, 3],\n\n   ​\t\t\t\t\t   [8, 3, 7])\t\t\t\t\t\t\t\t\t [8, 6, 7])\n\n   \n\n5. **`np.sort(x, axis=0)[::-1]`**\n\n   x = np.array([3, 5, 1],\t\t\t\t\t\t\tarray([8, 6, 7],\n\n   ​\t\t\t\t\t   [2, 6, 3], **--- 정렬 후 --->** \t\t   [3, 5, 3],\n\n   ​\t\t\t\t\t   [8, 3, 7])\t\t\t\t\t\t\t\t\t [2, 3, 1])\n\n-----\n\n\n\n### **x.sort()와 np.sort(x)의 차이점**\n\n np.sort(x)는 원래 배열은 그대로, 정렬 결과의 복사본을 반환한다. \n\n x.sort()는 배열 자체를 정렬한다.\n\n\n\n#### **다음 과제** \n\nDataFrame, Tuple 정렬, List 정렬 \n\n\n\n[참고](https://rfriend.tistory.com/357)","slug":"python-array-sort","published":1,"updated":"2021-02-08T18:24:55.634Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0km002tf9c90sw3fql0","content":"<h3 id=\"1차원배열-정렬\"><a href=\"#1차원배열-정렬\" class=\"headerlink\" title=\"1차원배열 정렬\"></a>1차원배열 정렬</h3><ul>\n<li>좌에서 우로 정렬: <strong>np.sort(x)</strong> </li>\n<li>거꾸로 정렬: <strong>np.sort(x)[::-1] , x[np.argsort(-x)]</strong></li>\n</ul>\n<h3 id=\"2차원배열-정렬\"><a href=\"#2차원배열-정렬\" class=\"headerlink\" title=\"2차원배열 정렬\"></a>2차원배열 정렬</h3><ul>\n<li><p>열 축 기준(좌에서 우로)으로 정렬 : <strong>np.sort(x, axis=1)</strong></p>\n</li>\n<li><p>행 축 기준(위에서 아래로)으로 정렬: <strong>np.sort(x, axis=0)</strong></p>\n</li>\n<li><p>행 축 기준(위에서 아래로)으로 거꾸로 정렬: <strong>np.sort(x, axis=0)[::-1]</strong></p>\n</li>\n</ul>\n<h4 id=\"예시\"><a href=\"#예시\" class=\"headerlink\" title=\"예시\"></a>예시</h4><hr>\n<ol>\n<li><p><strong><code>np.sort(x)</code></strong></p>\n<p>x = np.array([3,5,1]) <strong>— 정렬 후 —&gt;</strong> array([1,3,5])</p>\n</li>\n<li><p><strong><code>np.sort(x)[::-1]</code></strong> , <strong><code>x[np.argsort(-x)]</code></strong></p>\n<p>x = np.array([3,5,1]) <strong>— 정렬 후 —&gt;</strong> array([5,3,1])</p>\n</li>\n<li><p><strong><code>np.sort(x, axis=1)</code></strong></p>\n<p>x = np.array([3, 5, 1],                            array([1, 3, 5],</p>\n<p>​                       [2, 6, 3], <strong>— 정렬 후 —&gt;</strong>            [2, 3, 6],</p>\n<p>​                       [8, 3, 7])                                     [3, 7, 8])</p>\n</li>\n<li><p><strong><code>np.sort(x, axis=0)</code></strong></p>\n<p>x = np.array([3, 5, 1],                            array([2, 3, 1],</p>\n<p>​                       [2, 6, 3], <strong>— 정렬 후 —&gt;</strong>            [3, 5, 3],</p>\n<p>​                       [8, 3, 7])                                     [8, 6, 7])</p>\n</li>\n<li><p><strong><code>np.sort(x, axis=0)[::-1]</code></strong></p>\n<p>x = np.array([3, 5, 1],                            array([8, 6, 7],</p>\n<p>​                       [2, 6, 3], <strong>— 정렬 후 —&gt;</strong>            [3, 5, 3],</p>\n<p>​                       [8, 3, 7])                                     [2, 3, 1])</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"x-sort-와-np-sort-x-의-차이점\"><a href=\"#x-sort-와-np-sort-x-의-차이점\" class=\"headerlink\" title=\"x.sort()와 np.sort(x)의 차이점\"></a><strong>x.sort()와 np.sort(x)의 차이점</strong></h3><p> np.sort(x)는 원래 배열은 그대로, 정렬 결과의 복사본을 반환한다. </p>\n<p> x.sort()는 배열 자체를 정렬한다.</p>\n<h4 id=\"다음-과제\"><a href=\"#다음-과제\" class=\"headerlink\" title=\"다음 과제\"></a><strong>다음 과제</strong></h4><p>DataFrame, Tuple 정렬, List 정렬 </p>\n<p><a href=\"https://rfriend.tistory.com/357\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1차원배열-정렬\"><a href=\"#1차원배열-정렬\" class=\"headerlink\" title=\"1차원배열 정렬\"></a>1차원배열 정렬</h3><ul>\n<li>좌에서 우로 정렬: <strong>np.sort(x)</strong> </li>\n<li>거꾸로 정렬: <strong>np.sort(x)[::-1] , x[np.argsort(-x)]</strong></li>\n</ul>\n<h3 id=\"2차원배열-정렬\"><a href=\"#2차원배열-정렬\" class=\"headerlink\" title=\"2차원배열 정렬\"></a>2차원배열 정렬</h3><ul>\n<li><p>열 축 기준(좌에서 우로)으로 정렬 : <strong>np.sort(x, axis=1)</strong></p>\n</li>\n<li><p>행 축 기준(위에서 아래로)으로 정렬: <strong>np.sort(x, axis=0)</strong></p>\n</li>\n<li><p>행 축 기준(위에서 아래로)으로 거꾸로 정렬: <strong>np.sort(x, axis=0)[::-1]</strong></p>\n</li>\n</ul>\n<h4 id=\"예시\"><a href=\"#예시\" class=\"headerlink\" title=\"예시\"></a>예시</h4><hr>\n<ol>\n<li><p><strong><code>np.sort(x)</code></strong></p>\n<p>x = np.array([3,5,1]) <strong>— 정렬 후 —&gt;</strong> array([1,3,5])</p>\n</li>\n<li><p><strong><code>np.sort(x)[::-1]</code></strong> , <strong><code>x[np.argsort(-x)]</code></strong></p>\n<p>x = np.array([3,5,1]) <strong>— 정렬 후 —&gt;</strong> array([5,3,1])</p>\n</li>\n<li><p><strong><code>np.sort(x, axis=1)</code></strong></p>\n<p>x = np.array([3, 5, 1],                            array([1, 3, 5],</p>\n<p>​                       [2, 6, 3], <strong>— 정렬 후 —&gt;</strong>            [2, 3, 6],</p>\n<p>​                       [8, 3, 7])                                     [3, 7, 8])</p>\n</li>\n<li><p><strong><code>np.sort(x, axis=0)</code></strong></p>\n<p>x = np.array([3, 5, 1],                            array([2, 3, 1],</p>\n<p>​                       [2, 6, 3], <strong>— 정렬 후 —&gt;</strong>            [3, 5, 3],</p>\n<p>​                       [8, 3, 7])                                     [8, 6, 7])</p>\n</li>\n<li><p><strong><code>np.sort(x, axis=0)[::-1]</code></strong></p>\n<p>x = np.array([3, 5, 1],                            array([8, 6, 7],</p>\n<p>​                       [2, 6, 3], <strong>— 정렬 후 —&gt;</strong>            [3, 5, 3],</p>\n<p>​                       [8, 3, 7])                                     [2, 3, 1])</p>\n</li>\n</ol>\n<hr>\n<h3 id=\"x-sort-와-np-sort-x-의-차이점\"><a href=\"#x-sort-와-np-sort-x-의-차이점\" class=\"headerlink\" title=\"x.sort()와 np.sort(x)의 차이점\"></a><strong>x.sort()와 np.sort(x)의 차이점</strong></h3><p> np.sort(x)는 원래 배열은 그대로, 정렬 결과의 복사본을 반환한다. </p>\n<p> x.sort()는 배열 자체를 정렬한다.</p>\n<h4 id=\"다음-과제\"><a href=\"#다음-과제\" class=\"headerlink\" title=\"다음 과제\"></a><strong>다음 과제</strong></h4><p>DataFrame, Tuple 정렬, List 정렬 </p>\n<p><a href=\"https://rfriend.tistory.com/357\">참고</a></p>\n"},{"title":"[파이썬] 올림, 내림, 반올림","dates":"2020-08-26T17:01:00.000Z","_content":"\n\n\n**올림: ceil**\n\n**내림: floor**\n\n**반올림: round**\n\n\n\n예시\n\n```python\nimport math\n\nprint(math.ceil(100/33)) # 4\nprint(math.ceil(0.3)) # 1\n\nprint(math.floor(100/33)) # 3\nprint(math.floor(0.6)) # 0\n\nprint(round(98/6)) #16 (몫: 16 나머지: 2 -> 나머지가 6의 반인 3보다 작은 값이기 때문에 내림 !)\nprint(round(100/6)) # 17 (몫: 16 나머지: 4 -> 나머지가 6의 반인 3보다 큰 값이기 때문에 올림!)\nprint(round(0.6)) # 1\n```\n\n\n\n","source":"_posts/python-ceil.md","raw":"---\ntitle: \"[파이썬] 올림, 내림, 반올림\"\ndates: 2020-08-27 02:01:00\ntag: 파이썬\n---\n\n\n\n**올림: ceil**\n\n**내림: floor**\n\n**반올림: round**\n\n\n\n예시\n\n```python\nimport math\n\nprint(math.ceil(100/33)) # 4\nprint(math.ceil(0.3)) # 1\n\nprint(math.floor(100/33)) # 3\nprint(math.floor(0.6)) # 0\n\nprint(round(98/6)) #16 (몫: 16 나머지: 2 -> 나머지가 6의 반인 3보다 작은 값이기 때문에 내림 !)\nprint(round(100/6)) # 17 (몫: 16 나머지: 4 -> 나머지가 6의 반인 3보다 큰 값이기 때문에 올림!)\nprint(round(0.6)) # 1\n```\n\n\n\n","slug":"python-ceil","published":1,"date":"2021-02-08T18:24:53.722Z","updated":"2021-02-08T18:24:53.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kn002vf9c9gu42cst3","content":"<p><strong>올림: ceil</strong></p>\n<p><strong>내림: floor</strong></p>\n<p><strong>반올림: round</strong></p>\n<p>예시</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">print(math.ceil(<span class=\"number\">100</span>/<span class=\"number\">33</span>)) <span class=\"comment\"># 4</span></span><br><span class=\"line\">print(math.ceil(<span class=\"number\">0.3</span>)) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(math.floor(<span class=\"number\">100</span>/<span class=\"number\">33</span>)) <span class=\"comment\"># 3</span></span><br><span class=\"line\">print(math.floor(<span class=\"number\">0.6</span>)) <span class=\"comment\"># 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"built_in\">round</span>(<span class=\"number\">98</span>/<span class=\"number\">6</span>)) <span class=\"comment\">#16 (몫: 16 나머지: 2 -&gt; 나머지가 6의 반인 3보다 작은 값이기 때문에 내림 !)</span></span><br><span class=\"line\">print(<span class=\"built_in\">round</span>(<span class=\"number\">100</span>/<span class=\"number\">6</span>)) <span class=\"comment\"># 17 (몫: 16 나머지: 4 -&gt; 나머지가 6의 반인 3보다 큰 값이기 때문에 올림!)</span></span><br><span class=\"line\">print(<span class=\"built_in\">round</span>(<span class=\"number\">0.6</span>)) <span class=\"comment\"># 1</span></span><br></pre></td></tr></table></figure>\n\n\n","site":{"data":{}},"excerpt":"","more":"<p><strong>올림: ceil</strong></p>\n<p><strong>내림: floor</strong></p>\n<p><strong>반올림: round</strong></p>\n<p>예시</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"></span><br><span class=\"line\">print(math.ceil(<span class=\"number\">100</span>/<span class=\"number\">33</span>)) <span class=\"comment\"># 4</span></span><br><span class=\"line\">print(math.ceil(<span class=\"number\">0.3</span>)) <span class=\"comment\"># 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(math.floor(<span class=\"number\">100</span>/<span class=\"number\">33</span>)) <span class=\"comment\"># 3</span></span><br><span class=\"line\">print(math.floor(<span class=\"number\">0.6</span>)) <span class=\"comment\"># 0</span></span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"built_in\">round</span>(<span class=\"number\">98</span>/<span class=\"number\">6</span>)) <span class=\"comment\">#16 (몫: 16 나머지: 2 -&gt; 나머지가 6의 반인 3보다 작은 값이기 때문에 내림 !)</span></span><br><span class=\"line\">print(<span class=\"built_in\">round</span>(<span class=\"number\">100</span>/<span class=\"number\">6</span>)) <span class=\"comment\"># 17 (몫: 16 나머지: 4 -&gt; 나머지가 6의 반인 3보다 큰 값이기 때문에 올림!)</span></span><br><span class=\"line\">print(<span class=\"built_in\">round</span>(<span class=\"number\">0.6</span>)) <span class=\"comment\"># 1</span></span><br></pre></td></tr></table></figure>\n\n\n"},{"title":"[파이썬] 조합(combinations)을 사용하여 리스트에 있는 값들의 모든 조합 구하기","date":"2020-05-05T05:54:00.000Z","_content":"\n> 정의\n\n- **Combinations** **(조합 nCr)** : 하나의 리스트에서 모든 조합을 계산해야할 때 사용한다.\n\n- Permutations (순열 nPr) 과의 차이\n\n  순열은 순서가 바뀐 경우도 포함하고, 조합은 순서가 바뀐 경우는 포함하지 않는다(순서 상관 없음).\n\n  예를 들어 1,2,3 으로 이루어진 리스트에서 순열은 (1,2),(1,3),(2,3),(2,1),(3,1),(3,2) 조합은 (1,2),(1,3),(2,3) 이다.\n\n\n\n> 사용 방법\n\n```python\nfrom itertools import combinations # itertools 중 combinations를 import\n\nitems = ['1','2','3']\nc = list(combinations(items,2)) # 2가지 조합으로 이루어질 수 있는 모든 경우의 수를 list로 만든다.\nprint(list(c))\n# [(1,2), (1,3), (2,3)]\n```\n\n","source":"_posts/python-combinations.md","raw":"---\ntitle: \"[파이썬] 조합(combinations)을 사용하여 리스트에 있는 값들의 모든 조합 구하기\"\ndate: 2020-05-05 14:54:00\ntags: 파이썬\n---\n\n> 정의\n\n- **Combinations** **(조합 nCr)** : 하나의 리스트에서 모든 조합을 계산해야할 때 사용한다.\n\n- Permutations (순열 nPr) 과의 차이\n\n  순열은 순서가 바뀐 경우도 포함하고, 조합은 순서가 바뀐 경우는 포함하지 않는다(순서 상관 없음).\n\n  예를 들어 1,2,3 으로 이루어진 리스트에서 순열은 (1,2),(1,3),(2,3),(2,1),(3,1),(3,2) 조합은 (1,2),(1,3),(2,3) 이다.\n\n\n\n> 사용 방법\n\n```python\nfrom itertools import combinations # itertools 중 combinations를 import\n\nitems = ['1','2','3']\nc = list(combinations(items,2)) # 2가지 조합으로 이루어질 수 있는 모든 경우의 수를 list로 만든다.\nprint(list(c))\n# [(1,2), (1,3), (2,3)]\n```\n\n","slug":"python-combinations","published":1,"updated":"2021-02-08T18:24:53.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0ko002yf9c90v89f5il","content":"<blockquote>\n<p>정의</p>\n</blockquote>\n<ul>\n<li><p><strong>Combinations</strong> <strong>(조합 nCr)</strong> : 하나의 리스트에서 모든 조합을 계산해야할 때 사용한다.</p>\n</li>\n<li><p>Permutations (순열 nPr) 과의 차이</p>\n<p>순열은 순서가 바뀐 경우도 포함하고, 조합은 순서가 바뀐 경우는 포함하지 않는다(순서 상관 없음).</p>\n<p>예를 들어 1,2,3 으로 이루어진 리스트에서 순열은 (1,2),(1,3),(2,3),(2,1),(3,1),(3,2) 조합은 (1,2),(1,3),(2,3) 이다.</p>\n</li>\n</ul>\n<blockquote>\n<p>사용 방법</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations <span class=\"comment\"># itertools 중 combinations를 import</span></span><br><span class=\"line\"></span><br><span class=\"line\">items = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>]</span><br><span class=\"line\">c = <span class=\"built_in\">list</span>(combinations(items,<span class=\"number\">2</span>)) <span class=\"comment\"># 2가지 조합으로 이루어질 수 있는 모든 경우의 수를 list로 만든다.</span></span><br><span class=\"line\">print(<span class=\"built_in\">list</span>(c))</span><br><span class=\"line\"><span class=\"comment\"># [(1,2), (1,3), (2,3)]</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>정의</p>\n</blockquote>\n<ul>\n<li><p><strong>Combinations</strong> <strong>(조합 nCr)</strong> : 하나의 리스트에서 모든 조합을 계산해야할 때 사용한다.</p>\n</li>\n<li><p>Permutations (순열 nPr) 과의 차이</p>\n<p>순열은 순서가 바뀐 경우도 포함하고, 조합은 순서가 바뀐 경우는 포함하지 않는다(순서 상관 없음).</p>\n<p>예를 들어 1,2,3 으로 이루어진 리스트에서 순열은 (1,2),(1,3),(2,3),(2,1),(3,1),(3,2) 조합은 (1,2),(1,3),(2,3) 이다.</p>\n</li>\n</ul>\n<blockquote>\n<p>사용 방법</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> itertools <span class=\"keyword\">import</span> combinations <span class=\"comment\"># itertools 중 combinations를 import</span></span><br><span class=\"line\"></span><br><span class=\"line\">items = [<span class=\"string\">&#x27;1&#x27;</span>,<span class=\"string\">&#x27;2&#x27;</span>,<span class=\"string\">&#x27;3&#x27;</span>]</span><br><span class=\"line\">c = <span class=\"built_in\">list</span>(combinations(items,<span class=\"number\">2</span>)) <span class=\"comment\"># 2가지 조합으로 이루어질 수 있는 모든 경우의 수를 list로 만든다.</span></span><br><span class=\"line\">print(<span class=\"built_in\">list</span>(c))</span><br><span class=\"line\"><span class=\"comment\"># [(1,2), (1,3), (2,3)]</span></span><br></pre></td></tr></table></figure>\n"},{"title":"[파이썬] heapq 모듈","date":"2020-08-27T09:12:00.000Z","_content":"\n>  heapq 모듈에 대해 간략히 알아보자 ! \n\n\n\n### Heap 이란 ? \n\n힙(heap)은 최댓값 및 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 완전이진트리(complete binary tree)를 기본으로 한 자료구조(tree-based structure)로서 다음과 같은 힙 속성(property)을 만족한다.\n\n- A가 B의 부모노드(parent node)이면, A의 키(key)값과 B의 키값 사이에는 대소관계가 성립한다.\n\n힙에는 두가지 종류가 있으며, 부모노드의 키값이 자식노드의 키값보다 항상 큰 힙을 '최대 힙', 부모노드의 키값이 자식노드의 키값보다 항상 작은 힙을 '최소 힙'이라고 부른다. 아래 사진은 **최대 힙**의 예시이다.\n\n\n\n<img src=\"../image/image-20200827173046492.png\" alt=\"image-20200827173046492\" style=\"zoom:50%;\" />\n\n출처 : [위키백과 '힙 (자료 구조)'](https://ko.wikipedia.org/wiki/%ED%9E%99_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0))\n\n\n\n## heapq\n\n**완전 이진트리 기반의 최소 힙 자료구조**이다. heapq의 첫번째 인덱스 값은 최소값이다.\n\n부모 노드의 key 값은 자식 노드의 key 값보다 작거나 같다.\n\nheapq 모듈은 큐 알고리즘이라고도 하는 힙(heap) 큐 알고리즘의 구현을 제공한다.\n\n### python에 쓰이는 heapq 코드 \n\n- ` import heapq ` : heapq 모듈을 사용하기 위해 써주어야한다.\n- `heapq.heapify(x)` : 값이 들어있는 리스트 x를 최소 힙으로 변환하는 코드이다. 이 때 주의할 점은 최소 힙을 만족시키는리스트가 아닌 최소 힙(리스트x)으로 변경된다는 사실이다.\n- `heapq.heappush(heap, item)` : item 값을 힙으로 푸시한다.\n- `heapq.heappushpop(heap, item)` : 힙에 item을 푸시한 다음, heap에서 가장 작은 항목을 팝하고 반환한다. ( `heapq.heappush(heap)` => `heapq.heappop(heap)`)\n- `heapq.heapreplace(heap, item)` : heap에서 가장 작은 항목을 팝하고 반환하며, 새로운 item도 푸시한다. heap 이 비어있을 시에 IndexError가 발생한다. ( `heapq.heappop(heap)` => `heapq.heappush(heap)`)\n\n주의할 점 ! sort 와 달리 전체를 정렬하는 것이 아니므로 맨앞의 값이 최소값인 것은 확실하지만 두번째 값이 두번째로 작은 값임은 확신할 수 없다. \n\n이 경우 heapq.heappop(heap)을 한 다음 heap[0] 으로 접근한다.\n\n\n\n참고: https://python.flowdas.com/library/heapq.html \n\n","source":"_posts/python-heapq.md","raw":"---\ntitle: \"[파이썬] heapq 모듈\"\ndate: 2020-08-27 18:12:00\ntags: 파이썬\n---\n\n>  heapq 모듈에 대해 간략히 알아보자 ! \n\n\n\n### Heap 이란 ? \n\n힙(heap)은 최댓값 및 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 완전이진트리(complete binary tree)를 기본으로 한 자료구조(tree-based structure)로서 다음과 같은 힙 속성(property)을 만족한다.\n\n- A가 B의 부모노드(parent node)이면, A의 키(key)값과 B의 키값 사이에는 대소관계가 성립한다.\n\n힙에는 두가지 종류가 있으며, 부모노드의 키값이 자식노드의 키값보다 항상 큰 힙을 '최대 힙', 부모노드의 키값이 자식노드의 키값보다 항상 작은 힙을 '최소 힙'이라고 부른다. 아래 사진은 **최대 힙**의 예시이다.\n\n\n\n<img src=\"../image/image-20200827173046492.png\" alt=\"image-20200827173046492\" style=\"zoom:50%;\" />\n\n출처 : [위키백과 '힙 (자료 구조)'](https://ko.wikipedia.org/wiki/%ED%9E%99_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0))\n\n\n\n## heapq\n\n**완전 이진트리 기반의 최소 힙 자료구조**이다. heapq의 첫번째 인덱스 값은 최소값이다.\n\n부모 노드의 key 값은 자식 노드의 key 값보다 작거나 같다.\n\nheapq 모듈은 큐 알고리즘이라고도 하는 힙(heap) 큐 알고리즘의 구현을 제공한다.\n\n### python에 쓰이는 heapq 코드 \n\n- ` import heapq ` : heapq 모듈을 사용하기 위해 써주어야한다.\n- `heapq.heapify(x)` : 값이 들어있는 리스트 x를 최소 힙으로 변환하는 코드이다. 이 때 주의할 점은 최소 힙을 만족시키는리스트가 아닌 최소 힙(리스트x)으로 변경된다는 사실이다.\n- `heapq.heappush(heap, item)` : item 값을 힙으로 푸시한다.\n- `heapq.heappushpop(heap, item)` : 힙에 item을 푸시한 다음, heap에서 가장 작은 항목을 팝하고 반환한다. ( `heapq.heappush(heap)` => `heapq.heappop(heap)`)\n- `heapq.heapreplace(heap, item)` : heap에서 가장 작은 항목을 팝하고 반환하며, 새로운 item도 푸시한다. heap 이 비어있을 시에 IndexError가 발생한다. ( `heapq.heappop(heap)` => `heapq.heappush(heap)`)\n\n주의할 점 ! sort 와 달리 전체를 정렬하는 것이 아니므로 맨앞의 값이 최소값인 것은 확실하지만 두번째 값이 두번째로 작은 값임은 확신할 수 없다. \n\n이 경우 heapq.heappop(heap)을 한 다음 heap[0] 으로 접근한다.\n\n\n\n참고: https://python.flowdas.com/library/heapq.html \n\n","slug":"python-heapq","published":1,"updated":"2021-02-08T18:24:53.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0ko0030f9c96nqp05el","content":"<blockquote>\n<p> heapq 모듈에 대해 간략히 알아보자 ! </p>\n</blockquote>\n<h3 id=\"Heap-이란\"><a href=\"#Heap-이란\" class=\"headerlink\" title=\"Heap 이란 ?\"></a>Heap 이란 ?</h3><p>힙(heap)은 최댓값 및 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 완전이진트리(complete binary tree)를 기본으로 한 자료구조(tree-based structure)로서 다음과 같은 힙 속성(property)을 만족한다.</p>\n<ul>\n<li>A가 B의 부모노드(parent node)이면, A의 키(key)값과 B의 키값 사이에는 대소관계가 성립한다.</li>\n</ul>\n<p>힙에는 두가지 종류가 있으며, 부모노드의 키값이 자식노드의 키값보다 항상 큰 힙을 ‘최대 힙’, 부모노드의 키값이 자식노드의 키값보다 항상 작은 힙을 ‘최소 힙’이라고 부른다. 아래 사진은 <strong>최대 힙</strong>의 예시이다.</p>\n<img src=\"../image/image-20200827173046492.png\" alt=\"image-20200827173046492\" style=\"zoom:50%;\" />\n\n<p>출처 : <a href=\"https://ko.wikipedia.org/wiki/%ED%9E%99_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)\">위키백과 ‘힙 (자료 구조)’</a></p>\n<h2 id=\"heapq\"><a href=\"#heapq\" class=\"headerlink\" title=\"heapq\"></a>heapq</h2><p><strong>완전 이진트리 기반의 최소 힙 자료구조</strong>이다. heapq의 첫번째 인덱스 값은 최소값이다.</p>\n<p>부모 노드의 key 값은 자식 노드의 key 값보다 작거나 같다.</p>\n<p>heapq 모듈은 큐 알고리즘이라고도 하는 힙(heap) 큐 알고리즘의 구현을 제공한다.</p>\n<h3 id=\"python에-쓰이는-heapq-코드\"><a href=\"#python에-쓰이는-heapq-코드\" class=\"headerlink\" title=\"python에 쓰이는 heapq 코드\"></a>python에 쓰이는 heapq 코드</h3><ul>\n<li><code>import heapq</code> : heapq 모듈을 사용하기 위해 써주어야한다.</li>\n<li><code>heapq.heapify(x)</code> : 값이 들어있는 리스트 x를 최소 힙으로 변환하는 코드이다. 이 때 주의할 점은 최소 힙을 만족시키는리스트가 아닌 최소 힙(리스트x)으로 변경된다는 사실이다.</li>\n<li><code>heapq.heappush(heap, item)</code> : item 값을 힙으로 푸시한다.</li>\n<li><code>heapq.heappushpop(heap, item)</code> : 힙에 item을 푸시한 다음, heap에서 가장 작은 항목을 팝하고 반환한다. ( <code>heapq.heappush(heap)</code> =&gt; <code>heapq.heappop(heap)</code>)</li>\n<li><code>heapq.heapreplace(heap, item)</code> : heap에서 가장 작은 항목을 팝하고 반환하며, 새로운 item도 푸시한다. heap 이 비어있을 시에 IndexError가 발생한다. ( <code>heapq.heappop(heap)</code> =&gt; <code>heapq.heappush(heap)</code>)</li>\n</ul>\n<p>주의할 점 ! sort 와 달리 전체를 정렬하는 것이 아니므로 맨앞의 값이 최소값인 것은 확실하지만 두번째 값이 두번째로 작은 값임은 확신할 수 없다. </p>\n<p>이 경우 heapq.heappop(heap)을 한 다음 heap[0] 으로 접근한다.</p>\n<p>참고: <a href=\"https://python.flowdas.com/library/heapq.html\">https://python.flowdas.com/library/heapq.html</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p> heapq 모듈에 대해 간략히 알아보자 ! </p>\n</blockquote>\n<h3 id=\"Heap-이란\"><a href=\"#Heap-이란\" class=\"headerlink\" title=\"Heap 이란 ?\"></a>Heap 이란 ?</h3><p>힙(heap)은 최댓값 및 최솟값을 찾아내는 연산을 빠르게 하기 위해 고안된 완전이진트리(complete binary tree)를 기본으로 한 자료구조(tree-based structure)로서 다음과 같은 힙 속성(property)을 만족한다.</p>\n<ul>\n<li>A가 B의 부모노드(parent node)이면, A의 키(key)값과 B의 키값 사이에는 대소관계가 성립한다.</li>\n</ul>\n<p>힙에는 두가지 종류가 있으며, 부모노드의 키값이 자식노드의 키값보다 항상 큰 힙을 ‘최대 힙’, 부모노드의 키값이 자식노드의 키값보다 항상 작은 힙을 ‘최소 힙’이라고 부른다. 아래 사진은 <strong>최대 힙</strong>의 예시이다.</p>\n<img src=\"../image/image-20200827173046492.png\" alt=\"image-20200827173046492\" style=\"zoom:50%;\" />\n\n<p>출처 : <a href=\"https://ko.wikipedia.org/wiki/%ED%9E%99_(%EC%9E%90%EB%A3%8C_%EA%B5%AC%EC%A1%B0)\">위키백과 ‘힙 (자료 구조)’</a></p>\n<h2 id=\"heapq\"><a href=\"#heapq\" class=\"headerlink\" title=\"heapq\"></a>heapq</h2><p><strong>완전 이진트리 기반의 최소 힙 자료구조</strong>이다. heapq의 첫번째 인덱스 값은 최소값이다.</p>\n<p>부모 노드의 key 값은 자식 노드의 key 값보다 작거나 같다.</p>\n<p>heapq 모듈은 큐 알고리즘이라고도 하는 힙(heap) 큐 알고리즘의 구현을 제공한다.</p>\n<h3 id=\"python에-쓰이는-heapq-코드\"><a href=\"#python에-쓰이는-heapq-코드\" class=\"headerlink\" title=\"python에 쓰이는 heapq 코드\"></a>python에 쓰이는 heapq 코드</h3><ul>\n<li><code>import heapq</code> : heapq 모듈을 사용하기 위해 써주어야한다.</li>\n<li><code>heapq.heapify(x)</code> : 값이 들어있는 리스트 x를 최소 힙으로 변환하는 코드이다. 이 때 주의할 점은 최소 힙을 만족시키는리스트가 아닌 최소 힙(리스트x)으로 변경된다는 사실이다.</li>\n<li><code>heapq.heappush(heap, item)</code> : item 값을 힙으로 푸시한다.</li>\n<li><code>heapq.heappushpop(heap, item)</code> : 힙에 item을 푸시한 다음, heap에서 가장 작은 항목을 팝하고 반환한다. ( <code>heapq.heappush(heap)</code> =&gt; <code>heapq.heappop(heap)</code>)</li>\n<li><code>heapq.heapreplace(heap, item)</code> : heap에서 가장 작은 항목을 팝하고 반환하며, 새로운 item도 푸시한다. heap 이 비어있을 시에 IndexError가 발생한다. ( <code>heapq.heappop(heap)</code> =&gt; <code>heapq.heappush(heap)</code>)</li>\n</ul>\n<p>주의할 점 ! sort 와 달리 전체를 정렬하는 것이 아니므로 맨앞의 값이 최소값인 것은 확실하지만 두번째 값이 두번째로 작은 값임은 확신할 수 없다. </p>\n<p>이 경우 heapq.heappop(heap)을 한 다음 heap[0] 으로 접근한다.</p>\n<p>참고: <a href=\"https://python.flowdas.com/library/heapq.html\">https://python.flowdas.com/library/heapq.html</a> </p>\n"},{"title":"[파이썬] 문자열 인덱싱 및 잘라내기","date":"2020-03-07T07:14:00.000Z","_content":"\n> 문자열 잘라내기\n\n\n\n'hello world' 에서 일부만 자르고 싶을 때, \n\n```python\n>>> a = 'hello world'\n>>> a[0:5]\n'hello'\n>>> a[6:11]\n'world'\n```\n\n`a[0:5]` 와 `a[:5]` 는 같은 문자열('hello')을 출력한다.\n\n또한\n\n`a[6:11]` 과 `a[6:]` 또한 같은 문자열('world')을 출력한다.\n\n\n\n> 음수 인덱싱\n\n```python\n>>> a[6:-2]\n'wor'\n```\n\n`a[6:-2]`에서 `-2`는 뒤에서 2번째까지 잘라내겠다는 것을 의미한다 따라서 맨 뒤에 문자 ld가 잘린것을 볼 수 있다.\n\n\n\n[참고](https://wikidocs.net/2838)","source":"_posts/python-indexing-slicing.md","raw":"---\ntitle: \"[파이썬] 문자열 인덱싱 및 잘라내기\"\ndate: 2020-03-07 16:14:00\ntags: 파이썬\n---\n\n> 문자열 잘라내기\n\n\n\n'hello world' 에서 일부만 자르고 싶을 때, \n\n```python\n>>> a = 'hello world'\n>>> a[0:5]\n'hello'\n>>> a[6:11]\n'world'\n```\n\n`a[0:5]` 와 `a[:5]` 는 같은 문자열('hello')을 출력한다.\n\n또한\n\n`a[6:11]` 과 `a[6:]` 또한 같은 문자열('world')을 출력한다.\n\n\n\n> 음수 인덱싱\n\n```python\n>>> a[6:-2]\n'wor'\n```\n\n`a[6:-2]`에서 `-2`는 뒤에서 2번째까지 잘라내겠다는 것을 의미한다 따라서 맨 뒤에 문자 ld가 잘린것을 볼 수 있다.\n\n\n\n[참고](https://wikidocs.net/2838)","slug":"python-indexing-slicing","published":1,"updated":"2021-02-08T18:24:53.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kp0033f9c9f0mp95gs","content":"<blockquote>\n<p>문자열 잘라내기</p>\n</blockquote>\n<p>‘hello world’ 에서 일부만 자르고 싶을 때, </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">6</span>:<span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>a[0:5]</code> 와 <code>a[:5]</code> 는 같은 문자열(‘hello’)을 출력한다.</p>\n<p>또한</p>\n<p><code>a[6:11]</code> 과 <code>a[6:]</code> 또한 같은 문자열(‘world’)을 출력한다.</p>\n<blockquote>\n<p>음수 인덱싱</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">6</span>:-<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;wor&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>a[6:-2]</code>에서 <code>-2</code>는 뒤에서 2번째까지 잘라내겠다는 것을 의미한다 따라서 맨 뒤에 문자 ld가 잘린것을 볼 수 있다.</p>\n<p><a href=\"https://wikidocs.net/2838\">참고</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>문자열 잘라내기</p>\n</blockquote>\n<p>‘hello world’ 에서 일부만 자르고 싶을 때, </p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = <span class=\"string\">&#x27;hello world&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">0</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;hello&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">6</span>:<span class=\"number\">11</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;world&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>a[0:5]</code> 와 <code>a[:5]</code> 는 같은 문자열(‘hello’)을 출력한다.</p>\n<p>또한</p>\n<p><code>a[6:11]</code> 과 <code>a[6:]</code> 또한 같은 문자열(‘world’)을 출력한다.</p>\n<blockquote>\n<p>음수 인덱싱</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a[<span class=\"number\">6</span>:-<span class=\"number\">2</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;wor&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>a[6:-2]</code>에서 <code>-2</code>는 뒤에서 2번째까지 잘라내겠다는 것을 의미한다 따라서 맨 뒤에 문자 ld가 잘린것을 볼 수 있다.</p>\n<p><a href=\"https://wikidocs.net/2838\">참고</a></p>\n"},{"title":"[파이썬] for _ in range(n)","date":"2020-03-23T12:57:00.000Z","_content":"\n\n\n### 언더스코어(_)\n\n크게 다섯가지의 상황에서 사용된다.\n\n- 인터프리터(Interpreter)에서 마지막 값을 저장할 때\n- 값을 무시하고 싶을 때 (흔히 “I don’t care”라고 부른다.)\n- 변수나 함수명에 특별한 의미 또는 기능을 부여하고자 할 때\n- 국제화(Internationalization, i18n)/지역화(Localization, l10n) 함수로써 사용할 때\n- 숫자 리터럴값의 자릿수 구분을 위한 구분자로써 사용할 때\n\n\n\n여기서 for _ in range(n) 은 2번째 경우인 값을 무시하고 싶을 때 쓰인 경우이다.\n\n인덱스가 필요하지 않을 때 간단히 쓰인다.","source":"_posts/python-underbar.md","raw":"---\ntitle: \"[파이썬] for _ in range(n)\"\ndate: 2020-03-23 21:57:00\ntags: 파이썬\n---\n\n\n\n### 언더스코어(_)\n\n크게 다섯가지의 상황에서 사용된다.\n\n- 인터프리터(Interpreter)에서 마지막 값을 저장할 때\n- 값을 무시하고 싶을 때 (흔히 “I don’t care”라고 부른다.)\n- 변수나 함수명에 특별한 의미 또는 기능을 부여하고자 할 때\n- 국제화(Internationalization, i18n)/지역화(Localization, l10n) 함수로써 사용할 때\n- 숫자 리터럴값의 자릿수 구분을 위한 구분자로써 사용할 때\n\n\n\n여기서 for _ in range(n) 은 2번째 경우인 값을 무시하고 싶을 때 쓰인 경우이다.\n\n인덱스가 필요하지 않을 때 간단히 쓰인다.","slug":"python-underbar","published":1,"updated":"2021-02-08T18:24:53.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kq0035f9c91e53cjet","content":"<h3 id=\"언더스코어\"><a href=\"#언더스코어\" class=\"headerlink\" title=\"언더스코어(_)\"></a>언더스코어(_)</h3><p>크게 다섯가지의 상황에서 사용된다.</p>\n<ul>\n<li>인터프리터(Interpreter)에서 마지막 값을 저장할 때</li>\n<li>값을 무시하고 싶을 때 (흔히 “I don’t care”라고 부른다.)</li>\n<li>변수나 함수명에 특별한 의미 또는 기능을 부여하고자 할 때</li>\n<li>국제화(Internationalization, i18n)/지역화(Localization, l10n) 함수로써 사용할 때</li>\n<li>숫자 리터럴값의 자릿수 구분을 위한 구분자로써 사용할 때</li>\n</ul>\n<p>여기서 for _ in range(n) 은 2번째 경우인 값을 무시하고 싶을 때 쓰인 경우이다.</p>\n<p>인덱스가 필요하지 않을 때 간단히 쓰인다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"언더스코어\"><a href=\"#언더스코어\" class=\"headerlink\" title=\"언더스코어(_)\"></a>언더스코어(_)</h3><p>크게 다섯가지의 상황에서 사용된다.</p>\n<ul>\n<li>인터프리터(Interpreter)에서 마지막 값을 저장할 때</li>\n<li>값을 무시하고 싶을 때 (흔히 “I don’t care”라고 부른다.)</li>\n<li>변수나 함수명에 특별한 의미 또는 기능을 부여하고자 할 때</li>\n<li>국제화(Internationalization, i18n)/지역화(Localization, l10n) 함수로써 사용할 때</li>\n<li>숫자 리터럴값의 자릿수 구분을 위한 구분자로써 사용할 때</li>\n</ul>\n<p>여기서 for _ in range(n) 은 2번째 경우인 값을 무시하고 싶을 때 쓰인 경우이다.</p>\n<p>인덱스가 필요하지 않을 때 간단히 쓰인다.</p>\n"},{"title":"[SW Expert Academy] 2043. 서랍의 비밀번호 (파이썬)","date":"2020-12-29T16:00:00.000Z","_content":"\n# 문제 \n\n서랍의 비밀번호가 생각이 나지 않는다.\n\n비밀번호 P는 000부터 999까지 번호 중의 하나이다.\n\n주어지는 번호 K부터 1씩 증가하며 비밀번호를 확인해 볼 생각이다.\n\n예를 들어 비밀번호 P가 123 이고 주어지는 번호 K가 100 일 때, 100부터 123까지 24번 확인하여 비밀번호를 맞출 수 있다.\n\nP와 K가 주어지면 K부터 시작하여 몇 번 만에 P를 맞출 수 있는지 알아보자.\n\n<br>\n\n**[입력]**\n\n입력으로 P와 K가 빈 칸을 사이로 주어진다.\n\n\n**[출력]**\n\n몇 번 만에 비밀번호를 맞출 수 있는지 출력한다.\n\n<br>\n\n**입력 예시**\n\n```\n123 100\n```\n\n**출력 예시**\n\n```\n24\n```\n\n<br>\n\n# 풀이\n\nSW Expert Academy 모의 테스트 방식에 익숙해지려고 풀어봤다.\n\n**풀이 1**\n\n```python\nP, K = map(int, input().split())\nprint(P - K + 1)\n```\n\n<br>\n\n**풀이 2**\n\n```python\nP, K = map(int, input().split())\ncount = 0\n\nfor i in range(K, P+1):\n    count += 1\n    if i == P:\n        print(count)\n        break\n```","source":"_posts/swea-2043.md","raw":"---\ntitle: \"[SW Expert Academy] 2043. 서랍의 비밀번호 (파이썬)\"\ndate: 2020-12-30 1:00:00\ntag: 알고리즘\n---\n\n# 문제 \n\n서랍의 비밀번호가 생각이 나지 않는다.\n\n비밀번호 P는 000부터 999까지 번호 중의 하나이다.\n\n주어지는 번호 K부터 1씩 증가하며 비밀번호를 확인해 볼 생각이다.\n\n예를 들어 비밀번호 P가 123 이고 주어지는 번호 K가 100 일 때, 100부터 123까지 24번 확인하여 비밀번호를 맞출 수 있다.\n\nP와 K가 주어지면 K부터 시작하여 몇 번 만에 P를 맞출 수 있는지 알아보자.\n\n<br>\n\n**[입력]**\n\n입력으로 P와 K가 빈 칸을 사이로 주어진다.\n\n\n**[출력]**\n\n몇 번 만에 비밀번호를 맞출 수 있는지 출력한다.\n\n<br>\n\n**입력 예시**\n\n```\n123 100\n```\n\n**출력 예시**\n\n```\n24\n```\n\n<br>\n\n# 풀이\n\nSW Expert Academy 모의 테스트 방식에 익숙해지려고 풀어봤다.\n\n**풀이 1**\n\n```python\nP, K = map(int, input().split())\nprint(P - K + 1)\n```\n\n<br>\n\n**풀이 2**\n\n```python\nP, K = map(int, input().split())\ncount = 0\n\nfor i in range(K, P+1):\n    count += 1\n    if i == P:\n        print(count)\n        break\n```","slug":"swea-2043","published":1,"updated":"2021-02-08T18:24:53.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kr0038f9c9h28h0hns","content":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>서랍의 비밀번호가 생각이 나지 않는다.</p>\n<p>비밀번호 P는 000부터 999까지 번호 중의 하나이다.</p>\n<p>주어지는 번호 K부터 1씩 증가하며 비밀번호를 확인해 볼 생각이다.</p>\n<p>예를 들어 비밀번호 P가 123 이고 주어지는 번호 K가 100 일 때, 100부터 123까지 24번 확인하여 비밀번호를 맞출 수 있다.</p>\n<p>P와 K가 주어지면 K부터 시작하여 몇 번 만에 P를 맞출 수 있는지 알아보자.</p>\n<br>\n\n<p><strong>[입력]</strong></p>\n<p>입력으로 P와 K가 빈 칸을 사이로 주어진다.</p>\n<p><strong>[출력]</strong></p>\n<p>몇 번 만에 비밀번호를 맞출 수 있는지 출력한다.</p>\n<br>\n\n<p><strong>입력 예시</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123 100</span><br></pre></td></tr></table></figure>\n<p><strong>출력 예시</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">24</span><br></pre></td></tr></table></figure>\n<br>\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>SW Expert Academy 모의 테스트 방식에 익숙해지려고 풀어봤다.</p>\n<p><strong>풀이 1</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P, K = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">print(P - K + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<p><strong>풀이 2</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P, K = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(K, P+<span class=\"number\">1</span>):</span><br><span class=\"line\">    count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == P:</span><br><span class=\"line\">        print(count)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"문제\"><a href=\"#문제\" class=\"headerlink\" title=\"문제\"></a>문제</h1><p>서랍의 비밀번호가 생각이 나지 않는다.</p>\n<p>비밀번호 P는 000부터 999까지 번호 중의 하나이다.</p>\n<p>주어지는 번호 K부터 1씩 증가하며 비밀번호를 확인해 볼 생각이다.</p>\n<p>예를 들어 비밀번호 P가 123 이고 주어지는 번호 K가 100 일 때, 100부터 123까지 24번 확인하여 비밀번호를 맞출 수 있다.</p>\n<p>P와 K가 주어지면 K부터 시작하여 몇 번 만에 P를 맞출 수 있는지 알아보자.</p>\n<br>\n\n<p><strong>[입력]</strong></p>\n<p>입력으로 P와 K가 빈 칸을 사이로 주어진다.</p>\n<p><strong>[출력]</strong></p>\n<p>몇 번 만에 비밀번호를 맞출 수 있는지 출력한다.</p>\n<br>\n\n<p><strong>입력 예시</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123 100</span><br></pre></td></tr></table></figure>\n<p><strong>출력 예시</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">24</span><br></pre></td></tr></table></figure>\n<br>\n\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><p>SW Expert Academy 모의 테스트 방식에 익숙해지려고 풀어봤다.</p>\n<p><strong>풀이 1</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P, K = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">print(P - K + <span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n<br>\n\n<p><strong>풀이 2</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P, K = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(K, P+<span class=\"number\">1</span>):</span><br><span class=\"line\">    count += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == P:</span><br><span class=\"line\">        print(count)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br></pre></td></tr></table></figure>"},{"title":"[SW Expert Academy] 1221: GNS (JAVA)","date":"2021-01-21T14:46:00.000Z","_content":"\n* 문제: https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14jJh6ACYCFAYD > 로그인\n\n# 풀이\n\n```java\npackage com.sohee.algo;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class Solution1221 {\nstatic String[] numbers = new String[]{\"ZRO\", \"ONE\", \"TWO\", \"THR\", \"FOR\", \"FIV\", \"SIX\", \"SVN\", \"EGT\", \"NIN\"};\n\tstatic int [] cnt;\n\tstatic String testCase;\n\tstatic int N;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// System.setIn(new FileInputStream(\"GNS_test_input.txt\")); \n\t\tBufferedReader br= new BufferedReader(new InputStreamReader(System.in));\n\t\tint T = stoi(br.readLine());\n\t\tfor(int t = 0; t < T; t++) {\n      cnt = new int[10];\n\t\t\t\n      StringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\ttestCase = st.nextToken();\n\t\t\tN = stoi(st.nextToken());\n\t\t\t\n\t\t\tStringTokenizer st2 = new StringTokenizer(br.readLine());\n\t\t\tcountNums(st2);\n\t\t\tprintNums();\t\n\t\t}\n\t}\n\n\tprivate static void countNums(StringTokenizer st) {\n\t\tfor (int i=0; i< N; i++) {\n\t\t\tString input = st.nextToken();\n\t\t\tif (input.equals(\"ZRO\")) cnt[0]++;\n\t\t\telse if (input.equals(\"ONE\")) cnt[1]++;\n\t\t\telse if (input.equals(\"TWO\")) cnt[2]++;\n\t\t\telse if (input.equals(\"THR\")) cnt[3]++;\n\t\t\telse if (input.equals(\"FOR\")) cnt[4]++;\n\t\t\telse if (input.equals(\"FIV\")) cnt[5]++;\n\t\t\telse if (input.equals(\"SIX\")) cnt[6]++;\n\t\t\telse if (input.equals(\"SVN\")) cnt[7]++;\n\t\t\telse if (input.equals(\"EGT\")) cnt[8]++;\n\t\t\telse if (input.equals(\"NIN\")) cnt[9]++;\n\t\t}\n\t}\n\n\tprivate static void printNums() {\n\t\tSystem.out.println(testCase+\" \");\n\t\tint now = 0; // 0 부터 시작\n\t\tfor (int num : cnt) {\n\t\t\twhile(num > 0) {\n\t\t\t\tSystem.out.print(numbers[now]+\" \");\n\t\t\t\tnum--;\n\t\t\t}\n\t\t\tnow++;\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tprivate static int stoi(String input) {\n\t\treturn Integer.valueOf(input);\n\t}\n}\n```\n\n* **input**은 아래와 같은 형식으로 들어온다.\n\n  ```java\n  2\n  #1 11\n  SVN FOR ZRO NIN FOR EGT EGT TWO FOR FIV FIV\n  #2 20\n  ONE SVN ONE ONE FIV TWO SVN SIX ONE FOR TWO THR TWO TWO ONE SIX EGT FIV SVN SIX\n  ```\n\n  이 때, **output(정답)**은 아래와 같다.\n\n  ```java\n  #1 \n  ZRO TWO FOR FOR FOR FIV FIV SVN EGT EGT NIN \n  #2 \n  ONE ONE ONE ONE ONE TWO TWO TWO TWO THR FOR FIV FIV SIX SIX SIX SVN SVN SVN EGT \n  ```\n\n* String  배열인 `numbers`를 행성에서 `0~9`로 사용되는 값인 `\"ZRO\", \"ONE\", \"TWO\", \"THR\", \"FOR\", \"FIV\", \"SIX\", \"SVN\", \"EGT\", \"NIN\"` 로 초기화한다.\n* `countNums() `: int 배열 `cnt`는 크기를 `10`으로 하고 input으로 들어오는 `ZRO` 부터 `NIN`까지 해당하는 값에 따라 해당 인덱스에 1씩 더한다.\n* `printNums()` : 먼저 `now` 는 `0~9` 를 의미하며 오름차순으로 `sort`해야하기 때문에 `0`부터 시작해 while문이 종료될 때마다 `1`씩 증가시켰다. for문에서는 `cnt` 배열에서 순서대로 count(`num`) 값을 받아오고, while문에서는 count값(`num`)을 하나씩 빼가며 모든 `now` 인덱스에 해당하는 `numbers` 객체를 출력(`num == 0`)한 후 종료 된다.","source":"_posts/swea-1221.md","raw":"---\ntitle: \"[SW Expert Academy] 1221: GNS (JAVA)\"\ndate: 2021-01-21 23:46:00\ntag: 알고리즘\n---\n\n* 문제: https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14jJh6ACYCFAYD > 로그인\n\n# 풀이\n\n```java\npackage com.sohee.algo;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.StringTokenizer;\n\npublic class Solution1221 {\nstatic String[] numbers = new String[]{\"ZRO\", \"ONE\", \"TWO\", \"THR\", \"FOR\", \"FIV\", \"SIX\", \"SVN\", \"EGT\", \"NIN\"};\n\tstatic int [] cnt;\n\tstatic String testCase;\n\tstatic int N;\n\n\tpublic static void main(String[] args) throws IOException {\n\t\t// System.setIn(new FileInputStream(\"GNS_test_input.txt\")); \n\t\tBufferedReader br= new BufferedReader(new InputStreamReader(System.in));\n\t\tint T = stoi(br.readLine());\n\t\tfor(int t = 0; t < T; t++) {\n      cnt = new int[10];\n\t\t\t\n      StringTokenizer st = new StringTokenizer(br.readLine());\n\t\t\ttestCase = st.nextToken();\n\t\t\tN = stoi(st.nextToken());\n\t\t\t\n\t\t\tStringTokenizer st2 = new StringTokenizer(br.readLine());\n\t\t\tcountNums(st2);\n\t\t\tprintNums();\t\n\t\t}\n\t}\n\n\tprivate static void countNums(StringTokenizer st) {\n\t\tfor (int i=0; i< N; i++) {\n\t\t\tString input = st.nextToken();\n\t\t\tif (input.equals(\"ZRO\")) cnt[0]++;\n\t\t\telse if (input.equals(\"ONE\")) cnt[1]++;\n\t\t\telse if (input.equals(\"TWO\")) cnt[2]++;\n\t\t\telse if (input.equals(\"THR\")) cnt[3]++;\n\t\t\telse if (input.equals(\"FOR\")) cnt[4]++;\n\t\t\telse if (input.equals(\"FIV\")) cnt[5]++;\n\t\t\telse if (input.equals(\"SIX\")) cnt[6]++;\n\t\t\telse if (input.equals(\"SVN\")) cnt[7]++;\n\t\t\telse if (input.equals(\"EGT\")) cnt[8]++;\n\t\t\telse if (input.equals(\"NIN\")) cnt[9]++;\n\t\t}\n\t}\n\n\tprivate static void printNums() {\n\t\tSystem.out.println(testCase+\" \");\n\t\tint now = 0; // 0 부터 시작\n\t\tfor (int num : cnt) {\n\t\t\twhile(num > 0) {\n\t\t\t\tSystem.out.print(numbers[now]+\" \");\n\t\t\t\tnum--;\n\t\t\t}\n\t\t\tnow++;\n\t\t}\n\t\tSystem.out.println();\n\t}\n\n\tprivate static int stoi(String input) {\n\t\treturn Integer.valueOf(input);\n\t}\n}\n```\n\n* **input**은 아래와 같은 형식으로 들어온다.\n\n  ```java\n  2\n  #1 11\n  SVN FOR ZRO NIN FOR EGT EGT TWO FOR FIV FIV\n  #2 20\n  ONE SVN ONE ONE FIV TWO SVN SIX ONE FOR TWO THR TWO TWO ONE SIX EGT FIV SVN SIX\n  ```\n\n  이 때, **output(정답)**은 아래와 같다.\n\n  ```java\n  #1 \n  ZRO TWO FOR FOR FOR FIV FIV SVN EGT EGT NIN \n  #2 \n  ONE ONE ONE ONE ONE TWO TWO TWO TWO THR FOR FIV FIV SIX SIX SIX SVN SVN SVN EGT \n  ```\n\n* String  배열인 `numbers`를 행성에서 `0~9`로 사용되는 값인 `\"ZRO\", \"ONE\", \"TWO\", \"THR\", \"FOR\", \"FIV\", \"SIX\", \"SVN\", \"EGT\", \"NIN\"` 로 초기화한다.\n* `countNums() `: int 배열 `cnt`는 크기를 `10`으로 하고 input으로 들어오는 `ZRO` 부터 `NIN`까지 해당하는 값에 따라 해당 인덱스에 1씩 더한다.\n* `printNums()` : 먼저 `now` 는 `0~9` 를 의미하며 오름차순으로 `sort`해야하기 때문에 `0`부터 시작해 while문이 종료될 때마다 `1`씩 증가시켰다. for문에서는 `cnt` 배열에서 순서대로 count(`num`) 값을 받아오고, while문에서는 count값(`num`)을 하나씩 빼가며 모든 `now` 인덱스에 해당하는 `numbers` 객체를 출력(`num == 0`)한 후 종료 된다.","slug":"swea-1221","published":1,"updated":"2021-02-08T18:24:53.721Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kr003af9c97ep3doy7","content":"<ul>\n<li>문제: <a href=\"https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14jJh6ACYCFAYD\">https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14jJh6ACYCFAYD</a> &gt; 로그인</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sohee.algo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.StringTokenizer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution1221</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">static</span> String[] numbers = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;ZRO&quot;</span>, <span class=\"string\">&quot;ONE&quot;</span>, <span class=\"string\">&quot;TWO&quot;</span>, <span class=\"string\">&quot;THR&quot;</span>, <span class=\"string\">&quot;FOR&quot;</span>, <span class=\"string\">&quot;FIV&quot;</span>, <span class=\"string\">&quot;SIX&quot;</span>, <span class=\"string\">&quot;SVN&quot;</span>, <span class=\"string\">&quot;EGT&quot;</span>, <span class=\"string\">&quot;NIN&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] cnt;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> String testCase;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.setIn(new FileInputStream(&quot;GNS_test_input.txt&quot;)); </span></span><br><span class=\"line\">\t\tBufferedReader br= <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> T = stoi(br.readLine());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; T; t++) &#123;</span><br><span class=\"line\">      cnt = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">      StringTokenizer st = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\t\ttestCase = st.nextToken();</span><br><span class=\"line\">\t\t\tN = stoi(st.nextToken());</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tStringTokenizer st2 = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\t\tcountNums(st2);</span><br><span class=\"line\">\t\t\tprintNums();\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">countNums</span><span class=\"params\">(StringTokenizer st)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; N; i++) &#123;</span><br><span class=\"line\">\t\t\tString input = st.nextToken();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;ZRO&quot;</span>)) cnt[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;ONE&quot;</span>)) cnt[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;TWO&quot;</span>)) cnt[<span class=\"number\">2</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;THR&quot;</span>)) cnt[<span class=\"number\">3</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;FOR&quot;</span>)) cnt[<span class=\"number\">4</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;FIV&quot;</span>)) cnt[<span class=\"number\">5</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;SIX&quot;</span>)) cnt[<span class=\"number\">6</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;SVN&quot;</span>)) cnt[<span class=\"number\">7</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;EGT&quot;</span>)) cnt[<span class=\"number\">8</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;NIN&quot;</span>)) cnt[<span class=\"number\">9</span>]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printNums</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(testCase+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> now = <span class=\"number\">0</span>; <span class=\"comment\">// 0 부터 시작</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : cnt) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(numbers[now]+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t\t\tnum--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tnow++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">stoi</span><span class=\"params\">(String input)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Integer.valueOf(input);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>input</strong>은 아래와 같은 형식으로 들어온다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">#1 11</span><br><span class=\"line\">SVN FOR ZRO NIN FOR EGT EGT TWO FOR FIV FIV</span><br><span class=\"line\">#2 20</span><br><span class=\"line\">ONE SVN ONE ONE FIV TWO SVN SIX ONE FOR TWO THR TWO TWO ONE SIX EGT FIV SVN SIX</span><br></pre></td></tr></table></figure>\n<p>이 때, **output(정답)**은 아래와 같다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1 </span><br><span class=\"line\">ZRO TWO FOR FOR FOR FIV FIV SVN EGT EGT NIN </span><br><span class=\"line\">#2 </span><br><span class=\"line\">ONE ONE ONE ONE ONE TWO TWO TWO TWO THR FOR FIV FIV SIX SIX SIX SVN SVN SVN EGT </span><br></pre></td></tr></table></figure></li>\n<li><p>String  배열인 <code>numbers</code>를 행성에서 <code>0~9</code>로 사용되는 값인 <code>&quot;ZRO&quot;, &quot;ONE&quot;, &quot;TWO&quot;, &quot;THR&quot;, &quot;FOR&quot;, &quot;FIV&quot;, &quot;SIX&quot;, &quot;SVN&quot;, &quot;EGT&quot;, &quot;NIN&quot;</code> 로 초기화한다.</p>\n</li>\n<li><p><code>countNums() </code>: int 배열 <code>cnt</code>는 크기를 <code>10</code>으로 하고 input으로 들어오는 <code>ZRO</code> 부터 <code>NIN</code>까지 해당하는 값에 따라 해당 인덱스에 1씩 더한다.</p>\n</li>\n<li><p><code>printNums()</code> : 먼저 <code>now</code> 는 <code>0~9</code> 를 의미하며 오름차순으로 <code>sort</code>해야하기 때문에 <code>0</code>부터 시작해 while문이 종료될 때마다 <code>1</code>씩 증가시켰다. for문에서는 <code>cnt</code> 배열에서 순서대로 count(<code>num</code>) 값을 받아오고, while문에서는 count값(<code>num</code>)을 하나씩 빼가며 모든 <code>now</code> 인덱스에 해당하는 <code>numbers</code> 객체를 출력(<code>num == 0</code>)한 후 종료 된다.</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>문제: <a href=\"https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14jJh6ACYCFAYD\">https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14jJh6ACYCFAYD</a> &gt; 로그인</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.sohee.algo;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.BufferedReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileInputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStreamReader;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.StringTokenizer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution1221</span> </span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">static</span> String[] numbers = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">&quot;ZRO&quot;</span>, <span class=\"string\">&quot;ONE&quot;</span>, <span class=\"string\">&quot;TWO&quot;</span>, <span class=\"string\">&quot;THR&quot;</span>, <span class=\"string\">&quot;FOR&quot;</span>, <span class=\"string\">&quot;FIV&quot;</span>, <span class=\"string\">&quot;SIX&quot;</span>, <span class=\"string\">&quot;SVN&quot;</span>, <span class=\"string\">&quot;EGT&quot;</span>, <span class=\"string\">&quot;NIN&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> [] cnt;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> String testCase;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> N;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// System.setIn(new FileInputStream(&quot;GNS_test_input.txt&quot;)); </span></span><br><span class=\"line\">\t\tBufferedReader br= <span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> T = stoi(br.readLine());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t = <span class=\"number\">0</span>; t &lt; T; t++) &#123;</span><br><span class=\"line\">      cnt = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[<span class=\"number\">10</span>];</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">      StringTokenizer st = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\t\ttestCase = st.nextToken();</span><br><span class=\"line\">\t\t\tN = stoi(st.nextToken());</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tStringTokenizer st2 = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\t\tcountNums(st2);</span><br><span class=\"line\">\t\t\tprintNums();\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">countNums</span><span class=\"params\">(StringTokenizer st)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt; N; i++) &#123;</span><br><span class=\"line\">\t\t\tString input = st.nextToken();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;ZRO&quot;</span>)) cnt[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;ONE&quot;</span>)) cnt[<span class=\"number\">1</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;TWO&quot;</span>)) cnt[<span class=\"number\">2</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;THR&quot;</span>)) cnt[<span class=\"number\">3</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;FOR&quot;</span>)) cnt[<span class=\"number\">4</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;FIV&quot;</span>)) cnt[<span class=\"number\">5</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;SIX&quot;</span>)) cnt[<span class=\"number\">6</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;SVN&quot;</span>)) cnt[<span class=\"number\">7</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;EGT&quot;</span>)) cnt[<span class=\"number\">8</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (input.equals(<span class=\"string\">&quot;NIN&quot;</span>)) cnt[<span class=\"number\">9</span>]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">printNums</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tSystem.out.println(testCase+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> now = <span class=\"number\">0</span>; <span class=\"comment\">// 0 부터 시작</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> num : cnt) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.print(numbers[now]+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t\t\tnum--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tnow++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tSystem.out.println();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">stoi</span><span class=\"params\">(String input)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> Integer.valueOf(input);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>input</strong>은 아래와 같은 형식으로 들어온다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">#1 11</span><br><span class=\"line\">SVN FOR ZRO NIN FOR EGT EGT TWO FOR FIV FIV</span><br><span class=\"line\">#2 20</span><br><span class=\"line\">ONE SVN ONE ONE FIV TWO SVN SIX ONE FOR TWO THR TWO TWO ONE SIX EGT FIV SVN SIX</span><br></pre></td></tr></table></figure>\n<p>이 때, **output(정답)**은 아래와 같다.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#1 </span><br><span class=\"line\">ZRO TWO FOR FOR FOR FIV FIV SVN EGT EGT NIN </span><br><span class=\"line\">#2 </span><br><span class=\"line\">ONE ONE ONE ONE ONE TWO TWO TWO TWO THR FOR FIV FIV SIX SIX SIX SVN SVN SVN EGT </span><br></pre></td></tr></table></figure></li>\n<li><p>String  배열인 <code>numbers</code>를 행성에서 <code>0~9</code>로 사용되는 값인 <code>&quot;ZRO&quot;, &quot;ONE&quot;, &quot;TWO&quot;, &quot;THR&quot;, &quot;FOR&quot;, &quot;FIV&quot;, &quot;SIX&quot;, &quot;SVN&quot;, &quot;EGT&quot;, &quot;NIN&quot;</code> 로 초기화한다.</p>\n</li>\n<li><p><code>countNums() </code>: int 배열 <code>cnt</code>는 크기를 <code>10</code>으로 하고 input으로 들어오는 <code>ZRO</code> 부터 <code>NIN</code>까지 해당하는 값에 따라 해당 인덱스에 1씩 더한다.</p>\n</li>\n<li><p><code>printNums()</code> : 먼저 <code>now</code> 는 <code>0~9</code> 를 의미하며 오름차순으로 <code>sort</code>해야하기 때문에 <code>0</code>부터 시작해 while문이 종료될 때마다 <code>1</code>씩 증가시켰다. for문에서는 <code>cnt</code> 배열에서 순서대로 count(<code>num</code>) 값을 받아오고, while문에서는 count값(<code>num</code>)을 하나씩 빼가며 모든 <code>now</code> 인덱스에 해당하는 <code>numbers</code> 객체를 출력(<code>num == 0</code>)한 후 종료 된다.</p>\n</li>\n</ul>\n"},{"title":"[SW Expert Academy] 2056: 연월일 달력","date":"2021-01-16T06:33:00.000Z","_content":"\n* 문제 링크: https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5QLkdKAz4DFAUq\n\n  (로그인해야 볼 수 있음.)\n\n# 풀이\n\n```python\nT = int(input())\n# 여러개의 테스트 케이스가 주어지므로, 각각을 처리합니다.\ndays = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\nfor test_case in range(1, T + 1):\n    case = str(input())\n    year = case[0:4]\n    month = case[4:6]\n    day = case[6:8]\n    \n    answer = ''\n    if 0 < int(month) < 13 and 0 < int(day) <= days[int(month)]:\n        answer = year + '/' + month + '/' + day\n    else:\n        answer += '-1'\n\n    print(\"#\" + str(test_case) + \" \" + answer)\n\n```\n\n* 딕셔너리, 문자열 인덱싱을 통해 풀었다.\n\n* `month`를 `키`로, `month`에 해당하는 `day의 최대 값` 을 `value`로 한 딕셔너리 `days`를 만들었다.\n\n* 테스트 케이스 값을 string으로 전환한 후, 문자열 인덱싱을 통해 `year`,` month`,` day`로 나누었다.\n\n* `year`는 모든 값이 유효하므로 검사하지 않아도 되고, `month`의 경우 1~12 중 하나인지, `day`는 `0` 보다 크고 `month`에 해당하는 값보다 작거나 같은지 검사한다.\n\n  * 모든 조건을 만족한다면 `'#[test_case] [year]/[month]/[day] '`를 출력한다.\n\n    * 여기서 주의할 점은 1월의 경우 01 과 같은 방식으로 출력되어야 하기 때문에 int 로 바꿨다가('01' -> 1) str(1 -> '1') 로 바꾼 후 출력하면 안된다.\n\n  * 만약 하나라도 조건을 만족하지 못하면 `'#[test_case] -1'`을 출력한다.\n\n    \n\n","source":"_posts/swea-2056.md","raw":"---\ntitle: \"[SW Expert Academy] 2056: 연월일 달력\"\ndate: 2021-01-16 15:33:00\ntag: 알고리즘\n---\n\n* 문제 링크: https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5QLkdKAz4DFAUq\n\n  (로그인해야 볼 수 있음.)\n\n# 풀이\n\n```python\nT = int(input())\n# 여러개의 테스트 케이스가 주어지므로, 각각을 처리합니다.\ndays = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\nfor test_case in range(1, T + 1):\n    case = str(input())\n    year = case[0:4]\n    month = case[4:6]\n    day = case[6:8]\n    \n    answer = ''\n    if 0 < int(month) < 13 and 0 < int(day) <= days[int(month)]:\n        answer = year + '/' + month + '/' + day\n    else:\n        answer += '-1'\n\n    print(\"#\" + str(test_case) + \" \" + answer)\n\n```\n\n* 딕셔너리, 문자열 인덱싱을 통해 풀었다.\n\n* `month`를 `키`로, `month`에 해당하는 `day의 최대 값` 을 `value`로 한 딕셔너리 `days`를 만들었다.\n\n* 테스트 케이스 값을 string으로 전환한 후, 문자열 인덱싱을 통해 `year`,` month`,` day`로 나누었다.\n\n* `year`는 모든 값이 유효하므로 검사하지 않아도 되고, `month`의 경우 1~12 중 하나인지, `day`는 `0` 보다 크고 `month`에 해당하는 값보다 작거나 같은지 검사한다.\n\n  * 모든 조건을 만족한다면 `'#[test_case] [year]/[month]/[day] '`를 출력한다.\n\n    * 여기서 주의할 점은 1월의 경우 01 과 같은 방식으로 출력되어야 하기 때문에 int 로 바꿨다가('01' -> 1) str(1 -> '1') 로 바꾼 후 출력하면 안된다.\n\n  * 만약 하나라도 조건을 만족하지 못하면 `'#[test_case] -1'`을 출력한다.\n\n    \n\n","slug":"swea-2056","published":1,"updated":"2021-02-08T18:24:50.695Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0ks003df9c902it1x9u","content":"<ul>\n<li><p>문제 링크: <a href=\"https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5QLkdKAz4DFAUq\">https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5QLkdKAz4DFAUq</a></p>\n<p>(로그인해야 볼 수 있음.)</p>\n</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"comment\"># 여러개의 테스트 케이스가 주어지므로, 각각을 처리합니다.</span></span><br><span class=\"line\">days = &#123;<span class=\"number\">1</span>: <span class=\"number\">31</span>, <span class=\"number\">2</span>: <span class=\"number\">28</span>, <span class=\"number\">3</span>: <span class=\"number\">31</span>, <span class=\"number\">4</span>: <span class=\"number\">30</span>, <span class=\"number\">5</span>: <span class=\"number\">31</span>, <span class=\"number\">6</span>: <span class=\"number\">30</span>, <span class=\"number\">7</span>: <span class=\"number\">31</span>, <span class=\"number\">8</span>: <span class=\"number\">31</span>, <span class=\"number\">9</span>: <span class=\"number\">30</span>, <span class=\"number\">10</span>: <span class=\"number\">31</span>, <span class=\"number\">11</span>: <span class=\"number\">30</span>, <span class=\"number\">12</span>: <span class=\"number\">31</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> test_case <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, T + <span class=\"number\">1</span>):</span><br><span class=\"line\">    case = <span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">    year = case[<span class=\"number\">0</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">    month = case[<span class=\"number\">4</span>:<span class=\"number\">6</span>]</span><br><span class=\"line\">    day = case[<span class=\"number\">6</span>:<span class=\"number\">8</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    answer = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt; <span class=\"built_in\">int</span>(month) &lt; <span class=\"number\">13</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt; <span class=\"built_in\">int</span>(day) &lt;= days[<span class=\"built_in\">int</span>(month)]:</span><br><span class=\"line\">        answer = year + <span class=\"string\">&#x27;/&#x27;</span> + month + <span class=\"string\">&#x27;/&#x27;</span> + day</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        answer += <span class=\"string\">&#x27;-1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">&quot;#&quot;</span> + <span class=\"built_in\">str</span>(test_case) + <span class=\"string\">&quot; &quot;</span> + answer)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>딕셔너리, 문자열 인덱싱을 통해 풀었다.</p>\n</li>\n<li><p><code>month</code>를 <code>키</code>로, <code>month</code>에 해당하는 <code>day의 최대 값</code> 을 <code>value</code>로 한 딕셔너리 <code>days</code>를 만들었다.</p>\n</li>\n<li><p>테스트 케이스 값을 string으로 전환한 후, 문자열 인덱싱을 통해 <code>year</code>,<code> month</code>,<code> day</code>로 나누었다.</p>\n</li>\n<li><p><code>year</code>는 모든 값이 유효하므로 검사하지 않아도 되고, <code>month</code>의 경우 1~12 중 하나인지, <code>day</code>는 <code>0</code> 보다 크고 <code>month</code>에 해당하는 값보다 작거나 같은지 검사한다.</p>\n<ul>\n<li><p>모든 조건을 만족한다면 <code>&#39;#[test_case] [year]/[month]/[day] &#39;</code>를 출력한다.</p>\n<ul>\n<li>여기서 주의할 점은 1월의 경우 01 과 같은 방식으로 출력되어야 하기 때문에 int 로 바꿨다가(‘01’ -&gt; 1) str(1 -&gt; ‘1’) 로 바꾼 후 출력하면 안된다.</li>\n</ul>\n</li>\n<li><p>만약 하나라도 조건을 만족하지 못하면 <code>&#39;#[test_case] -1&#39;</code>을 출력한다.</p>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>문제 링크: <a href=\"https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5QLkdKAz4DFAUq\">https://swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV5QLkdKAz4DFAUq</a></p>\n<p>(로그인해야 볼 수 있음.)</p>\n</li>\n</ul>\n<h1 id=\"풀이\"><a href=\"#풀이\" class=\"headerlink\" title=\"풀이\"></a>풀이</h1><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\"><span class=\"comment\"># 여러개의 테스트 케이스가 주어지므로, 각각을 처리합니다.</span></span><br><span class=\"line\">days = &#123;<span class=\"number\">1</span>: <span class=\"number\">31</span>, <span class=\"number\">2</span>: <span class=\"number\">28</span>, <span class=\"number\">3</span>: <span class=\"number\">31</span>, <span class=\"number\">4</span>: <span class=\"number\">30</span>, <span class=\"number\">5</span>: <span class=\"number\">31</span>, <span class=\"number\">6</span>: <span class=\"number\">30</span>, <span class=\"number\">7</span>: <span class=\"number\">31</span>, <span class=\"number\">8</span>: <span class=\"number\">31</span>, <span class=\"number\">9</span>: <span class=\"number\">30</span>, <span class=\"number\">10</span>: <span class=\"number\">31</span>, <span class=\"number\">11</span>: <span class=\"number\">30</span>, <span class=\"number\">12</span>: <span class=\"number\">31</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> test_case <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, T + <span class=\"number\">1</span>):</span><br><span class=\"line\">    case = <span class=\"built_in\">str</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">    year = case[<span class=\"number\">0</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">    month = case[<span class=\"number\">4</span>:<span class=\"number\">6</span>]</span><br><span class=\"line\">    day = case[<span class=\"number\">6</span>:<span class=\"number\">8</span>]</span><br><span class=\"line\">    </span><br><span class=\"line\">    answer = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"number\">0</span> &lt; <span class=\"built_in\">int</span>(month) &lt; <span class=\"number\">13</span> <span class=\"keyword\">and</span> <span class=\"number\">0</span> &lt; <span class=\"built_in\">int</span>(day) &lt;= days[<span class=\"built_in\">int</span>(month)]:</span><br><span class=\"line\">        answer = year + <span class=\"string\">&#x27;/&#x27;</span> + month + <span class=\"string\">&#x27;/&#x27;</span> + day</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        answer += <span class=\"string\">&#x27;-1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    print(<span class=\"string\">&quot;#&quot;</span> + <span class=\"built_in\">str</span>(test_case) + <span class=\"string\">&quot; &quot;</span> + answer)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>딕셔너리, 문자열 인덱싱을 통해 풀었다.</p>\n</li>\n<li><p><code>month</code>를 <code>키</code>로, <code>month</code>에 해당하는 <code>day의 최대 값</code> 을 <code>value</code>로 한 딕셔너리 <code>days</code>를 만들었다.</p>\n</li>\n<li><p>테스트 케이스 값을 string으로 전환한 후, 문자열 인덱싱을 통해 <code>year</code>,<code> month</code>,<code> day</code>로 나누었다.</p>\n</li>\n<li><p><code>year</code>는 모든 값이 유효하므로 검사하지 않아도 되고, <code>month</code>의 경우 1~12 중 하나인지, <code>day</code>는 <code>0</code> 보다 크고 <code>month</code>에 해당하는 값보다 작거나 같은지 검사한다.</p>\n<ul>\n<li><p>모든 조건을 만족한다면 <code>&#39;#[test_case] [year]/[month]/[day] &#39;</code>를 출력한다.</p>\n<ul>\n<li>여기서 주의할 점은 1월의 경우 01 과 같은 방식으로 출력되어야 하기 때문에 int 로 바꿨다가(‘01’ -&gt; 1) str(1 -&gt; ‘1’) 로 바꾼 후 출력하면 안된다.</li>\n</ul>\n</li>\n<li><p>만약 하나라도 조건을 만족하지 못하면 <code>&#39;#[test_case] -1&#39;</code>을 출력한다.</p>\n</li>\n</ul>\n</li>\n</ul>\n"},{"title":"[SW Expert Academy] 5215:햄버거다이어트 / 부분집합 (java)","date":"2021-02-08T06:32:45.000Z","_content":"\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Solution {\n\tstatic BufferedReader br =new BufferedReader(new InputStreamReader(System.in));\n\tstatic StringTokenizer st;\n\tstatic int limit =0;\n\tstatic int numOfFood=0;\n\tstatic int[][] foodInfo;\n\tstatic boolean[] isSelected;\n\tstatic Queue<int[]> queue;\n\tstatic int maxNum;\n\tpublic static void main(String[] args) throws Exception {\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor(int t=1; t<=T; t++) {\n\t\t\tinput();\n\t\t\tmaxNum = 0;\n\t\t\tgenerateSubset(0);\n\t\t\tSystem.out.printf(\"#%d %d\\n\", t, maxNum); // 높은 스코어 출\n\t\t}\n\t}\n  \n\tprivate static void generateSubset(int cnt) {\n\t\tif(cnt == numOfFood) { // 5개를 다 돌았을 때, \n\t\t\tint total =0;\n\t\t\tint sumOfScore =0;\n\t\t\tfor(int i=0; i<numOfFood; i++) {\n\t\t\t\tif(isSelected[i]) { // 선택 되어있으면\n\t\t\t\t\tsumOfScore += foodInfo[i][0]; // 스코어 더함 \n\t\t\t\t\ttotal += foodInfo[i][1]; // 음식 칼로리 더함\n\t\t\t\t\tif(total>limit) return; // 만약 제한 칼로리를 넘으면 그냥 return\n\t\t\t\t}\n\t\t\t}\n\t\t\tmaxNum = Math.max(maxNum, sumOfScore); // 제한 칼로리보다 낮으면서 높은 스코어를 갱신해서 저장\n\t\t\treturn;\n\t\t}\n\t\tisSelected[cnt] = true; // 선택\n\t\tgenerateSubset(cnt+1);\n\t\tisSelected[cnt] = false; // 비선택\n\t\tgenerateSubset(cnt+1);\n\t}\n  \n\tprivate static void input() throws Exception {\n\t\tst = new StringTokenizer(br.readLine());\n\t\tnumOfFood = Integer.parseInt(st.nextToken());\n\t\tlimit = Integer.parseInt(st.nextToken());\n\t\tfoodInfo = new int[numOfFood][2];\n\t\tisSelected = new boolean[numOfFood];\n\t\tfor(int i=0; i<numOfFood; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tfoodInfo[i][0] = Integer.parseInt(st.nextToken());\n\t\t\tfoodInfo[i][1] = Integer.parseInt(st.nextToken());\n\t\t}\n\t}\n}\n```\n\n","source":"_posts/swea-5215.md","raw":"---\ntitle: \"[SW Expert Academy] 5215:햄버거다이어트 / 부분집합 (java)\"\ndate: 2021-02-08 15:32:45\ntag: 알고리즘\n---\n\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class Solution {\n\tstatic BufferedReader br =new BufferedReader(new InputStreamReader(System.in));\n\tstatic StringTokenizer st;\n\tstatic int limit =0;\n\tstatic int numOfFood=0;\n\tstatic int[][] foodInfo;\n\tstatic boolean[] isSelected;\n\tstatic Queue<int[]> queue;\n\tstatic int maxNum;\n\tpublic static void main(String[] args) throws Exception {\n\t\tint T = Integer.parseInt(br.readLine());\n\t\tfor(int t=1; t<=T; t++) {\n\t\t\tinput();\n\t\t\tmaxNum = 0;\n\t\t\tgenerateSubset(0);\n\t\t\tSystem.out.printf(\"#%d %d\\n\", t, maxNum); // 높은 스코어 출\n\t\t}\n\t}\n  \n\tprivate static void generateSubset(int cnt) {\n\t\tif(cnt == numOfFood) { // 5개를 다 돌았을 때, \n\t\t\tint total =0;\n\t\t\tint sumOfScore =0;\n\t\t\tfor(int i=0; i<numOfFood; i++) {\n\t\t\t\tif(isSelected[i]) { // 선택 되어있으면\n\t\t\t\t\tsumOfScore += foodInfo[i][0]; // 스코어 더함 \n\t\t\t\t\ttotal += foodInfo[i][1]; // 음식 칼로리 더함\n\t\t\t\t\tif(total>limit) return; // 만약 제한 칼로리를 넘으면 그냥 return\n\t\t\t\t}\n\t\t\t}\n\t\t\tmaxNum = Math.max(maxNum, sumOfScore); // 제한 칼로리보다 낮으면서 높은 스코어를 갱신해서 저장\n\t\t\treturn;\n\t\t}\n\t\tisSelected[cnt] = true; // 선택\n\t\tgenerateSubset(cnt+1);\n\t\tisSelected[cnt] = false; // 비선택\n\t\tgenerateSubset(cnt+1);\n\t}\n  \n\tprivate static void input() throws Exception {\n\t\tst = new StringTokenizer(br.readLine());\n\t\tnumOfFood = Integer.parseInt(st.nextToken());\n\t\tlimit = Integer.parseInt(st.nextToken());\n\t\tfoodInfo = new int[numOfFood][2];\n\t\tisSelected = new boolean[numOfFood];\n\t\tfor(int i=0; i<numOfFood; i++) {\n\t\t\tst = new StringTokenizer(br.readLine());\n\t\t\tfoodInfo[i][0] = Integer.parseInt(st.nextToken());\n\t\t\tfoodInfo[i][1] = Integer.parseInt(st.nextToken());\n\t\t}\n\t}\n}\n```\n\n","slug":"swea-5215","published":1,"updated":"2021-02-08T18:24:53.652Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckkwxg0kt003ff9c9gw2e3j1d","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> BufferedReader br =<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> StringTokenizer st;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> limit =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> numOfFood=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[][] foodInfo;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span>[] isSelected;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Queue&lt;<span class=\"keyword\">int</span>[]&gt; queue;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxNum;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> T = Integer.parseInt(br.readLine());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>; t&lt;=T; t++) &#123;</span><br><span class=\"line\">\t\t\tinput();</span><br><span class=\"line\">\t\t\tmaxNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tgenerateSubset(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;#%d %d\\n&quot;</span>, t, maxNum); <span class=\"comment\">// 높은 스코어 출</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generateSubset</span><span class=\"params\">(<span class=\"keyword\">int</span> cnt)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt == numOfFood) &#123; <span class=\"comment\">// 5개를 다 돌았을 때, </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> total =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> sumOfScore =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;numOfFood; i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isSelected[i]) &#123; <span class=\"comment\">// 선택 되어있으면</span></span><br><span class=\"line\">\t\t\t\t\tsumOfScore += foodInfo[i][<span class=\"number\">0</span>]; <span class=\"comment\">// 스코어 더함 </span></span><br><span class=\"line\">\t\t\t\t\ttotal += foodInfo[i][<span class=\"number\">1</span>]; <span class=\"comment\">// 음식 칼로리 더함</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(total&gt;limit) <span class=\"keyword\">return</span>; <span class=\"comment\">// 만약 제한 칼로리를 넘으면 그냥 return</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmaxNum = Math.max(maxNum, sumOfScore); <span class=\"comment\">// 제한 칼로리보다 낮으면서 높은 스코어를 갱신해서 저장</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tisSelected[cnt] = <span class=\"keyword\">true</span>; <span class=\"comment\">// 선택</span></span><br><span class=\"line\">\t\tgenerateSubset(cnt+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tisSelected[cnt] = <span class=\"keyword\">false</span>; <span class=\"comment\">// 비선택</span></span><br><span class=\"line\">\t\tgenerateSubset(cnt+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">input</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tst = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\tnumOfFood = Integer.parseInt(st.nextToken());</span><br><span class=\"line\">\t\tlimit = Integer.parseInt(st.nextToken());</span><br><span class=\"line\">\t\tfoodInfo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[numOfFood][<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\tisSelected = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[numOfFood];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;numOfFood; i++) &#123;</span><br><span class=\"line\">\t\t\tst = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\t\tfoodInfo[i][<span class=\"number\">0</span>] = Integer.parseInt(st.nextToken());</span><br><span class=\"line\">\t\t\tfoodInfo[i][<span class=\"number\">1</span>] = Integer.parseInt(st.nextToken());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> BufferedReader br =<span class=\"keyword\">new</span> BufferedReader(<span class=\"keyword\">new</span> InputStreamReader(System.in));</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> StringTokenizer st;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> limit =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> numOfFood=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span>[][] foodInfo;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span>[] isSelected;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> Queue&lt;<span class=\"keyword\">int</span>[]&gt; queue;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> maxNum;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> T = Integer.parseInt(br.readLine());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> t=<span class=\"number\">1</span>; t&lt;=T; t++) &#123;</span><br><span class=\"line\">\t\t\tinput();</span><br><span class=\"line\">\t\t\tmaxNum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tgenerateSubset(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\tSystem.out.printf(<span class=\"string\">&quot;#%d %d\\n&quot;</span>, t, maxNum); <span class=\"comment\">// 높은 스코어 출</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">generateSubset</span><span class=\"params\">(<span class=\"keyword\">int</span> cnt)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt == numOfFood) &#123; <span class=\"comment\">// 5개를 다 돌았을 때, </span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> total =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> sumOfScore =<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;numOfFood; i++) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(isSelected[i]) &#123; <span class=\"comment\">// 선택 되어있으면</span></span><br><span class=\"line\">\t\t\t\t\tsumOfScore += foodInfo[i][<span class=\"number\">0</span>]; <span class=\"comment\">// 스코어 더함 </span></span><br><span class=\"line\">\t\t\t\t\ttotal += foodInfo[i][<span class=\"number\">1</span>]; <span class=\"comment\">// 음식 칼로리 더함</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(total&gt;limit) <span class=\"keyword\">return</span>; <span class=\"comment\">// 만약 제한 칼로리를 넘으면 그냥 return</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tmaxNum = Math.max(maxNum, sumOfScore); <span class=\"comment\">// 제한 칼로리보다 낮으면서 높은 스코어를 갱신해서 저장</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tisSelected[cnt] = <span class=\"keyword\">true</span>; <span class=\"comment\">// 선택</span></span><br><span class=\"line\">\t\tgenerateSubset(cnt+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tisSelected[cnt] = <span class=\"keyword\">false</span>; <span class=\"comment\">// 비선택</span></span><br><span class=\"line\">\t\tgenerateSubset(cnt+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">input</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\tst = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\tnumOfFood = Integer.parseInt(st.nextToken());</span><br><span class=\"line\">\t\tlimit = Integer.parseInt(st.nextToken());</span><br><span class=\"line\">\t\tfoodInfo = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[numOfFood][<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\tisSelected = <span class=\"keyword\">new</span> <span class=\"keyword\">boolean</span>[numOfFood];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i&lt;numOfFood; i++) &#123;</span><br><span class=\"line\">\t\t\tst = <span class=\"keyword\">new</span> StringTokenizer(br.readLine());</span><br><span class=\"line\">\t\t\tfoodInfo[i][<span class=\"number\">0</span>] = Integer.parseInt(st.nextToken());</span><br><span class=\"line\">\t\t\tfoodInfo[i][<span class=\"number\">1</span>] = Integer.parseInt(st.nextToken());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckkwxg0iw0000f9c9cbiu2oab","tag_id":"ckkwxg0ja0002f9c901d47zwo","_id":"ckkwxg0je0007f9c9ek1gfhei"},{"post_id":"ckkwxg0j50001f9c98yyca79q","tag_id":"ckkwxg0je0006f9c9elrt7nj0","_id":"ckkwxg0jh000cf9c90yozfll9"},{"post_id":"ckkwxg0jb0003f9c90xtl2tkh","tag_id":"ckkwxg0jg000af9c92szpgh3g","_id":"ckkwxg0jj000gf9c9aqun20xk"},{"post_id":"ckkwxg0jc0004f9c9aj1y0au9","tag_id":"ckkwxg0ji000ef9c983y1e7pb","_id":"ckkwxg0jm000kf9c9476mg3c9"},{"post_id":"ckkwxg0jd0005f9c96d51750x","tag_id":"ckkwxg0ji000ef9c983y1e7pb","_id":"ckkwxg0jo000of9c94afx0wfo"},{"post_id":"ckkwxg0je0008f9c90q5y16nf","tag_id":"ckkwxg0jn000mf9c921hl2sp6","_id":"ckkwxg0jq000sf9c94sdxeuqb"},{"post_id":"ckkwxg0jp000qf9c9elk446wy","tag_id":"ckkwxg0jn000mf9c921hl2sp6","_id":"ckkwxg0jr000uf9c93kzee0uv"},{"post_id":"ckkwxg0jf0009f9c90hil4k5y","tag_id":"ckkwxg0jn000mf9c921hl2sp6","_id":"ckkwxg0js000xf9c9ekpue1hh"},{"post_id":"ckkwxg0jg000bf9c9f3mz684e","tag_id":"ckkwxg0jn000mf9c921hl2sp6","_id":"ckkwxg0ju0011f9c9hth3f9ou"},{"post_id":"ckkwxg0jh000df9c99iu594dg","tag_id":"ckkwxg0jn000mf9c921hl2sp6","_id":"ckkwxg0jw0015f9c9hz2xdlh8"},{"post_id":"ckkwxg0ji000ff9c98528db1d","tag_id":"ckkwxg0jn000mf9c921hl2sp6","_id":"ckkwxg0jy0019f9c94sn97609"},{"post_id":"ckkwxg0jj000hf9c96yme3mc0","tag_id":"ckkwxg0jn000mf9c921hl2sp6","_id":"ckkwxg0jz001df9c93l4b7a5c"},{"post_id":"ckkwxg0jk000jf9c9cfmwd22d","tag_id":"ckkwxg0jn000mf9c921hl2sp6","_id":"ckkwxg0k1001hf9c9elbo5gbn"},{"post_id":"ckkwxg0jm000lf9c90jdbdksy","tag_id":"ckkwxg0jn000mf9c921hl2sp6","_id":"ckkwxg0k5001lf9c9dmz40mhf"},{"post_id":"ckkwxg0jn000nf9c96kqtdx1d","tag_id":"ckkwxg0jn000mf9c921hl2sp6","_id":"ckkwxg0k7001pf9c98w1xgool"},{"post_id":"ckkwxg0k7001qf9c943og3769","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0k9001tf9c969t02qf6"},{"post_id":"ckkwxg0jo000pf9c9a6lz7ttm","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0k9001vf9c95duvg3bz"},{"post_id":"ckkwxg0k8001rf9c99hyncu5n","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0ka001yf9c9f9hfbo25"},{"post_id":"ckkwxg0k9001uf9c95rbegmzm","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kb0020f9c90nga5ze4"},{"post_id":"ckkwxg0jq000tf9c976f1dv37","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kc0023f9c92ib9fo7h"},{"post_id":"ckkwxg0ka001wf9c9dloa31cc","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kd0025f9c9ftfk6dky"},{"post_id":"ckkwxg0kb001zf9c95xphhkan","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0ke0028f9c9brptf127"},{"post_id":"ckkwxg0jr000vf9c9h9rkb1ka","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kf002af9c91bwq9fg4"},{"post_id":"ckkwxg0kb0021f9c91o6aapuu","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kg002df9c94w0w5esz"},{"post_id":"ckkwxg0kc0024f9c962waaprl","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kh002ff9c9gtt96382"},{"post_id":"ckkwxg0js000yf9c9bu6g54ob","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0ki002if9c9f5a36qwu"},{"post_id":"ckkwxg0kd0026f9c90nsm1e9e","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kj002kf9c9cbgkh1eo"},{"post_id":"ckkwxg0ke0029f9c94eppbr7f","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kk002nf9c9cq1ianw9"},{"post_id":"ckkwxg0jt000zf9c99zj5ez3x","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kl002pf9c93471gkf4"},{"post_id":"ckkwxg0kf002bf9c987yuezpr","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0km002sf9c9avlqb9kt"},{"post_id":"ckkwxg0kg002ef9c9h22chgus","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0km002uf9c9ey3gbgz9"},{"post_id":"ckkwxg0ju0012f9c97c0cbjoz","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kn002xf9c9hafv1sfb"},{"post_id":"ckkwxg0kh002gf9c9btrqhamu","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0ko002zf9c9g84thkwf"},{"post_id":"ckkwxg0ki002jf9c9fbej43n7","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kp0032f9c90og0hyy1"},{"post_id":"ckkwxg0jv0013f9c923ck66ym","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kq0034f9c94qf36xbr"},{"post_id":"ckkwxg0kj002lf9c9611q0z73","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kr0037f9c98q5zhrci"},{"post_id":"ckkwxg0kk002of9c969l07wj9","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kr0039f9c9h87a9qrc"},{"post_id":"ckkwxg0jw0016f9c9c3k40zgf","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0ks003cf9c9g837gw3u"},{"post_id":"ckkwxg0jw0017f9c96qtb0zs0","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kt003ef9c9g6ka09da"},{"post_id":"ckkwxg0jy001af9c9gbbq0u6c","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0ku003hf9c95czrdura"},{"post_id":"ckkwxg0jy001bf9c9dt25bm28","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kv003if9c9643tf12w"},{"post_id":"ckkwxg0kr0038f9c9h28h0hns","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kv003kf9c9cz4q6xez"},{"post_id":"ckkwxg0jz001ef9c92clnfcon","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kv003lf9c9fi1405y2"},{"post_id":"ckkwxg0kr003af9c97ep3doy7","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kw003nf9c91yjk0ztw"},{"post_id":"ckkwxg0ks003df9c902it1x9u","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kw003of9c9gnys3lzr"},{"post_id":"ckkwxg0k0001ff9c99046cb2d","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kw003qf9c98u7ug6mm"},{"post_id":"ckkwxg0kt003ff9c9gw2e3j1d","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kx003rf9c9edp246j4"},{"post_id":"ckkwxg0k2001if9c92ay7boa7","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kx003tf9c9ctay604k"},{"post_id":"ckkwxg0k4001jf9c9350d10mi","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kx003uf9c94ghag2hj"},{"post_id":"ckkwxg0k5001mf9c9445zc5e9","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0kx003wf9c93yv5cmut"},{"post_id":"ckkwxg0k6001nf9c90d7h0mbo","tag_id":"ckkwxg0k7001of9c9eho318l8","_id":"ckkwxg0ky003xf9c91qix3o7z"},{"post_id":"ckkwxg0kl002qf9c9hr1wdebd","tag_id":"ckkwxg0kx003sf9c90x2bdy6u","_id":"ckkwxg0ky003zf9c9b7m96qj8"},{"post_id":"ckkwxg0km002tf9c90sw3fql0","tag_id":"ckkwxg0kx003sf9c90x2bdy6u","_id":"ckkwxg0ky0040f9c97vnp5cty"},{"post_id":"ckkwxg0kn002vf9c9gu42cst3","tag_id":"ckkwxg0kx003sf9c90x2bdy6u","_id":"ckkwxg0kz0042f9c99j860wr6"},{"post_id":"ckkwxg0ko002yf9c90v89f5il","tag_id":"ckkwxg0kx003sf9c90x2bdy6u","_id":"ckkwxg0kz0044f9c992t63oi9"},{"post_id":"ckkwxg0ko0030f9c96nqp05el","tag_id":"ckkwxg0kx003sf9c90x2bdy6u","_id":"ckkwxg0kz0046f9c9ht0rdldr"},{"post_id":"ckkwxg0kp0033f9c9f0mp95gs","tag_id":"ckkwxg0kx003sf9c90x2bdy6u","_id":"ckkwxg0l00048f9c967ipgbf2"},{"post_id":"ckkwxg0kq0035f9c91e53cjet","tag_id":"ckkwxg0kx003sf9c90x2bdy6u","_id":"ckkwxg0l00049f9c96zor36p8"}],"Tag":[{"name":"C++","_id":"ckkwxg0ja0002f9c901d47zwo"},{"name":"보안","_id":"ckkwxg0je0006f9c9elrt7nj0"},{"name":"알고리즘설명","_id":"ckkwxg0jg000af9c92szpgh3g"},{"name":"안드로이드","_id":"ckkwxg0ji000ef9c983y1e7pb"},{"name":"앵귤러","_id":"ckkwxg0jn000mf9c921hl2sp6"},{"name":"알고리즘","_id":"ckkwxg0k7001of9c9eho318l8"},{"name":"파이썬","_id":"ckkwxg0kx003sf9c90x2bdy6u"}]}}